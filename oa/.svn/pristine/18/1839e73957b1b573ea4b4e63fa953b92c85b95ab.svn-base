 package com.xoa.service.workflow;
 
 import com.xoa.dao.workflow.FlowSortMapper;
 import com.xoa.dao.workflow.FormSortMapper;
 import com.xoa.model.department.Department;
 import com.xoa.model.users.Users;
 import com.xoa.model.workflow.FlowSort;
 import com.xoa.model.workflow.FlowSortWorkMobile;
import com.xoa.model.workflow.FlowTypeModel;
 import com.xoa.model.workflow.FormSort;
 import com.xoa.service.department.DepartmentService;
 import com.xoa.service.workflow.flowtype.FlowTypeService;
 import com.xoa.service.workflow.wrapper.JobSelectorWrapper;
 import com.xoa.util.ToJson;
 import com.xoa.util.common.CheckCallBack;
 import com.xoa.util.common.L;
 import com.xoa.util.common.StringUtils;
 import com.xoa.util.common.session.SessionUtils;
 import com.xoa.util.common.wrapper.BaseWrapper;
 import com.xoa.util.common.wrapper.BaseWrappers;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Resource;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
 @Service
 public class JobClassifyService
 {
 
   @Autowired
   FormSortMapper sortMapper;
 
   @Autowired
   FlowSortMapper flowSortMapper;
 
   @Resource
   private FlowTypeService flowTypeService;
   private static final int CHECK_TYPE_FLOW = 17;
   private static final int CHECK_TYPE_FORM = 18;
 
   @Autowired
   private DepartmentService departmentService;
 
   public JobSelectorWrapper getJobSelector(HttpSession session)
   {
     JobSelectorWrapper wrapper = new JobSelectorWrapper();
     Users users = (Users)SessionUtils.getSessionInfo(session, Users.class, new Users());
     Integer deptId = null;
     if (users.getUserId() != null) {
       deptId = users.getDeptId();
     }
     List nosortDatas = this.sortMapper.selectAllFormSort(deptId);
     Integer noform = Integer.valueOf(this.sortMapper.selectNoformSort(deptId));
     List resultdatas = new ArrayList();
     FormSort formSort = new FormSort();
     formSort.setSortName("未定义");
     formSort.setFormcounts(noform);
     formSort.setHaveChild("0");
     formSort.setSortNo(Integer.valueOf(0));
     resultdatas.add(formSort);
     List datasMap = sortDatas(nosortDatas, Integer.valueOf(0));
     resultdatas.addAll(datasMap);
     wrapper.setDatas(resultdatas);
     wrapper.setFlag(true);
     wrapper.setStatus(true);
     wrapper.setMsg("获取数据成功");
     return wrapper;
   }
 
   public JobSelectorWrapper getFlowsort(HttpSession session)
   {
     JobSelectorWrapper wrapper = new JobSelectorWrapper();
     Users users = (Users)SessionUtils.getSessionInfo(session, Users.class, new Users());
     Integer deptId = null;
     if (users.getUserId() != null) {
       deptId = users.getDeptId();
     }
     List nosortDatas = this.flowSortMapper.selectAllFlowSort(deptId);
     Integer noform = this.flowSortMapper.selectNoflowSort(deptId);
     List resultdatas = new ArrayList();
     FlowSort flowSort = new FlowSort();
     flowSort.setSortName("未定义");
     flowSort.setFlowcounts(noform);
     flowSort.setHaveChild("0");
     flowSort.setSortNo(Integer.valueOf(0));
     resultdatas.add(flowSort);
     List datasMap = sortDatasFlow(nosortDatas, Integer.valueOf(0));
     resultdatas.addAll(datasMap);
     wrapper.setDatas(resultdatas);
     wrapper.setFlag(true);
     wrapper.setStatus(true);
     wrapper.setMsg("获取数据成功");
     return wrapper;
   }
 
   private List<FlowSort> sortDatasFlow(List<FlowSort> nosortDatas, Integer sortIda)
   {
     if (nosortDatas == null) return null;
     List datas = new ArrayList();
     for (FlowSort sort : nosortDatas) {
       if ((sort != null) && 
         (sort.getSortParent() == sortIda)) {
         sort.setChilds(sortDatasFlow(nosortDatas, sort.getSortId()));
         datas.add(sort);
       }
     }
 
     return datas;
   }
 
   private List<FormSort> sortDatas(List<FormSort> nosortDatas, Integer sortIda)
   {
     if (nosortDatas == null) return null;
     List datas = new ArrayList();
     for (FormSort sort : nosortDatas) {
       if ((sort != null) && 
         (sort.getSortParent() == sortIda)) {
         sort.setChilds(sortDatas(nosortDatas, sort.getSortId()));
         datas.add(sort);
       }
     }
 
     return datas;
   }
 
   @Transactional(rollbackFor={JobClassifyException.class})
   public BaseWrapper insertForm(Integer parentId, Integer sortNo, String formName, Integer departmentId)
   {
     BaseWrapper wrapper = new BaseWrapper();
     wrapper.setFlag(false);
     wrapper.setStatus(true);
     String res = StringUtils.checkNullUtils(new CheckCallBack()
     {
       public boolean isNull(Object obj) {
         if ((obj instanceof String)) {
           String a = (String)obj;
           if ((a == null) || ("".equals(a)) || (a.length() == 0))
           {
             return true;
           }
         }
         if ((obj instanceof Integer)) {
           Integer a = (Integer)obj;
           if (a == null)
             return true;
         }
         return false;
       }
     }
     , new Object[] { sortNo, "表单分类序号不能为空", formName, "表单分类名称不能为空" });
 
     if (res != null) {
       wrapper.setMsg(res);
       return wrapper;
     }
     String resc = checkParentOrDepartment(parentId, departmentId, Integer.valueOf(18));
     if (resc != null) {
       wrapper.setMsg(resc);
       return wrapper;
     }
     try
     {
       FormSort sortParent = new FormSort();
       sortParent.setSortId(parentId);
       sortParent.setHaveChild("1");
       this.sortMapper.updateByPrimaryKeySelective(sortParent);
       FormSort sort = new FormSort();
       sort.setSortNo(sortNo);
       sort.setSortName(formName);
       sort.setSortParent(parentId);
       sort.setDeptId(departmentId);
       sort.setHaveChild("0");
       Integer insertRes = Integer.valueOf(this.sortMapper.insertSelective(sort));
       if (insertRes.intValue() < 0) throw new JobClassifyException("数据插入异常，进入回滚");
       wrapper.setStatus(true);
       wrapper.setFlag(true);
       wrapper.setMsg("操作执行成功");
     }
     catch (Exception e) {
       e.printStackTrace();
       L.w(new Object[] { "数据回滚" });
       throw new JobClassifyException("数据插入异常，执行回滚");
     }
     return wrapper;
   }
 
   @Transactional(rollbackFor={JobClassifyException.class})
   public BaseWrapper insertFlow(Integer parentId, Integer sortNo, String flowName, Integer departmentId, String sortMainType, String sortDetialType)
   {
     BaseWrapper wrapper = new BaseWrapper();
     wrapper.setFlag(false);
     wrapper.setStatus(true);
     String res = StringUtils.checkNullUtils(new CheckCallBack()
     {
       public boolean isNull(Object obj) {
         if ((obj instanceof String)) {
           String a = (String)obj;
           if ((a == null) || ("".equals(a)) || (a.length() == 0))
           {
             return true;
           }
         }
         if ((obj instanceof Integer)) {
           Integer a = (Integer)obj;
           if (a == null)
             return true;
         }
         return false;
       }
     }
     , new Object[] { sortNo, "流程分类序号不能为空", flowName, "流程分类名称不能为空" });
 
     if (res != null) {
       wrapper.setMsg(res);
       return wrapper;
     }
     String resc = checkParentOrDepartment(parentId, departmentId, Integer.valueOf(17));
     if (resc != null) {
       wrapper.setMsg(resc);
       return wrapper;
     }
     try {
       FlowSort flowParent = new FlowSort();
       flowParent.setSortId(parentId);
       flowParent.setHaveChild("1");
       this.flowSortMapper.updateByPrimaryKeySelective(flowParent);
       FlowSort flow = new FlowSort();
       flow.setSortNo(sortNo);
       flow.setSortName(flowName);
       flow.setSortParent(parentId);
       flow.setDeptId(departmentId);
       flow.setHaveChild("0");
       flow.setSortMainType(sortMainType);
       flow.setSortDetailType(sortDetialType);
       Integer insertRes = Integer.valueOf(this.flowSortMapper.insertSelective(flow));
       if (insertRes.intValue() < 0) throw new JobClassifyException("数据插入异常，进入回滚");
       wrapper.setStatus(true);
       wrapper.setFlag(true);
       wrapper.setMsg("操作执行成功");
     }
     catch (Exception e) {
       e.printStackTrace();
       L.w(new Object[] { "数据回滚" });
       throw new JobClassifyException("数据插入异常，执行回滚");
     }
     return wrapper;
   }
 
   @Transactional(rollbackFor={JobClassifyException.class})
   public BaseWrapper formUpdate(Integer formId, Integer parentId, Integer sortNo, String formName, Integer departmentId)
   {
     BaseWrapper wrapper = new BaseWrapper();
     wrapper.setFlag(false);
     wrapper.setStatus(true);
     if (formId == null) {
       wrapper.setMsg("表单id不能为空");
       return wrapper;
     }
     FormSort exeSort = this.sortMapper.selectByPrimaryKey(formId);
     if (exeSort == null) {
       wrapper.setMsg("无效的请求id");
       return wrapper;
     }
 
     FormSort sortCur = new FormSort();
     sortCur.setDeptId(departmentId);
     sortCur.setSortId(formId);
     sortCur.setSortName(formName);
     sortCur.setSortNo(sortNo);
     sortCur.setSortParent(parentId);
     Integer curRes = Integer.valueOf(this.sortMapper.updateByPrimaryKeySelective(sortCur));
     if (curRes.intValue() < 0) throw new JobClassifyException("表单更新失败");
     if (exeSort.getSortParent().intValue() != 0)
     {
       Integer childSize = Integer.valueOf(this.sortMapper.getChildNumber(exeSort.getSortParent()));
       L.w(new Object[] { "o==||===========================>" + childSize });
 
       if (childSize.intValue() <= 2)
       {
         FormSort sortParent = new FormSort();
         sortParent.setHaveChild("0");
         sortParent.setSortId(exeSort.getSortParent());
         Integer parRes = Integer.valueOf(this.sortMapper.updateByPrimaryKeySelective(sortParent));
         if (parRes.intValue() < 1) throw new JobClassifyException("表单更新失败");
       }
 
     }
 
     if (parentId.intValue() != 0) {
       Integer childSize = Integer.valueOf(this.sortMapper.getChildNumber(parentId));
       if (childSize.intValue() == 0) {
         FormSort sortParent = new FormSort();
         sortParent.setHaveChild("1");
         sortParent.setSortId(parentId);
         Integer parRes = Integer.valueOf(this.sortMapper.updateByPrimaryKeySelective(sortParent));
         if (parRes.intValue() < 1) throw new JobClassifyException("表单更新失败");
       }
 
     }
 
     wrapper.setFlag(true);
     wrapper.setStatus(true);
     wrapper.setMsg("更新成功");
     return wrapper;
   }
 
   @Transactional(rollbackFor={JobClassifyException.class})
   public BaseWrapper flowUpdate(Integer flowId, Integer parentId, Integer sortNo, String flowName, Integer departmentId, String sortMainType, String sortDetialType)
   {
     BaseWrapper wrapper = new BaseWrapper();
     wrapper.setFlag(false);
     wrapper.setStatus(true);
     if (flowId == null) {
       wrapper.setMsg("表单id不能为空");
       return wrapper;
     }
     FlowSort exeSort = this.flowSortMapper.selectByPrimaryKey(flowId);
     if (exeSort == null) {
       wrapper.setMsg("无效的请求id");
       return wrapper;
     }
 
     FlowSort sortCur = new FlowSort();
     sortCur.setDeptId(departmentId);
     sortCur.setSortId(flowId);
     sortCur.setSortName(flowName);
     sortCur.setSortNo(sortNo);
     sortCur.setSortParent(parentId);
     sortCur.setSortMainType(sortMainType);
     sortCur.setSortDetailType(sortDetialType);
     Integer curRes = Integer.valueOf(this.flowSortMapper.updateByPrimaryKeySelective(sortCur));
     if (curRes.intValue() < 0) throw new JobClassifyException("表单更新失败");
     if (exeSort.getSortParent().intValue() != 0)
     {
       Integer childSize = Integer.valueOf(this.flowSortMapper.getChildNumber(exeSort.getSortParent()));
       L.w(new Object[] { "o==||===========================>" + childSize });
       if (childSize.intValue() <= 2)
       {
         FlowSort sortParent = new FlowSort();
         sortParent.setHaveChild("0");
         sortParent.setSortId(exeSort.getSortParent());
         Integer parRes = Integer.valueOf(this.flowSortMapper.updateByPrimaryKeySelective(sortParent));
         if (parRes.intValue() < 1) throw new JobClassifyException("表单更新失败");
       }
     }
 
     if (parentId.intValue() != 0) {
       Integer childSize = Integer.valueOf(this.flowSortMapper.getChildNumber(parentId));
       if (childSize.intValue() == 0) {
         FlowSort sortParent = new FlowSort();
         sortParent.setHaveChild("1");
         sortParent.setSortId(parentId);
         Integer parRes = Integer.valueOf(this.flowSortMapper.updateByPrimaryKeySelective(sortParent));
         if (parRes.intValue() < 1) throw new JobClassifyException("表单更新失败");
       }
     }
     wrapper.setFlag(true);
     wrapper.setStatus(true);
     wrapper.setMsg("更新成功");
     return wrapper;
   }
 
   @Transactional(rollbackFor={JobClassifyException.class})
   public BaseWrapper deleteFlow(Integer flowId)
   {
     BaseWrapper wrapper = new BaseWrapper();
     wrapper.setFlag(false);
     wrapper.setStatus(true);
     try {
       if (flowId == null) {
         wrapper.setMsg("流程id不能为空");
         return wrapper;
       }
       FlowSort exeSort = this.flowSortMapper.selectByPrimaryKey(flowId);
       if (exeSort == null) {
         wrapper.setMsg("无效的请求id");
         return wrapper;
       }
 
       Integer childSize = Integer.valueOf(this.flowSortMapper.getChildNumber(flowId));
       if (childSize.intValue() > 0) {
         wrapper.setMsg("该分类下下存在子分类，请先删除子分类在删除此分类。");
         return wrapper;
       }
 
       Integer flowSize = Integer.valueOf(this.flowSortMapper.selectflowSortNum(flowId));
       if (flowSize.intValue() > 0) {
         wrapper.setMsg("该分类下下存在流程，请先删除流程在删除此分类。");
         return wrapper;
       }
 
       int deleteRes = this.flowSortMapper.deleteByPrimaryKey(flowId);
       if (deleteRes > 0) {
         wrapper.setFlag(true);
         wrapper.setStatus(true);
         wrapper.setMsg("操作成功");
       } else {
         throw new JobClassifyException("流程删除失败");
       }
 
       if (exeSort.getSortParent().intValue() != 0)
       {
         Integer pchildSize = Integer.valueOf(this.flowSortMapper.getChildNumber(exeSort.getSortParent()));
         L.w(new Object[] { "o==||===========================>" + pchildSize });
         if (pchildSize.intValue() <= 2)
         {
           FlowSort sortParent = new FlowSort();
           sortParent.setHaveChild("0");
           sortParent.setSortId(exeSort.getSortParent());
           Integer parRes = Integer.valueOf(this.flowSortMapper.updateByPrimaryKeySelective(sortParent));
           if (parRes.intValue() < 1) throw new JobClassifyException("流程删除失败"); 
         }
       }
     }
     catch (Exception e) {
       e.printStackTrace();
       throw new JobClassifyException("流程删除失败");
     }
 
     return wrapper;
   }
 
   @Transactional(rollbackFor={JobClassifyException.class})
   public BaseWrapper deleteForm(Integer formId)
   {
     BaseWrapper wrapper = new BaseWrapper();
     wrapper.setFlag(false);
     wrapper.setStatus(true);
     try {
       if (formId == null) {
         wrapper.setMsg("表单id不能为空");
         return wrapper;
       }
       FormSort exeSort = this.sortMapper.selectByPrimaryKey(formId);
       if (exeSort == null) {
         wrapper.setMsg("无效的请求id");
         return wrapper;
       }
 
       Integer childSize = Integer.valueOf(this.sortMapper.getChildNumber(formId));
       if (childSize.intValue() > 0) {
         wrapper.setMsg("该分类下下存在子分类，请先删除子分类在删除此分类。");
         return wrapper;
       }
 
       Integer flowSize = Integer.valueOf(this.sortMapper.selectflowSortNum(formId));
       if (flowSize.intValue() > 0) {
         wrapper.setMsg(" 该分类下下存在表单，请先删除表单在删除此分类。");
         return wrapper;
       }
 
       int deleteRes = this.sortMapper.deleteByPrimaryKey(formId);
       if (deleteRes > 0) {
         wrapper.setFlag(true);
         wrapper.setStatus(true);
         wrapper.setMsg("操作成功");
       } else {
         throw new JobClassifyException("流程删除失败");
       }
 
       if (exeSort.getSortParent().intValue() != 0)
       {
         Integer pchildSize = Integer.valueOf(this.sortMapper.getChildNumber(exeSort.getSortParent()));
         L.w(new Object[] { "o==||===========================>" + pchildSize });
         if (pchildSize.intValue() <= 2)
         {
           FormSort sortParent = new FormSort();
           sortParent.setHaveChild("0");
           sortParent.setSortId(exeSort.getSortParent());
           Integer parRes = Integer.valueOf(this.sortMapper.updateByPrimaryKeySelective(sortParent));
           if (parRes.intValue() < 1) throw new JobClassifyException("流程删除失败"); 
         }
       }
     }
     catch (Exception e) {
       e.printStackTrace();
       throw new JobClassifyException("流程删除失败");
     }
 
     return wrapper;
   }
 
   private String checkParentOrDepartment(Integer parentId, Integer departmentId, Integer type)
   {
     if (departmentId.intValue() != 0)
     {
       Department department = this.departmentService.getDeptById(departmentId.intValue());
       if ((department == null) || (department.getDeptId() == null)) {
         return "所属部门不存在";
       }
     }
     if (parentId.intValue() == 0)
     {
       return null;
     }
     switch (type.intValue())
     {
     case 18:
       FormSort formSort = this.sortMapper.selectByPrimaryKey(parentId);
       if ((formSort != null) && (formSort.getSortId() != null)) break;
       return "所属分类不存在";
     case 17:
       FlowSort flowSort = this.flowSortMapper.selectByPrimaryKey(parentId);
       if ((flowSort != null) && (flowSort.getSortId() != null)) break;
       return "所属分类不存在";
     default:
       return "发生未知程序错误！";
     }
 
     return null;
   }
 
   public JobSelectorWrapper easyFormTree(HttpSession session)
   {
     JobSelectorWrapper wrapper = new JobSelectorWrapper();
     Users users = (Users)SessionUtils.getSessionInfo(session, Users.class, new Users());
     Integer deptId = null;
     if (users.getUserId() != null) {
       deptId = users.getDeptId();
     }
     List resultdatas = new ArrayList();
     List nosortDatas = this.sortMapper.selectAllFormSortByTree(deptId);
     Integer noform = Integer.valueOf(this.sortMapper.selectNoformSort(deptId));
     FormSort formSort = new FormSort();
     formSort.setSortName("未定义");
     formSort.setFormcounts(noform);
     formSort.setHaveChild("0");
     formSort.setSortNo(Integer.valueOf(0));
     formSort.setSortId(Integer.valueOf(-1));
     formSort.setSortParent(Integer.valueOf(0));
     FormSort formSortP = new FormSort();
     formSortP.setSortName("表单分类");
     formSortP.setFormcounts(noform);
     formSortP.setHaveChild("0");
     formSortP.setSortNo(Integer.valueOf(0));
     formSortP.setSortId(Integer.valueOf(0));
     resultdatas.add(formSortP);
     resultdatas.add(formSort);
     resultdatas.addAll(nosortDatas);
     wrapper.setDatas(resultdatas);
     wrapper.setFlag(true);
     wrapper.setStatus(true);
     wrapper.setMsg("获取数据成功");
     return wrapper;
   }
 
   public JobSelectorWrapper easyFlowTree(HttpSession session)
   {
     JobSelectorWrapper wrapper = new JobSelectorWrapper();
     Users users = (Users)SessionUtils.getSessionInfo(session, Users.class, new Users());
     Integer deptId = null;
     if (users.getUserId() != null) {
       deptId = users.getDeptId();
     }
     List nosortDatas = this.flowSortMapper.selectAllFlowSort(deptId);
     Integer noform = this.flowSortMapper.selectNoflowSort(deptId);
     List resultdatas = new ArrayList();
     FlowSort flowSort = new FlowSort();
     flowSort.setSortName("未定义");
     flowSort.setFlowcounts(noform);
     flowSort.setHaveChild("0");
     flowSort.setSortNo(Integer.valueOf(0));
     flowSort.setSortParent(Integer.valueOf(0));
     flowSort.setSortId(Integer.valueOf(-1));
     FlowSort flowSortP = new FlowSort();
     flowSortP.setSortName("流程分类");
     flowSortP.setFlowcounts(noform);
     flowSortP.setHaveChild("0");
     flowSortP.setSortNo(Integer.valueOf(0));
     flowSortP.setSortId(Integer.valueOf(0));
     resultdatas.add(flowSortP);
     resultdatas.add(flowSort);
     resultdatas.addAll(nosortDatas);
     wrapper.setDatas(resultdatas);
     wrapper.setFlag(true);
     wrapper.setStatus(true);
     wrapper.setMsg("获取数据成功");
     return wrapper;
   }
 
   public JobSelectorWrapper getFlowsortByAuth(HttpServletRequest request)
   {
     JobSelectorWrapper wrapper = new JobSelectorWrapper();
     wrapper.setStatus(true);
     wrapper.setFlag(false);
     Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
     if (user.getUid() == null) {
       wrapper.setMsg("无法获取用户信息");
       return wrapper;
     }
     Map param = new HashMap();
     String privOther = user.getUserPrivOther() == null ? "" : user.getUserPrivOther();
     String[] privIds = privOther.split(",");
     String deptOther = user.getDeptIdOther() == null ? "" : user.getDeptIdOther();
     String[] deptIds = deptOther.split(",");
     param.put("user", user.getUserId() == null ? "" : user.getUserId());
     param.put("deptId", user.getDeptId() == null ? "" : user.getDeptId());
     param.put("privId", user.getUserPriv() == null ? "" : user.getUserPriv());
     if ((privIds != null) && (privIds.length > 0)) {
       param.put("privIds", privIds);
     }
     if ((deptIds != null) && (deptIds.length > 0)) {
       param.put("deptIds", deptIds);
     }
 
     List<FlowSort> nosortDatas = this.flowSortMapper.selectAllFs(user.getDeptId());
 
     for (FlowSort flowSort : nosortDatas) {
       Integer flowCounts = Integer.valueOf(this.flowSortMapper.countAllFs(flowSort.getSortId()));
       flowSort.setFlowcounts(flowCounts);
     }
 
     List authdatas = this.flowSortMapper.selectFlowSortByAuth(param);
 
     List authdatasSort = sortDatasAuthFlow(authdatas, Integer.valueOf(0), nosortDatas);
     if ((authdatasSort != null) && (authdatasSort.size() > 0)) {
       wrapper.setFlag(true);
       wrapper.setMsg("获取成功");
       wrapper.setDatas(authdatasSort);
     } else {
       wrapper.setFlag(false);
       wrapper.setMsg("没有数据");
     }
 
     return wrapper;
   }
 
   public List<Integer> getSortChildId(Integer sortId, List<Integer> ret)
   {
     List<FlowSort> childs = this.flowSortMapper.getChildDatas(sortId);
     ret.add(sortId);
     if (childs == null) return ret;
     for (FlowSort child : childs) {
       if ("1".equals(child.getHaveChild().trim())) {
         ret = getSortChildId(child.getSortId(), ret);
       }
       ret.add(child.getSortId());
     }
     return ret;
   }
 
   private List<FlowSort> sortDatasAuthFlow(List<FlowSort> authdatas, Integer sortIda, List<FlowSort> alldata)
   {
     if (authdatas == null) return null;
     List datas = new ArrayList();
     for (FlowSort sort : authdatas) {
       if (sort != null) {
         List authdatass = new ArrayList();
         if (sort.getSortParent().intValue() != 0) {
           int checkRes = 0;
           for (FlowSort need : authdatas) {
             if (need.getSortId() != sort.getSortParent()) {
               checkRes++;
             }
           }
 
           if (checkRes == authdatas.size()) {
             authdatass.addAll(authdatas);
             for (FlowSort all : alldata) {
               if (all.getSortId() == sort.getSortParent()) {
                 authdatass.add(all);
               }
             }
           }
         }
         if (authdatass.size() > 0) {
           if (sort.getSortParent() == sortIda) {
             sort.setChilds(sortDatasAuthFlow(authdatass, sort.getSortId(), alldata));
             datas.add(sort);
           }
         }
         else if (sort.getSortParent() == sortIda) {
           sort.setChilds(sortDatasAuthFlow(authdatas, sort.getSortId(), alldata));
           datas.add(sort);
         }
       }
 
     }
 
     return datas;
   }
 
   public BaseWrappers getFlowSortByAuthWithMobile(HttpServletRequest request) {
     BaseWrappers wrapper = new BaseWrappers();
     wrapper.setStatus(true);
     wrapper.setFlag(false);
     Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
     if (user.getUid() == null) {
       wrapper.setMsg("无法获取用户信息");
       return wrapper;
     }
     Map param = new HashMap();
     String privOther = user.getUserPrivOther() == null ? "" : user.getUserPrivOther();
     String[] privIds = privOther.split(",");
     String deptOther = user.getDeptIdOther() == null ? "" : user.getDeptIdOther();
     String[] deptIds = deptOther.split(",");
     param.put("user", user.getUserId() == null ? "" : user.getUserId());
     param.put("deptId", user.getDeptId() == null ? "" : user.getDeptId());
     param.put("privId", user.getUserPriv() == null ? "" : user.getUserPriv());
     if ((privIds != null) && (privIds.length > 0)) {
       param.put("privIds", privIds);
     }
     if ((deptIds != null) && (deptIds.length > 0)) {
       param.put("deptIds", deptIds);
     }
     List<FlowSort> nosortDatas = this.flowSortMapper.selectAllFlowSort(user.getDeptId());
     List<FlowSort> authdatas = this.flowSortMapper.selectFlowSortByAuth(param);
     List<FlowSort> authdatasSort = sortDatasAuthFlow(authdatas, Integer.valueOf(0), nosortDatas);
     List<FlowSortWorkMobile> relDatas = new ArrayList<FlowSortWorkMobile>();
     FlowSortWorkMobile usll = new FlowSortWorkMobile();
     usll.setSortName("常用流程");
     ToJson<FlowTypeModel> uslljson = this.flowTypeService.selectFlowAuthOrSearch(request, "", null);
     if (uslljson.isFlag()) {
       usll.setFlowTypes(uslljson.getObj());
     }
     relDatas.add(usll);
     for (FlowSort sort : authdatasSort) {
       FlowSortWorkMobile mobile = new FlowSortWorkMobile();
       mobile.setSortName(sort.getSortName());
       ToJson<FlowTypeModel> json = this.flowTypeService.selectFlowAuthOrSearch(request, "", sort.getSortId());
       if (json.isFlag())
         mobile.setFlowTypes(json.getObj());
       else {
         mobile.setFlowTypes(new ArrayList());
       }
       relDatas.add(mobile);
     }
 
     if ((relDatas != null) && (relDatas.size() > 0)) {
       wrapper.setFlag(true);
       wrapper.setMsg("获取成功");
       wrapper.setDatas(relDatas);
     } else {
       wrapper.setFlag(true);
       wrapper.setMsg("没有数据");
     }
     return wrapper;
   }
 }

