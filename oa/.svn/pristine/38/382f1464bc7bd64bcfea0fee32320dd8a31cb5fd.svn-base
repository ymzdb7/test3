<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.notes.NotesMapper">
    <resultMap id="BaseResultMap" type="com.xoa.model.notes.Notes">

        <result column="NOTE_ID" property="noteId" javaType="int"/>
        <result column="UID" property="uid" javaType="int"/>
        <result column="CONTENT" property="content" javaType="string"/>
        <result column="COLOR" property="color" javaType="string"/>
        <result column="SHOW_FLAG" property="showFlag" javaType="string"/>
        <result column="CREATE_TIME" property="createTime" javaType="int"/>
        <result column="EDIT_TIME" property="editTime" javaType="int"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        NOTE_ID, UID, CONTENT, COLOR, SHOW_FLAG, CREATE_TIME,EDIT_TIME
    </sql>
    <insert id="insertNotes" parameterType="com.xoa.model.notes.Notes">
         insert into notes
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="noteId != null">
                NOTE_ID,
            </if>
            <if test="uid != null">
                UID,
            </if>
            <if test="content != null">
                CONTENT,
            </if>
            <if test="color != null">
                COLOR,
            </if>
            <if test="showFlag != null">
                SHOW_FLAG,
            </if>
            <if test="createTime != null">
                CREATE_TIME,
            </if>
            <if test="editTime != null">
                EDIT_TIME,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="noteId != null">
                #{noteId,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="color != null">
                #{color,jdbcType=TINYINT},
            </if>
            <if test="showFlag != null">
                #{showFlag,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=INTEGER},
            </if>
            <if test="editTime != null">
                #{editTime,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <insert id="insertNotes" parameterType="com.xoa.model.notes.Notes" databaseId="oracle">
        <selectKey keyProperty="noteId"  order="BEFORE" resultType="int">
            select NOTES_NOTE_ID_SEQ.nextval as noteId from  dual
        </selectKey>
        insert into notes
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="noteId != null">
                NOTE_ID,
            </if>
            <if test="uid != null">
                "UID",
            </if>
            <if test="content != null">
                "CONTENT",
            </if>
            <if test="color != null">
                COLOR,
            </if>
            <if test="showFlag != null">
                SHOW_FLAG,
            </if>
            <if test="createTime != null">
                CREATE_TIME,
            </if>
            <if test="editTime != null">
                EDIT_TIME,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="noteId != null">
                #{noteId,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="color != null">
                #{color,jdbcType=TINYINT},
            </if>
            <if test="showFlag != null">
                #{showFlag,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=INTEGER},
            </if>
            <if test="editTime != null">
                #{editTime,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <insert id="insertNotes" parameterType="com.xoa.model.notes.Notes" databaseId="dm">
        <selectKey keyProperty="noteId"  order="BEFORE" resultType="int">
            select NOTES_NOTE_ID_SEQ.nextval as noteId from  dual
        </selectKey>
        insert into notes
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="noteId != null">
                NOTE_ID,
            </if>
            <if test="uid != null">
                "UID",
            </if>
            <if test="content != null">
                "CONTENT",
            </if>
            <if test="color != null">
                COLOR,
            </if>
            <if test="showFlag != null">
                SHOW_FLAG,
            </if>
            <if test="createTime != null">
                CREATE_TIME,
            </if>
            <if test="editTime != null">
                EDIT_TIME,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="noteId != null">
                #{noteId,jdbcType=INTEGER},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="color != null">
                #{color,jdbcType=TINYINT},
            </if>
            <if test="showFlag != null">
                #{showFlag,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=INTEGER},
            </if>
            <if test="editTime != null">
                #{editTime,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <select id="selectNotes" resultMap="BaseResultMap" parameterType="int">
        SELECT * FROM notes WHERE UID = #{uid} ORDER BY EDIT_TIME DESC
    </select>

    <select id="selectNotes" resultMap="BaseResultMap" parameterType="int" databaseId="oracle">
        SELECT * FROM notes WHERE "UID" = #{uid} ORDER BY EDIT_TIME DESC
    </select>

    <select id="selectNotes" resultMap="BaseResultMap" parameterType="int" databaseId="dm">
           SELECT * FROM notes WHERE "UID" = #{uid} ORDER BY EDIT_TIME DESC
    </select>

    <select id="selectNotesPagination" resultMap="BaseResultMap" parameterType="int">
         SELECT * FROM notes WHERE UID = #{notes.uid} ORDER BY EDIT_TIME DESC
    </select>
    <select id="selectNewNote" resultMap="BaseResultMap" parameterType="int">
        select   *   from   notes  WHERE UID = #{uid} order   by   EDIT_TIME   desc   limit   1
    </select>

    <select id="selectNewNote" resultMap="BaseResultMap" parameterType="int" databaseId="oracle">
        select * from
        (
            SELECT
            *
            FROM
            notes
            WHERE
            "UID" = #{uid}
            ORDER BY
            EDIT_TIME DESC
        )
        where ROWNUM=1
    </select>

    <select id="selectNewNote" resultMap="BaseResultMap" parameterType="int" databaseId="dm">
        select * from
        (
            SELECT
            *
            FROM
            notes
            WHERE
            "UID" = #{uid}
            ORDER BY
            EDIT_TIME DESC
        )
        where ROWNUM=1
    </select>

    <select id="selectNotesByPrimaryKey" resultMap="BaseResultMap" parameterType="com.xoa.model.notes.Notes">
        SELECT * FROM notes
        WHERE NOTE_ID = #{noteId}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM notes WHERE NOTE_ID=#{noteId}
    </delete>
    <update id="updateByPrimaryKey" parameterType="com.xoa.model.notes.Notes">
        UPDATE notes
        <set>
            <if test="uid != null and uid!=''">
                UID=#{uid},
            </if>
             CONTENT=#{content},
            <if test="color != null and color!=''">
                COLOR=#{color},
            </if>
            <if test="showFlag != null and showFlag!=''">
                SHOW_FLAG=#{showFlag},
            </if>
            <if test="createTime != null and createTime!=''">
                CREATE_TIME=#{createTime},
            </if>
            <if test="editTime != null and editTime!=''">
                EDIT_TIME=#{editTime},
            </if>
           </set>
        WHERE NOTE_ID=#{noteId}
    </update>

</mapper>