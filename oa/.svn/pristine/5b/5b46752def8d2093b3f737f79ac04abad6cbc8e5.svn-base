/*     */ package com.xoa.plugin;
/*     */ 
/*     */ import com.alibaba.fastjson.JSONArray;
/*     */ import com.alibaba.fastjson.TypeReference;
/*     */ import com.alibaba.fastjson.parser.Feature;
/*     */ import com.xoa.dao.document.DocumentModelMapper;
/*     */ import com.xoa.dao.flowhook.FlowHookMapper;
/*     */ import com.xoa.dao.workflow.FlowProcessMapper;
/*     */ import com.xoa.dao.workflow.FlowRunPrcsMapper;
/*     */ import com.xoa.global.proxy.TriggerSubject;
/*     */ import com.xoa.model.attend.AttendLeave;
/*     */ import com.xoa.model.document.DocumentModel;
/*     */ import com.xoa.model.document.DocumentModelWithBLOBs;
/*     */ import com.xoa.model.workflow.FlowHookWithBLOBs;
/*     */ import com.xoa.model.workflow.FlowProcess;
/*     */ import com.xoa.model.workflow.FlowRunPrcs;
/*     */ import com.xoa.model.workflow.TriggerPlugIn;
/*     */ import com.xoa.util.common.L;
/*     */ import com.xoa.util.common.StringUtils;
/*     */ import com.xoa.util.dataSource.ContextHolder;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Map.Entry;
/*     */ import java.util.Set;
/*     */ import javax.annotation.Resource;
/*     */ import org.springframework.beans.factory.annotation.Autowired;
/*     */ import org.springframework.stereotype.Service;
/*     */ 
/*     */ @Service
/*     */ public class DocumentTrigger
/*     */   implements TriggerSubject
/*     */ {
/*     */ 
/*     */   @Resource
/*     */   private DocumentModelMapper documentModelMapper;
/*     */ 
/*     */   @Resource
/*     */   private FlowProcessMapper flowProcessMapper;
/*     */ 
/*     */   @Resource
/*     */   private FlowRunPrcsMapper flowRunPrcsMapper;
/*     */ 
/*     */   @Autowired
/*     */   private FlowHookMapper flowHookMapper;
/*     */ 
/*     */   public void doRun(String company, Object[] ags)
/*     */   {
/*  53 */     ContextHolder.setConsumerType(company);
/*  54 */     TriggerPlugIn tri = (TriggerPlugIn)ags[0];
/*  55 */     DocumentModelWithBLOBs documentModel = new DocumentModelWithBLOBs();
/*  56 */     documentModel.setId(Integer.valueOf(Integer.parseInt(tri.getTabId())));
/*  57 */     if ("1".equals(tri.getDistinguish())) {
/*  58 */       documentModel.setFlowId(Integer.valueOf(Integer.parseInt(tri.getFlowId())));
/*  59 */       documentModel.setFlowRunName(tri.getRunName());
/*  60 */       FlowProcess flowProcess = this.flowProcessMapper.findPrcessLine(Integer.valueOf(Integer.parseInt(tri.getFlowId())), Integer.valueOf(Integer.parseInt(tri.getPrcsId())));
/*     */ 
/*  62 */       if (flowProcess != null) {
/*  63 */         String prcs = flowProcess.getPrcsTo();
/*  64 */         if ((!"".equals(prcs)) && (prcs != null)) {
/*  65 */           prcs = prcs.substring(0, prcs.length() - 1);
/*  66 */           if ("0".equals(prcs)) {
/*  67 */             documentModel.setFlowStatus("1");
/*     */           }
/*     */           else {
/*  70 */             documentModel.setFlowStatus("0");
/*     */           }
/*     */         }
/*  73 */         documentModel.setFlowPrcs(tri.getFlowPrcs());
/*  74 */         Map maps = new HashMap();
/*  75 */         maps.put("prcsId", tri.getPrcsId());
/*  76 */         maps.put("runId", tri.getRunId());
/*     */ 
/*  78 */         List flowRunPrcs = this.flowRunPrcsMapper.selectfrp(maps);
/*  79 */         Iterator iterator = flowRunPrcs.iterator();
/*  80 */         StringBuffer stb = new StringBuffer();
/*     */ 
/*  82 */         while (iterator.hasNext()) {
/*  83 */           FlowRunPrcs flowRunPrcs1 = (FlowRunPrcs)iterator.next();
/*  84 */           if ("1".equals(flowRunPrcs1.getOpFlag())) {
/*  85 */             documentModel.setCurUserId(flowRunPrcs1.getUserId());
/*  86 */             DocumentModel documentModel1 = this.documentModelMapper.selectByPrimaryKey(Integer.valueOf(Integer.parseInt(tri.getTabId())));
/*  87 */             if (!StringUtils.checkNull(documentModel1.getAllUserId()).booleanValue()) {
/*  88 */               String[] str = documentModel1.getAllUserId().split(",");
/*  89 */               for (int i = 0; i < str.length; i++)
/*  90 */                 if (!str[i].equals(flowRunPrcs1.getUserId()))
/*  91 */                   documentModel.setAllUserId(documentModel1.getAllUserId() + flowRunPrcs1.getUserId() + ",");
/*     */             }
/*     */             else
/*     */             {
/*  95 */               documentModel.setAllUserId(flowRunPrcs1.getUserId() + ",");
/*     */             }
/*     */           }
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/* 102 */       FlowHookWithBLOBs flowHookNew = new FlowHookWithBLOBs();
/* 103 */       flowHookNew.setHid(tri.getHookId());
/* 104 */       FlowHookWithBLOBs flowHook = this.flowHookMapper.selectByhid(flowHookNew);
/* 105 */       Map<Object,Object> flowHookMaps = null;
/* 106 */       if (flowHook != null) {
/* 107 */         flowHookMaps = queryTriggerField(tri.getModify(), tri.getReject(), flowHook.getMap(), flowHook.getDataDirection());
/*     */       }
/*     */ 
/* 110 */       AttendLeave attendLeave = new AttendLeave();
/* 111 */       if (flowHookMaps != null) {
/* 112 */         for (Map.Entry entry : flowHookMaps.entrySet()) {
/* 113 */           if (entry.getKey().equals("key_word"))
/* 114 */             documentModel.setKeyWord(entry.getValue().toString());
/* 115 */           else if (entry.getKey().equals("unit"))
/* 116 */             documentModel.setUnit(entry.getValue().toString());
/* 117 */           else if (entry.getKey().equals("doc_no"))
/* 118 */             documentModel.setDocNo(entry.getValue().toString());
/* 119 */           else if (entry.getKey().equals("urgency"))
/* 120 */             documentModel.setUrgency(entry.getValue().toString());
/* 121 */           else if (entry.getKey().equals("secrecy"))
/* 122 */             documentModel.setSecrecy(entry.getValue().toString());
/* 123 */           else if (entry.getKey().equals("main_delivery"))
/* 124 */             documentModel.setMainDelivery(entry.getValue().toString());
/* 125 */           else if (entry.getKey().equals("copy_delivery"))
/* 126 */             documentModel.setCopyDelivery(entry.getValue().toString());
/* 127 */           else if (entry.getKey().equals("deadline"))
/* 128 */             documentModel.setDeadline(Integer.valueOf(entry.getValue().toString()));
/* 129 */           else if (entry.getKey().equals("copies"))
/* 130 */             documentModel.setCopies(Integer.valueOf(entry.getValue().toString()));
/* 131 */           else if (entry.getKey().equals("remark"))
/* 132 */             documentModel.setRemark(entry.getValue().toString());
/* 133 */           else if (entry.getKey().equals("creater"))
/* 134 */             documentModel.setCreater(entry.getValue().toString());
/* 135 */           else if (entry.getKey().equals("create_dept"))
/* 136 */             documentModel.setCreateDept(entry.getValue().toString());
/* 137 */           else if (entry.getKey().equals("print_dept"))
/* 138 */             documentModel.setPrintDept(entry.getValue().toString());
/* 139 */           else if (entry.getKey().equals("print_date")) {
/* 140 */             documentModel.setPrintDate(entry.getValue().toString());
/*     */           }
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 148 */     int a = this.documentModelMapper.updateByPrimaryKeySelective(documentModel);
/* 149 */     L.s(new Object[] { "0=||=======>documentTrigger!" });
/*     */   }
/*     */ 
/*     */   public Map<Object, Object> queryTriggerField(String modifydata, String fromdate, String maps, Integer num)
/*     */   {
/* 160 */     String[] a = maps.split(",");
/* 161 */     Map<Object,Object> map = new HashMap<Object,Object>();
/* 162 */     for (int i = 0; i < a.length; i++) {
/* 163 */       String i1 = a[i];
/* 164 */       String[] i2 = i1.split("=>");
/* 165 */       String i3 = i2[0];
/* 166 */       String i4 = i2[1];
/* 167 */       map.put(i3, i4);
/*     */     }
/*     */ 
/* 172 */     JSONArray json = new JSONArray();
/*     */ 
/* 174 */     Map<Object,Object> from = (Map)JSONArray.parseObject(fromdate, new TypeReference()
/*     */     {
/*     */     }
/* 182 */     , new Feature[0]);
/*     */ 
/* 178 */     List modify = (List)JSONArray.parseObject(modifydata, List.class);
/*     */ 
/* 180 */     Map analysis = new HashMap();
/* 181 */     Map returnMap = new HashMap();
/* 182 */     for (Iterator i$ = modify.iterator(); i$.hasNext(); ) { 
	            Map<Object,Object> mapmodify = (Map<Object,Object>)i$.next();
/* 183 */       for (Map.Entry entry1 : from.entrySet())
/* 184 */         if (mapmodify.get("key").equals(entry1.getValue()))
/* 185 */           analysis.put(entry1.getKey(), mapmodify.get("value"));
/*     */     }
/*     */     Map mapmodify;
/*     */     Iterator i$;
/*     */     Map.Entry entry;
/* 191 */     if ("1".equals(num)) {
/* 192 */       for (i$ = analysis.entrySet().iterator(); i$.hasNext(); ) { entry = (Map.Entry)i$.next();
/* 193 */         for (Map.Entry entry1 : map.entrySet()) {
/* 194 */           if (entry.getKey().equals(entry1.getValue())) {
/* 195 */             returnMap.put(entry1.getKey(), entry.getValue());
/*     */           }
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/*     */     }
/* 202 */     else if (!"2".equals(num));
/* 205 */     for (i$ = analysis.entrySet().iterator(); i$.hasNext(); ) { entry = (Map.Entry)i$.next();
/* 206 */       for (Map.Entry entry1 : map.entrySet())
/* 207 */         if (entry.getKey().equals(entry1.getKey()))
/* 208 */           returnMap.put(entry1.getValue(), entry.getValue());
/*     */     }
/* 219 */     return returnMap;
/*     */   }
/*     */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.plugin.DocumentTrigger
 * JD-Core Version:    0.6.0
 */