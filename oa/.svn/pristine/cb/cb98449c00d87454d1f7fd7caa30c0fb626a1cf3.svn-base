/*     */ package com.xoa.controller.document;
/*     */ 
/*     */ import com.xoa.model.document.DocumentModel;
/*     */ import com.xoa.model.document.DocumentModelWithBLOBs;
/*     */ import com.xoa.model.document.SysRuleModel;
/*     */ import com.xoa.model.users.Users;
/*     */ import com.xoa.service.document.DocumentSerivce;
/*     */ import com.xoa.service.work.WorkService;
import com.xoa.util.Constant;
/*     */ import com.xoa.util.ToJson;
/*     */ import com.xoa.util.common.session.SessionUtils;
/*     */ import com.xoa.util.common.wrapper.BaseWrapper;
/*     */ import com.xoa.util.common.wrapper.BaseWrappers;
/*     */ import com.xoa.util.dataSource.ContextHolder;
/*     */ import com.xoa.util.page.PageParams;
/*     */ import java.util.List;
/*     */ import javax.annotation.Resource;
/*     */ import javax.servlet.http.HttpServletRequest;
/*     */ import javax.servlet.http.HttpSession;
/*     */ import org.springframework.stereotype.Controller;
/*     */ import org.springframework.web.bind.annotation.RequestMapping;
/*     */ import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
/*     */ 
/*     */ @Controller
/*     */ @RequestMapping({"/document"})
/*     */ public class DocumentController
/*     */ {
/*     */ 
/*     */   @Resource
/*     */   DocumentSerivce documentSerivce;
/*     */ 
/*     */   @Resource
/*     */   WorkService workService;
/*     */ 
/*     */   @RequestMapping({"/mine"})
/*     */   public String index(HttpServletRequest request)
/*     */   {
/*  51 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/*  53 */     return "app/document/mine";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/newDocument"})
/*     */   public String newDocument() {
/*  59 */     return "app/document/newDocument";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/pageTesting"})
/*     */   public String pageTesting() {
/*  65 */     return "app/officialDocument/pageTesting";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/makeADraft"})
/*     */   public String makeADraft() {
/*  71 */     return "app/officialDocument/dispatch/makeADraft";
/*     */   }
/*     */   @RequestMapping({"/draftArticlesOfCommunication"})
/*     */   public String draftArticlesOfCommunication() {
/*  76 */     return "app/officialDocument/dispatch/draftArticlesOfCommunication";
/*     */   }
/*     */   @RequestMapping({"/IthasBeenDone"})
/*     */   public String IthasBeenDone() {
/*  81 */     return "app/officialDocument/dispatch/IthasBeenDone";
/*     */   }
/*     */   @RequestMapping({"/ISentAMessage"})
/*     */   public String ISentAMessage() {
/*  86 */     return "app/officialDocument/dispatch/ISentAMessage";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/addresseeRegistrationForm"})
/*     */   public String addresseeRegistrationForm() {
/*  92 */     return "app/officialDocument/incomingDispatches/addresseeRegistrationForm";
/*     */   }
/*     */   @RequestMapping({"/inAbeyance"})
/*     */   public String inAbeyance() {
/*  97 */     return "app/officialDocument/incomingDispatches/inAbeyance";
/*     */   }
/*     */   @RequestMapping({"/myInReply"})
/*     */   public String myInReply() {
/* 102 */     return "app/officialDocument/incomingDispatches/myInReply";
/*     */   }
/*     */   @RequestMapping({"/received"})
/*     */   public String received() {
/* 107 */     return "app/officialDocument/incomingDispatches/received";
/*     */   }
/*     */   @RequestMapping({"/theOfficialDocumentQuery"})
/*     */   public String theOfficialDocumentQuery() {
/* 112 */     return "app/officialDocument/theOfficialDocumentQuery";
/*     */   }
/*     */   @RequestMapping({"/documentsSupervisor"})
/*     */   public String documentsSupervisor() {
/* 117 */     return "app/officialDocument/documentsSupervisor";
/*     */   }
/*     */   @RequestMapping({"/officialDocumentSet"})
/*     */   public String officialDocumentSet() {
/* 122 */     return "app/officialDocument/officialDocumentSet";
/*     */   }
/*     */   @RequestMapping({"/theOfficialStatistics"})
/*     */   public String theOfficialStatistics() {
/* 127 */     return "app/officialDocument/theOfficialStatistics";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/saveRule"})
/*     */   @ResponseBody
/*     */   public ToJson<SysRuleModel> saveSysrule(SysRuleModel sysRule, HttpServletRequest request)
/*     */   {
/* 143 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 145 */     ToJson tojson = new ToJson();
/* 146 */     if (sysRule != null) {
/* 147 */       if ((sysRule.getDigit() == null) || ("".equals(sysRule.getDigit()))) {
/* 148 */         tojson.setMsg("保存失败，位数没有填写");
/* 149 */         tojson.setFlag(1);
/* 150 */         return tojson;
/*     */       }
/* 152 */       if ((sysRule.getCode() == null) || ("".equals(sysRule.getCode()))) {
/* 153 */         tojson.setMsg("保存失败，唯一标识没有填写");
/* 154 */         tojson.setFlag(1);
/* 155 */         return tojson;
/*     */       }
/*     */     }
/* 158 */     SysRuleModel ruleByCode = this.documentSerivce.getRuleByCode(sysRule);
/* 159 */     if ((ruleByCode != null) && (ruleByCode.getCode() != null)) {
/* 160 */       tojson.setMsg("保存失败，存在相同为唯一标识");
/* 161 */       tojson.setFlag(1);
/*     */     } else {
/* 163 */       int result = this.documentSerivce.saveSysRule(sysRule);
/* 164 */       if (result == 1) {
/* 165 */         tojson.setMsg("保存成功");
/* 166 */         tojson.setFlag(0);
/*     */       } else {
/* 168 */         tojson.setMsg("保存失败");
/* 169 */         tojson.setFlag(1);
/*     */       }
/*     */     }
/*     */ 
/* 173 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/deleteRule"})
/*     */   @ResponseBody
/*     */   public ToJson<SysRuleModel> deleteRule(SysRuleModel sysRule, HttpServletRequest request)
/*     */   {
/* 189 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 191 */     ToJson tojson = new ToJson();
/* 192 */     int result = this.documentSerivce.deleteSysRule(sysRule);
/* 193 */     if (result == 1) {
/* 194 */       tojson.setMsg("删除成功");
/* 195 */       tojson.setFlag(0);
/*     */     } else {
/* 197 */       tojson.setMsg("删除失败");
/* 198 */       tojson.setFlag(1);
/*     */     }
/* 200 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/updateRule"})
/*     */   @ResponseBody
/*     */   public ToJson<SysRuleModel> updateRule(SysRuleModel sysRule, HttpServletRequest request)
/*     */   {
/* 216 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 218 */     ToJson tojson = new ToJson();
/* 219 */     SysRuleModel ruleByCode = this.documentSerivce.getRuleByCode(sysRule);
/* 220 */     if ((ruleByCode != null) && (!ruleByCode.getId().equals(sysRule.getId()))) {
/* 221 */       tojson.setMsg("修改失败，存在相同为唯一标识");
/* 222 */       tojson.setFlag(1);
/*     */     } else {
/* 224 */       int result = this.documentSerivce.updateRuleById(sysRule);
/* 225 */       if (result == 1) {
/* 226 */         tojson.setMsg("修改成功");
/* 227 */         tojson.setFlag(0);
/*     */       } else {
/* 229 */         tojson.setMsg("修改失败");
/* 230 */         tojson.setFlag(1);
/*     */       }
/*     */     }
/* 233 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/getRuleById"})
/*     */   @ResponseBody
/*     */   public ToJson<SysRuleModel> getRuleById(SysRuleModel sysRule, HttpServletRequest request)
/*     */   {
/* 249 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 251 */     ToJson tojson = new ToJson();
/* 252 */     SysRuleModel result = this.documentSerivce.getRuleById(sysRule, request);
/* 253 */     if (result != null) {
/* 254 */       tojson.setObject(result);
/* 255 */       tojson.setMsg("ok");
/* 256 */       tojson.setFlag(0);
/*     */     }
/* 258 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/getRuleAll"})
/*     */   @ResponseBody
/*     */   public ToJson<SysRuleModel> getRuleAll(SysRuleModel sysRule, HttpServletRequest request)
/*     */   {
/* 274 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 276 */     ToJson tojson = new ToJson();
/* 277 */     List result = this.documentSerivce.getRuleAll(sysRule);
/*     */ 
/* 279 */     if (result != null) {
/* 280 */       tojson.setFlag(0);
/* 281 */       tojson.setMsg("ok");
/* 282 */       tojson.setObj(result);
/*     */     } else {
/* 284 */       tojson.setFlag(1);
/* 285 */       tojson.setMsg("null");
/* 286 */       tojson.setObj(result);
/*     */     }
/*     */ 
/* 289 */     return tojson;
/*     */   }
/*     */ 
/*     */   @ResponseBody
/*     */   @RequestMapping({"/updateCount"})
/*     */   public ToJson<SysRuleModel> addCount(HttpServletRequest request, SysRuleModel sysRuleModel)
/*     */   {
/* 301 */     ToJson json = new ToJson();
/*     */     try {
/* 303 */       SysRuleModel ruleById = this.documentSerivce.getRuleById(sysRuleModel, request);
/* 304 */       Integer newCounter = Integer.valueOf(ruleById.getCounter().intValue() + 1);
/* 305 */       ruleById.setCounter(newCounter);
/* 306 */       this.documentSerivce.updateRuleById(ruleById);
/* 307 */       json.setObject(ruleById);
/* 308 */       json.setFlag(0);
/* 309 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/* 311 */       e.printStackTrace();
/* 312 */       json.setFlag(1);
/* 313 */       json.setMsg("err");
/*     */     }
/* 315 */     return json;
/*     */   }
/*     */ 
/*     */   @ResponseBody
/*     */   @RequestMapping({"/codeIfUse"})
/*     */   public ToJson<SysRuleModel> codeIfUse(SysRuleModel sysRuleModel)
/*     */   {
/* 326 */     ToJson json = new ToJson();
/*     */     try {
/* 328 */       SysRuleModel ruleByCode = this.documentSerivce.getRuleByCode(sysRuleModel);
/* 329 */       if (ruleByCode != null) {
/* 330 */         json.setFlag(1);
/* 331 */         json.setMsg("已被使用");
/*     */       } else {
/* 333 */         json.setFlag(0);
/* 334 */         json.setMsg("未被使用");
/*     */       }
/*     */     } catch (Exception e) {
/* 337 */       e.printStackTrace();
/*     */     }
/* 339 */     return json;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/saveDoc"})
/*     */   @ResponseBody
/*     */   public ToJson<Object> saveDocument(Integer fflowId, @RequestParam(value="fflowStep", required=false) Integer fflowStep, @RequestParam(value="fprcsId", required=false) String fprcsId, @RequestParam(value="frunName", required=false) String frunName, DocumentModelWithBLOBs document, HttpServletRequest request)
/*     */   {
/* 360 */     Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 361 */     String userId = (String)request.getSession().getAttribute("userId");
/* 362 */     Integer deptId = (Integer)request.getSession().getAttribute("deptId");
/* 363 */     document.setCurUserId(userId);
/* 364 */     document.setCreater(userId);
/* 365 */     document.setCreateDept(String.valueOf(deptId));
/* 366 */     ToJson result = this.documentSerivce.saveDocument(user, fflowId, fflowStep, fprcsId, frunName, document, request);
/* 367 */     return result;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/deleteDoc"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> deleteDocument(DocumentModelWithBLOBs document, HttpServletRequest request)
/*     */   {
/* 383 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 385 */     ToJson tojson = new ToJson();
/* 386 */     int result = this.documentSerivce.deleteDocument(document);
/* 387 */     if (result == 1) {
/* 388 */       tojson.setMsg("删除成功");
/* 389 */       tojson.setFlag(0);
/*     */     } else {
/* 391 */       tojson.setMsg("删除失败");
/* 392 */       tojson.setFlag(1);
/*     */     }
/* 394 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/updateDoc"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> updateDocument(DocumentModelWithBLOBs document, HttpServletRequest request)
/*     */   {
/* 410 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*     */ 
/* 412 */     ToJson tojson = new ToJson();
/* 413 */     int result = this.documentSerivce.updateDocument(document);
/* 414 */     if (result == 1) {
/* 415 */       tojson.setMsg("修改成功");
/* 416 */       tojson.setFlag(0);
/*     */     } else {
/* 418 */       tojson.setMsg("修改失败");
/* 419 */       tojson.setFlag(1);
/*     */     }
/* 421 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selectDocById"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> selectDocumentById(DocumentModelWithBLOBs document, HttpServletRequest request)
/*     */   {
/* 437 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/* 438 */     ToJson tojson = new ToJson();
/*     */     try {
/* 440 */       DocumentModelWithBLOBs resultDocument = this.documentSerivce.selectDocumentById(request, document);
/* 441 */       tojson.setObject(resultDocument);
/* 442 */       tojson.setFlag(0);
/* 443 */       tojson.setMsg("ok");
/*     */     } catch (Exception e) {
/* 445 */       e.printStackTrace();
/* 446 */       tojson.setFlag(1);
/* 447 */       tojson.setMsg("err");
/*     */     }
/* 449 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selectDocSelective"})
/*     */   @ResponseBody
/*     */   public BaseWrappers selectDocSelective(Integer documentType, String title, Integer flowId, String dispatchType, String urgency, String secrecy, String userId, String deptId, String createTime, Integer status, PageParams pageParams, HttpServletRequest request)
/*     */   {
/* 476 */     return this.documentSerivce.selectDocSelective(documentType, title, flowId, dispatchType, urgency, secrecy, userId, deptId, createTime, status, pageParams, request);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selectDocAll"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> selectDocAll(DocumentModelWithBLOBs document, HttpServletRequest request)
/*     */   {
/* 492 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/* 493 */     ToJson tojson = new ToJson();
/* 494 */     List resultDocument = this.documentSerivce.selectDocAll(document);
/* 495 */     tojson.setObj(resultDocument);
/* 496 */     tojson.setFlag(0);
/* 497 */     return tojson;
/*     */   }
/* 503 */   @RequestMapping({"/selectBacklogDoc"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> selectBacklogDoc(HttpServletRequest request) { ToJson tojson = new ToJson();
/* 504 */     tojson.setFlag(0);
/* 505 */     return tojson; } 
/*     */   @RequestMapping({"/selectBacklogingDoc"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> selectBacklogingDoc(HttpServletRequest request) {
/* 511 */     ToJson tojson = new ToJson();
/* 512 */     tojson.setFlag(0);
/* 513 */     return tojson;
/*     */   }
/* 519 */   @RequestMapping({"/selectBacklogedDoc"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> selectBacklogedDoc(HttpServletRequest request) { ToJson tojson = new ToJson();
/* 520 */     tojson.setFlag(0);
/* 521 */     return tojson;
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/seleDocSendReceive"})
/*     */   @ResponseBody
/*     */   public ToJson<DocumentModelWithBLOBs> seleDocSendReceive(String documentType, String curUserID, String allUserID, String dispatchType, String printDate, HttpServletRequest request, @RequestParam("page") Integer page, @RequestParam("pageSize") Integer pageSize, @RequestParam("useFlag") Boolean useFlag)
/*     */   {
/* 530 */     return this.documentSerivce.seleDocSendReceive(documentType, curUserID, allUserID, dispatchType, printDate, request, page, pageSize, useFlag);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selMyDocSendOrReceive"})
/*     */   @ResponseBody
/*     */   public BaseWrappers selMyDocSendOrReceive(HttpServletRequest request, String documentType, String dispatchType, String printDate, String title, Integer docStatus, @RequestParam(name="page", required=false, defaultValue="0") Integer page, @RequestParam(name="pageSize", required=false, defaultValue="10") Integer pageSize)
/*     */   {
/* 543 */     return this.documentSerivce.selMyDocSendOrReceive(request, documentType, dispatchType, printDate, title, docStatus, page, pageSize);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/getRunName"})
/*     */   @ResponseBody
/*     */   public BaseWrapper getRunName(HttpServletRequest request, Integer flowId, @RequestParam(value="flowStep", required=false) Integer prcsId, @RequestParam(value="prcsId", required=false) String flowProcs)
/*     */   {
/* 553 */     Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 554 */     return this.workService.getRunName(user, flowId, prcsId, flowProcs);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selWillDocSendOrReceive"})
/*     */   @ResponseBody
/*     */   public BaseWrappers selWillDocSendOrReceive(HttpServletRequest request, String documentType, String dispatchType, String printDate, String title, Integer docStatus, @RequestParam(name="page", required=false, defaultValue="0") Integer page, @RequestParam(name="pageSize", required=false, defaultValue="10") Integer pageSize)
/*     */   {
/* 576 */     return this.documentSerivce.selWillDocSendOrReceive(request, documentType, dispatchType, printDate, title, docStatus, page, pageSize, DocumentSerivce.PRCS_FLAG_WILL);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selOverDocSendOrReceive"})
/*     */   @ResponseBody
/*     */   public BaseWrappers selOverDocSendOrReceive(HttpServletRequest request, String documentType, String dispatchType, String printDate, String title, Integer docStatus, @RequestParam(name="page", required=false, defaultValue="0") Integer page, @RequestParam(name="pageSize", required=false, defaultValue="10") Integer pageSize)
/*     */   {
/* 597 */     return this.documentSerivce.selWillDocSendOrReceive(request, documentType, dispatchType, printDate, title, docStatus, page, pageSize, DocumentSerivce.PRCS_FLAG_OVER);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selOverDocSendOrReceiveOnly"})
/*     */   @ResponseBody
/*     */   public BaseWrappers selOverDocSendOrReceiveNew(HttpServletRequest request, String documentType, String dispatchType, String printDate, String title, Integer docStatus, @RequestParam(name="page", required=false, defaultValue="0") Integer page, @RequestParam(name="pageSize", required=false, defaultValue="10") Integer pageSize)
/*     */   {
/* 607 */     return this.documentSerivce.selOverDocSendOrReceive(request, documentType, dispatchType, printDate, title, docStatus, page, pageSize, DocumentSerivce.PRCS_FLAG_OVER);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/selOverseeTheOfficialDocument"})
/*     */   @ResponseBody
/*     */   public BaseWrappers selOverseeTheOfficialDocument(HttpServletRequest request, String documentType, String dispatchType, String computationNumber, @RequestParam(name="page", required=false, defaultValue="1") Integer page, @RequestParam(name="pageSize", required=false, defaultValue="10") Integer pageSize, @RequestParam(name="useFlag", required=false, defaultValue="true") Boolean useFlag)
/*     */   {
/* 618 */     return this.documentSerivce.selOverseeTheOfficialDocument(request, documentType, dispatchType, computationNumber, page, pageSize, useFlag);
/*     */   }
/* 624 */   @RequestMapping({"/addDocSendSms"})
/*     */   @ResponseBody
/*     */   public BaseWrappers addDocSendSms(HttpServletRequest req, String cuName, String allName, String title, String classify, String flowId, String prcsId, String flowStep, String runId) { return this.documentSerivce.addDocSendSms(req, cuName, allName, title, classify, flowId, prcsId, flowStep, runId); } 
/*     */   @ResponseBody
/*     */   @RequestMapping({"/getDocumentEditPriv"})
/*     */   public ToJson<DocumentModel> getDocumentEditPriv(Integer id) {
/* 630 */     return this.documentSerivce.getDocumentEditPriv(id);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/SealIndex"})
/*     */   public String SealIndex()
/*     */   {
/* 642 */     return "app/document/SealIndex";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/SealNew"})
/*     */   public String newSeal()
/*     */   {
/* 654 */     return "app/document/index";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/SealSetting"})
/*     */   public String SealSetting()
/*     */   {
/* 666 */     return "app/document/Sealsetting";
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/SealLog"})
/*     */   public String SealLog()
/*     */   {
/* 678 */     return "app/document/SealLog";
/*     */   }
/* 684 */   @ResponseBody
/*     */   @RequestMapping({"/selectTimeOutDoc"})
/*     */   public BaseWrappers selectTimeOutDoc(HttpServletRequest request) { return this.documentSerivce.selectTimeOutDoc(request);
/*     */   }
/*     */ 
/*     */   @RequestMapping({"/sealManagerIndex"})
/*     */   public String sealManagerIndex()
/*     */   {
/* 697 */     return "app/document/sealManager";
/*     */   }
/*     */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.controller.document.DocumentController
 * JD-Core Version:    0.6.0
 */