<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.edu.eduTeacher.EduTeacherMapper" >
  <resultMap id="BaseResultMap" type="com.xoa.model.edu.eduTeacher.EduTeacher" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="GRADE" property="grade" jdbcType="VARCHAR" />
    <result column="CLASS" property="clazz" jdbcType="VARCHAR" />
    <result column="SCHOOL_YEAR" property="schoolYear" jdbcType="VARCHAR" />
    <result column="TERM" property="term" jdbcType="VARCHAR" />
    <result column="COURSE" property="course" jdbcType="VARCHAR" />
    <result column="USER_ID" property="userId" jdbcType="VARCHAR" />
    <result column="TEACHER_TYPE" property="teacherType" jdbcType="VARCHAR" />
    <result column="USER_NAME" property="userName" jdbcType="VARCHAR" />
    <result column="CLASS_ID" property="classId" jdbcType="VARCHAR" />
    <result column="SEMETER" property="semeter" jdbcType="VARCHAR" />
    <result column="FLAG" property="flag" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.xoa.model.edu.eduTeacher.EduTeacherWithBLOBs" extends="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="ATTACHMENT_ID" property="attachmentId" jdbcType="LONGVARCHAR" />
    <result column="ATTACHMENT_NAME" property="attachmentName" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, GRADE, CLASS, SCHOOL_YEAR, TERM, COURSE, USER_ID, TEACHER_TYPE, USER_NAME, CLASS_ID, 
    SEMETER, FLAG
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ATTACHMENT_ID, ATTACHMENT_NAME
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from edu_teacher
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from edu_teacher
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from edu_teacher
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from edu_teacher
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from edu_teacher
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into edu_teacher (id, GRADE, CLASS, 
      SCHOOL_YEAR, TERM, COURSE, 
      USER_ID, TEACHER_TYPE, USER_NAME, 
      CLASS_ID, SEMETER, FLAG, 
      ATTACHMENT_ID, ATTACHMENT_NAME)
    values (#{id,jdbcType=INTEGER}, #{grade,jdbcType=VARCHAR}, #{clazz,jdbcType=VARCHAR},
      #{schoolYear,jdbcType=VARCHAR}, #{term,jdbcType=VARCHAR}, #{course,jdbcType=VARCHAR}, 
      #{userId,jdbcType=VARCHAR}, #{teacherType,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{classId,jdbcType=VARCHAR}, #{semeter,jdbcType=VARCHAR}, #{flag,jdbcType=INTEGER}, 
      #{attachmentId,jdbcType=LONGVARCHAR}, #{attachmentName,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into edu_teacher
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="grade != null" >
        GRADE,
      </if>
      <if test="clazz != null" >
        CLASS,
      </if>
      <if test="schoolYear != null" >
        SCHOOL_YEAR,
      </if>
      <if test="term != null" >
        TERM,
      </if>
      <if test="course != null" >
        COURSE,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="teacherType != null" >
        TEACHER_TYPE,
      </if>
      <if test="userName != null" >
        USER_NAME,
      </if>
      <if test="classId != null" >
        CLASS_ID,
      </if>
      <if test="semeter != null" >
        SEMETER,
      </if>
      <if test="flag != null" >
        FLAG,
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID,
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="grade != null" >
        #{grade,jdbcType=VARCHAR},
      </if>
      <if test="clazz != null" >
        #{clazz,jdbcType=VARCHAR},
      </if>
      <if test="schoolYear != null" >
        #{schoolYear,jdbcType=VARCHAR},
      </if>
      <if test="term != null" >
        #{term,jdbcType=VARCHAR},
      </if>
      <if test="course != null" >
        #{course,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="teacherType != null" >
        #{teacherType,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=VARCHAR},
      </if>
      <if test="semeter != null" >
        #{semeter,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="attachmentId != null" >
        #{attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentName != null" >
        #{attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from edu_teacher
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update edu_teacher
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.grade != null" >
        GRADE = #{record.grade,jdbcType=VARCHAR},
      </if>
      <if test="record.clazz != null" >
        CLASS = #{record.clazz,jdbcType=VARCHAR},
      </if>
      <if test="record.schoolYear != null" >
        SCHOOL_YEAR = #{record.schoolYear,jdbcType=VARCHAR},
      </if>
      <if test="record.term != null" >
        TERM = #{record.term,jdbcType=VARCHAR},
      </if>
      <if test="record.course != null" >
        COURSE = #{record.course,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        USER_ID = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.teacherType != null" >
        TEACHER_TYPE = #{record.teacherType,jdbcType=VARCHAR},
      </if>
      <if test="record.userName != null" >
        USER_NAME = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.classId != null" >
        CLASS_ID = #{record.classId,jdbcType=VARCHAR},
      </if>
      <if test="record.semeter != null" >
        SEMETER = #{record.semeter,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null" >
        FLAG = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.attachmentId != null" >
        ATTACHMENT_ID = #{record.attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.attachmentName != null" >
        ATTACHMENT_NAME = #{record.attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update edu_teacher
    set id = #{record.id,jdbcType=INTEGER},
      GRADE = #{record.grade,jdbcType=VARCHAR},
      CLASS = #{record.clazz,jdbcType=VARCHAR},
      SCHOOL_YEAR = #{record.schoolYear,jdbcType=VARCHAR},
      TERM = #{record.term,jdbcType=VARCHAR},
      COURSE = #{record.course,jdbcType=VARCHAR},
      USER_ID = #{record.userId,jdbcType=VARCHAR},
      TEACHER_TYPE = #{record.teacherType,jdbcType=VARCHAR},
      USER_NAME = #{record.userName,jdbcType=VARCHAR},
      CLASS_ID = #{record.classId,jdbcType=VARCHAR},
      SEMETER = #{record.semeter,jdbcType=VARCHAR},
      FLAG = #{record.flag,jdbcType=INTEGER},
      ATTACHMENT_ID = #{record.attachmentId,jdbcType=LONGVARCHAR},
      ATTACHMENT_NAME = #{record.attachmentName,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update edu_teacher
    set id = #{record.id,jdbcType=INTEGER},
      GRADE = #{record.grade,jdbcType=VARCHAR},
      CLASS = #{record.clazz,jdbcType=VARCHAR},
      SCHOOL_YEAR = #{record.schoolYear,jdbcType=VARCHAR},
      TERM = #{record.term,jdbcType=VARCHAR},
      COURSE = #{record.course,jdbcType=VARCHAR},
      USER_ID = #{record.userId,jdbcType=VARCHAR},
      TEACHER_TYPE = #{record.teacherType,jdbcType=VARCHAR},
      USER_NAME = #{record.userName,jdbcType=VARCHAR},
      CLASS_ID = #{record.classId,jdbcType=VARCHAR},
      SEMETER = #{record.semeter,jdbcType=VARCHAR},
      FLAG = #{record.flag,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update edu_teacher
    <set >
      <if test="grade != null" >
        GRADE = #{grade,jdbcType=VARCHAR},
      </if>
      <if test="clazz != null" >
        CLASS = #{clazz,jdbcType=VARCHAR},
      </if>
      <if test="schoolYear != null" >
        SCHOOL_YEAR = #{schoolYear,jdbcType=VARCHAR},
      </if>
      <if test="term != null" >
        TERM = #{term,jdbcType=VARCHAR},
      </if>
      <if test="course != null" >
        COURSE = #{course,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="teacherType != null" >
        TEACHER_TYPE = #{teacherType,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        USER_NAME = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        CLASS_ID = #{classId,jdbcType=VARCHAR},
      </if>
      <if test="semeter != null" >
        SEMETER = #{semeter,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        FLAG = #{flag,jdbcType=INTEGER},
      </if>
      <if test="attachmentId != null" >
        ATTACHMENT_ID = #{attachmentId,jdbcType=LONGVARCHAR},
      </if>
      <if test="attachmentName != null" >
        ATTACHMENT_NAME = #{attachmentName,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xoa.model.edu.eduTeacher.EduTeacherWithBLOBs" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update edu_teacher
    set GRADE = #{grade,jdbcType=VARCHAR},
      CLASS = #{clazz,jdbcType=VARCHAR},
      SCHOOL_YEAR = #{schoolYear,jdbcType=VARCHAR},
      TERM = #{term,jdbcType=VARCHAR},
      COURSE = #{course,jdbcType=VARCHAR},
      USER_ID = #{userId,jdbcType=VARCHAR},
      TEACHER_TYPE = #{teacherType,jdbcType=VARCHAR},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      CLASS_ID = #{classId,jdbcType=VARCHAR},
      SEMETER = #{semeter,jdbcType=VARCHAR},
      FLAG = #{flag,jdbcType=INTEGER},
      ATTACHMENT_ID = #{attachmentId,jdbcType=LONGVARCHAR},
      ATTACHMENT_NAME = #{attachmentName,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xoa.model.edu.eduTeacher.EduTeacher" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update edu_teacher
    set GRADE = #{grade,jdbcType=VARCHAR},
      CLASS = #{clazz,jdbcType=VARCHAR},
      SCHOOL_YEAR = #{schoolYear,jdbcType=VARCHAR},
      TERM = #{term,jdbcType=VARCHAR},
      COURSE = #{course,jdbcType=VARCHAR},
      USER_ID = #{userId,jdbcType=VARCHAR},
      TEACHER_TYPE = #{teacherType,jdbcType=VARCHAR},
      USER_NAME = #{userName,jdbcType=VARCHAR},
      CLASS_ID = #{classId,jdbcType=VARCHAR},
      SEMETER = #{semeter,jdbcType=VARCHAR},
      FLAG = #{flag,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getTeacherInfo" resultMap="BaseResultMap" >
      SELECT * from edu_teacher
      <where>
        <if test="grade!=null and grade!='' ">
          AND grade = #{grade}
        </if>
        <if test="clazz!=null and clazz!='' ">
            AND Class = #{clazz}
        </if>
        <if test="schoolYear!=null and schoolYear!='' ">
            AND SCHOOL_YEAR = #{schoolYear}
        </if>
        <if test="term!=null and term!='' ">
            AND term = #{term}
        </if>
        <if test="teacherType!=null and teacherType!='' ">
            AND TEACHER_TYPE = #{teacherType}
        </if>
        <if test="course!=null and course!='' ">
            AND course = #{course}
        </if>
      </where>
  </select>

  <select id="queryTeacher" parameterType="map" resultMap="BaseResultMap" >
    SELECT * from edu_teacher
    <where>
      <if test="userId!=null and userId!='' ">
        AND user_id  #{userId}
      </if>
      <if test="grade!=null and grade!='' ">
        AND grade = #{grade}
      </if>
      <if test="clazz!=null and clazz!='' ">
        AND Class = #{clazz}
      </if>
      <if test="schoolYear!=null and schoolYear!='' ">
        AND SCHOOL_YEAR = #{schoolYear}
      </if>
      <if test="term!=null and term!='' ">
        AND term = #{term}
      </if>
      <if test="teacherType!=null and teacherType!='' ">
        AND TEACHER_TYPE = #{teacherType}
      </if>
      <if test="course!=null and course!='' ">
        AND course = #{course}
      </if>
    </where>
  </select>

  <select id="queryTeacherCount" parameterType="map" resultType="Integer" >
    SELECT count(*) from edu_teacher
    <where>
      <if test="userId!=null and userId!='' ">
        AND user_id  #{userId}
      </if>
      <if test="grade!=null and grade!='' ">
        AND grade = #{grade}
      </if>
      <if test="clazz!=null and clazz!='' ">
        AND Class = #{clazz}
      </if>
      <if test="schoolYear!=null and schoolYear!='' ">
        AND SCHOOL_YEAR = #{schoolYear}
      </if>
      <if test="term!=null and term!='' ">
        AND term = #{term}
      </if>
      <if test="teacherType!=null and teacherType!='' ">
        AND TEACHER_TYPE = #{teacherType}
      </if>
      <if test="course!=null and course!='' ">
        AND course = #{course}
      </if>
    </where>
  </select>

  <select id="getSingleTeacher" resultMap="BaseResultMap" >
    SELECT * from edu_teacher
    <where>
      <if test="grade!=null and grade!='' ">
        AND grade = #{grade}
      </if>
      <if test="clazz!=null and clazz!='' ">
        AND Class = #{clazz}
      </if>
      <if test="schoolYear!=null and schoolYear!='' ">
        AND SCHOOL_YEAR = #{schoolYear}
      </if>
      <if test="term!=null and term!='' ">
        AND term = #{term}
      </if>
      <if test="course!=null and course!='' ">
        AND course = #{course}
      </if>
      <if test="teacherType!=null and teacherType!='' ">
        AND TEACHER_TYPE = #{teacherType}
      </if>
    </where>
  </select>

  <update id="updateByParameter" >
      UPDATE edu_teacher SET user_id = #{userId} , user_name = #{userName}
      <where>
        <if test="grade!=null and grade!='' ">
          AND grade = #{grade}
        </if>
        <if test="clazz!=null and clazz!='' ">
          AND Class = #{clazz}
        </if>
        <if test="schoolYear!=null and schoolYear!='' ">
          AND SCHOOL_YEAR = #{schoolYear}
        </if>
        <if test="term!=null and term!='' ">
          AND term = #{term}
        </if>
        <if test="course!=null and course!='' ">
          AND course = #{course}
        </if>
        <if test="teacherType!=null and teacherType!='' ">
          AND TEACHER_TYPE = #{teacherType}
        </if>
      </where>
  </update>
	<!--根据User_id 和User_name  查询出对应老师管理的班级-->
  <select id="UsersTeacherIdselect" resultType="java.util.HashMap" parameterType="com.xoa.model.edu.eduTeacher.EduTeacher">
    SELECT  CONCAT(GRADE,CLASS)  AS 'graseClass'  from  edu_teacher  WHERE   1=1
    <if test="userId!=null">
      and USER_ID=#{userId}
    </if>
    <if test="userName!=null">
      and USER_NAME=#{userName}
    </if>
    GROUP BY  CONCAT(GRADE,CLASS)
  </select>

  <!--根据grade 和class  查询出对应老师信息-->
  <select id="getTeacherBygc" resultMap="BaseResultMap" parameterType="string">
    SELECT  *  from  edu_teacher  WHERE   GRADE=#{grade} and CLASS=#{clazz}
  </select>

  <!--查询考试科目-->
  <select id="getKeMu" resultType="java.lang.String">
    select COURSE_NAME as 'SUBJECT' from edu_course GROUP BY COURSE_NAME
  </select>
</mapper>