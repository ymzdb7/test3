/*     */ package com.xoa.service.attend;
/*     */ 
/*     */ import com.xoa.dao.attend.AttendEvectionMapper;
/*     */ import com.xoa.dao.common.SysCodeMapper;
/*     */ import com.xoa.dao.department.DepartmentMapper;
/*     */ import com.xoa.dao.users.UsersMapper;
/*     */ import com.xoa.dao.workflow.FlowRunMapper;
/*     */ import com.xoa.dao.workflow.FlowRunPrcsMapper;
/*     */ import com.xoa.model.attend.AttendEvection;
/*     */ import com.xoa.model.attend.AttendEvectionFlowRunPrcs;
/*     */ import com.xoa.model.common.SysCode;
/*     */ import com.xoa.model.users.Users;
/*     */ import com.xoa.model.workflow.FlowFast;
/*     */ import com.xoa.model.workflow.FlowRun;
/*     */ import com.xoa.model.workflow.FlowRunPrcs;
/*     */ import com.xoa.model.workflow.FlowTypeModel;
/*     */ import com.xoa.service.WFE.WFERunner.WFEFlowRunInfo;
import com.xoa.util.Constant;
/*     */ import com.xoa.util.DateCompute;
/*     */ import com.xoa.util.DateFormat;
/*     */ import com.xoa.util.ToJson;
/*     */ import com.xoa.util.common.L;
/*     */ import com.xoa.util.common.StringUtils;
/*     */ import com.xoa.util.common.session.SessionUtils;
/*     */ import com.xoa.util.common.wrapper.BaseWrapper;
/*     */ import com.xoa.util.common.wrapper.BaseWrappers;
/*     */ import com.xoa.util.ipUtil.IpAddr;
/*     */ import com.xoa.util.page.PageParams;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.servlet.http.HttpServletRequest;
/*     */ import javax.servlet.http.HttpSession;
/*     */ import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
/*     */ 
/*     */ @Service
/*     */ public class AttendEvectionService
/*     */ {
/*     */ 
/*     */   @Autowired
/*     */   private AttendEvectionMapper attendEvectionMapper;
/*     */ 
/*     */   @Autowired
/*     */   private UsersMapper usersMapper;
/*     */ 
/*     */   @Autowired
/*     */   private DepartmentMapper departmentMapper;
/*     */ 
/*     */   @Autowired
/*     */   private FlowRunPrcsMapper flowRunPrcsMapper;
/*     */ 
/*     */   @Autowired
/*     */   private FlowRunMapper flowRunMapper;
/*     */ 
/*     */   @Autowired
/*     */   private SysCodeMapper sysCodeMapper;
/*     */ 
/*     */   @Autowired
/*     */   private WFEFlowRunInfo wfeFlowRunInfo;
/*     */ 
/*     */   public ToJson<AttendEvectionFlowRunPrcs> queryAllAttendEvection(Integer page, Integer pageSize, Boolean useFlag, HttpServletRequest request, String FlowAllow)
/*     */   {
/*  70 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  71 */     Map objectMap = new HashMap();
/*  72 */     PageParams pageParams = new PageParams();
/*  73 */     pageParams.setUseFlag(useFlag);
/*  74 */     pageParams.setPage(page);
/*  75 */     pageParams.setPageSize(pageSize);
/*  76 */     objectMap.put("page", pageParams);
/*  77 */     objectMap.put("userId", users.getUserId());
/*  78 */     objectMap.put("flowAllow", FlowAllow);
/*  79 */     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
/*  80 */     ToJson json = new ToJson(1, "error");
/*     */     try {
/*  82 */       List<AttendEvectionFlowRunPrcs> attendEvectionList = this.attendEvectionMapper.queryAllAttendEvection(objectMap);
/*  83 */       for (AttendEvection attendEvection : attendEvectionList) {
/*  84 */         if (!StringUtils.checkNull(attendEvection.getUserId()).booleanValue()) {
/*  85 */           if (this.usersMapper.findUsersByuserId(attendEvection.getUserId()) != null) {
/*  86 */             attendEvection.setUserName(this.usersMapper.findUsersByuserId(attendEvection.getUserId()).getUserName());
/*     */           }
/*  88 */           if ((this.usersMapper.findUsersByuserId(attendEvection.getUserId()) != null) && 
/*  89 */             (this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendEvection.getUserId()).getDeptId().intValue()) != null)) {
/*  90 */             attendEvection.setDeptName(this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendEvection.getUserId()).getDeptId().intValue()));
/*     */           }
/*     */ 
/*     */         }
/*     */ 
/*  95 */         if ((!StringUtils.checkNull(attendEvection.getAgent()).booleanValue()) && 
/*  96 */           (this.usersMapper.findUsersByuserId(attendEvection.getAgent()) != null)) {
/*  97 */           attendEvection.setAgent(this.usersMapper.findUsersByuserId(attendEvection.getAgent()).getUserName());
/*     */         }
/*     */ 
/* 100 */         if (!StringUtils.checkNull(attendEvection.getStatus()).booleanValue()) {
/* 101 */           int status = Integer.valueOf(attendEvection.getStatus()).intValue();
/* 102 */           switch (status) {
/*     */           case 1:
/* 104 */             attendEvection.setStatus("未确认");
/* 105 */             break;
/*     */           case 2:
/* 107 */             attendEvection.setStatus("已确认");
/*     */           }
/*     */         }
/*     */ 
/* 111 */         if (!StringUtils.checkNull(attendEvection.getAllow()).booleanValue()) {
/* 112 */           int allow = Integer.valueOf(attendEvection.getAllow()).intValue();
/* 113 */           switch (allow) {
/*     */           case 0:
/* 115 */             attendEvection.setAllow("待审批");
/* 116 */             break;
/*     */           case 1:
/* 118 */             attendEvection.setAllow("已批准");
/* 119 */             break;
/*     */           case 2:
/* 121 */             attendEvection.setAllow("未批准");
/*     */           }
/*     */ 
/*     */         }
/*     */ 
/* 127 */         if ((attendEvection.getEvectionDate1() != null) && (attendEvection.getEvectionDate2() != null)) {
/* 128 */           attendEvection.setBeginDate(DateFormat.getStrDate(attendEvection.getEvectionDate1()));
/* 129 */           attendEvection.setEndDate(DateFormat.getStrDate(attendEvection.getEvectionDate2()));
/* 130 */           long begin = DateFormat.getTime(sdf.format(attendEvection.getEvectionDate1())).intValue();
/* 131 */           long end = DateFormat.getTime(sdf.format(attendEvection.getEvectionDate2())).intValue();
/* 132 */           attendEvection.setEvectionTime(DateFormat.returnTime(Integer.valueOf((int)(end - begin))));
/*     */         } else {
/* 134 */           attendEvection.setBeginDate("");
/* 135 */           attendEvection.setEndDate("");
/* 136 */           attendEvection.setEvectionTime("");
/*     */         }
/* 138 */         FlowRunPrcs flowRunPrcs = this.flowRunPrcsMapper.queryByRunId(attendEvection.getRunId());
/* 139 */         if (flowRunPrcs != null) {
/* 140 */           attendEvection.setFlowPrcs(flowRunPrcs.getFlowPrcs().toString());
/* 141 */           attendEvection.setPrcsId(flowRunPrcs.getPrcsId().toString());
/*     */         } else {
/* 143 */           attendEvection.setFlowPrcs("");
/* 144 */           attendEvection.setPrcsId("");
/*     */         }
/* 146 */         FlowRun flowRun = this.flowRunMapper.find(attendEvection.getRunId());
/* 147 */         if (flowRun != null) {
/* 148 */           attendEvection.setRunId(Integer.valueOf(flowRun.getRunId()));
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/* 154 */       json.setObj(attendEvectionList);
/* 155 */       json.setMsg("ok");
/* 156 */       json.setFlag(0);
/* 157 */       json.setTotleNum(pageParams.getTotal());
/*     */     } catch (Exception e) {
/* 159 */       json.setMsg(e.getMessage());
/* 160 */       L.e(new Object[] { "AttendService queryAllAttendEvection:" + e });
/*     */     }
/* 162 */     return json;
/*     */   }
/*     */   public BaseWrapper addAttendEvection(String createDate, HttpServletRequest request) {
/* 165 */     BaseWrapper baseWrapper = new BaseWrapper();
/* 166 */     AttendEvection attendEvection = new AttendEvection();
/* 167 */     String sqlType = Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse");
/*     */ 
/* 169 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 170 */     List<SysCode> SysCode = this.sysCodeMapper.getSysCode("KQQJTYPE");
/* 171 */     for (SysCode sysCode : SysCode) {
/* 172 */       if (sysCode.getCodeName().equals("出差申请")) {
/* 173 */         ToJson flowFastToJson = this.wfeFlowRunInfo.workFastAdd(users, Integer.parseInt(sysCode.getCodeNo()), 1, "1", "", request, sqlType, "", null);
/* 174 */         if (flowFastToJson.isFlag()) {
/* 175 */           FlowFast flowFast = (FlowFast)flowFastToJson.getObject();
/* 176 */           attendEvection.setUserId(users.getUserId());
/* 177 */           attendEvection.setRegisterIp(IpAddr.getIpAddress(request));
/* 178 */           attendEvection.setRecordTime(DateFormat.getDate(createDate));
/* 179 */           attendEvection.setRunId(Integer.valueOf(flowFast.getFlowRun().getRunId()));
/* 180 */           attendEvection.setStatus("1");
/* 181 */           attendEvection.setTableName("attend_evection");
/* 182 */           attendEvection.setAllow("0");
/* 183 */           int amount = this.attendEvectionMapper.insertSelective(attendEvection);
/* 184 */           if (amount > 0) {
/* 185 */             attendEvection.setFlowId(flowFast.getFlowTypeModel().getFlowId().toString());
/* 186 */             attendEvection.setFlowName(flowFast.getFlowTypeModel().getFlowName());
/* 187 */             baseWrapper.setFlag(true);
/* 188 */             baseWrapper.setStatus(true);
/* 189 */             baseWrapper.setData(attendEvection);
/* 190 */             baseWrapper.setMsg("更新成功");
/*     */           }
/*     */         }
/*     */       }
/*     */     }
/*     */ 
/* 196 */     return baseWrapper;
/*     */   }
/*     */ 
/*     */   public BaseWrappers backlogAttendList(HttpServletRequest request, String num, Integer page, Integer pageSize, Boolean useFlag)
/*     */   {
/* 202 */     BaseWrappers wrappers = new BaseWrappers();
/* 203 */     wrappers.setStatus(true);
/* 204 */     wrappers.setFlag(false);
/* 205 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 206 */     if (StringUtils.checkNull(users.getUserId()).booleanValue()) {
/* 207 */       wrappers.setMsg("用户信息过期");
/* 208 */       return wrappers;
/*     */     }
/* 210 */     Map map = new HashMap();
/* 211 */     PageParams pageParams = new PageParams();
/* 212 */     pageParams.setUseFlag(useFlag);
/* 213 */     pageParams.setPage(page);
/* 214 */     pageParams.setPageSize(pageSize);
/* 215 */     map.put("page", pageParams);
/* 216 */     map.put("userId", users.getUserId());
/* 217 */     wrappers.setTotal(pageParams.getTotal());
/* 218 */     if ("1".equals(num)) {
/* 219 */       List<AttendEvectionFlowRunPrcs> attendFlowRunPrcs = this.attendEvectionMapper.backlogAttendEvection(map);
/* 220 */       for (AttendEvectionFlowRunPrcs attendFlowRunPrcs1 : attendFlowRunPrcs)
/*     */       {
/* 222 */         if (this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) {
/* 223 */           attendFlowRunPrcs1.setUserName(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getUserName());
/*     */         }
/* 225 */         if ((this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) && 
/* 226 */           (this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getDeptId().intValue()) != null)) {
/* 227 */           attendFlowRunPrcs1.setDeptName(this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getDeptId().intValue()));
/*     */         }
/*     */ 
/* 230 */         if ((attendFlowRunPrcs1.getEvectionDate1() != null) && (attendFlowRunPrcs1.getEvectionDate2() != null)) {
/* 231 */           attendFlowRunPrcs1.setBeginDate(DateFormat.getStrDate(attendFlowRunPrcs1.getEvectionDate1()));
/* 232 */           attendFlowRunPrcs1.setEndDate(DateFormat.getStrDate(attendFlowRunPrcs1.getEvectionDate2()));
/*     */         }
/*     */         else {
/* 235 */           attendFlowRunPrcs1.setBeginDate("");
/* 236 */           attendFlowRunPrcs1.setEndDate("");
/* 237 */           attendFlowRunPrcs1.setEvectionTime("");
/*     */         }
/* 239 */         attendFlowRunPrcs1.setTableName("attend_evection");
/*     */       }
/*     */ 
/* 242 */       wrappers.setFlag(true);
/* 243 */       wrappers.setDatas(attendFlowRunPrcs);
/* 244 */       wrappers.setTotal(pageParams.getTotal());
/* 245 */     } else if ("2".equals(num)) {
/* 246 */       List<AttendEvectionFlowRunPrcs> attendFlowRunPrcs = this.attendEvectionMapper.haveDoneAttendEvection(map);
/* 247 */       for (AttendEvectionFlowRunPrcs attendFlowRunPrcs1 : attendFlowRunPrcs) {
/* 248 */         if (this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) {
/* 249 */           attendFlowRunPrcs1.setUserName(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getUserName());
/*     */         }
/* 251 */         if ((this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) && 
/* 252 */           (this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getDeptId().intValue()) != null)) {
/* 253 */           attendFlowRunPrcs1.setDeptName(this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getDeptId().intValue()));
/*     */         }
/*     */ 
/* 256 */         if ((attendFlowRunPrcs1.getEvectionDate1() != null) && (attendFlowRunPrcs1.getEvectionDate2() != null)) {
/* 257 */           attendFlowRunPrcs1.setBeginDate(DateFormat.getStrDate(attendFlowRunPrcs1.getEvectionDate1()));
/* 258 */           attendFlowRunPrcs1.setEndDate(DateFormat.getStrDate(attendFlowRunPrcs1.getEvectionDate2()));
/*     */         }
/*     */         else {
/* 261 */           attendFlowRunPrcs1.setBeginDate("");
/* 262 */           attendFlowRunPrcs1.setEndDate("");
/* 263 */           attendFlowRunPrcs1.setEvectionTime("");
/*     */         }
/* 265 */         attendFlowRunPrcs1.setTableName("attend_evection");
/*     */       }
/* 267 */       wrappers.setFlag(true);
/* 268 */       wrappers.setDatas(attendFlowRunPrcs);
/* 269 */       wrappers.setTotal(pageParams.getTotal());
/*     */     }
/*     */ 
/* 272 */     return wrappers;
/*     */   }
/*     */ 
/*     */   public ToJson<AttendEvection> selectAttendEvectionByUserId(String beginDate, String endDate, HttpServletRequest req)
/*     */   {
/* 281 */     ToJson json = new ToJson();
/*     */     try {
/* 283 */       String userId = ((Users)SessionUtils.getSessionInfo(req.getSession(), Users.class, new Users())).getUserId();
/* 284 */       List<Date> dates = DateCompute.getBetweenDates(DateFormat.DateToStr(beginDate), DateFormat.DateToStr(endDate));
/* 285 */       List attendEvectionList = this.attendEvectionMapper.selectAttendEvectionByUserId(userId);
/* 286 */       List newAttendEvectionList = new ArrayList();
/* 287 */       if (attendEvectionList.size() > 0) {
/* 288 */         for (Iterator i$ = attendEvectionList.iterator(); i$.hasNext(); ) { 
	                AttendEvection attendEvection = (AttendEvection)i$.next();
/* 289 */           for (Date nowDate : dates) {
/* 290 */             String aTime = DateFormat.getDatestr(attendEvection.getRecordTime()).substring(0, 10);
/* 291 */             String nTime = DateFormat.getDatestr(nowDate);
/* 292 */             if (aTime.equals(nTime))
/* 293 */               newAttendEvectionList.add(attendEvection);
/*     */           }
/*     */         }
/*     */         AttendEvection attendEvection;
/* 298 */         json.setObj(newAttendEvectionList);
/* 299 */         json.setFlag(0);
/* 300 */         json.setMsg("ok");
/*     */       } else {
/* 302 */         json.setMsg("err");
/* 303 */         json.setFlag(1);
/*     */       }
/*     */     }
/*     */     catch (Exception e) {
/* 307 */       e.printStackTrace();
/* 308 */       json.setFlag(1);
/* 309 */       json.setMsg("err");
/*     */     }
/*     */ 
/* 312 */     return json;
/*     */   }
/*     */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.service.attend.AttendEvectionService
 * JD-Core Version:    0.6.0
 */