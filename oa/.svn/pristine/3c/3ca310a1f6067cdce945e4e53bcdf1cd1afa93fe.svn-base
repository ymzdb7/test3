/*     */ package com.xoa.service.workPlan;
/*     */ 
/*     */ import com.xoa.dao.workPlan.WorkDetailMapper;
/*     */ import com.xoa.dao.workPlan.WorkPlanMapper;
/*     */ import com.xoa.model.edu.eduUser.EduUser;
/*     */ import com.xoa.model.users.Users;
/*     */ import com.xoa.model.workPlan.WorkDetailWithBLOBs;
/*     */ import com.xoa.model.workPlan.WorkPlanWithBLOBs;
/*     */ import com.xoa.service.department.DepartmentService;
/*     */ import com.xoa.service.edu.eduUser.IEduUserService;
/*     */ import com.xoa.util.DateFormat;
/*     */ import com.xoa.util.ExcelUtil;
/*     */ import com.xoa.util.ToJson;
/*     */ import com.xoa.util.common.L;
/*     */ import com.xoa.util.common.StringUtils;
/*     */ import com.xoa.util.common.log.FileUtils;
/*     */ import com.xoa.util.common.session.SessionUtils;
/*     */ import com.xoa.util.page.PageParams;
/*     */ import java.io.OutputStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.annotation.Resource;
/*     */ import javax.servlet.http.HttpServletRequest;
/*     */ import javax.servlet.http.HttpServletResponse;
/*     */ import javax.servlet.http.HttpSession;
/*     */ import org.apache.poi.hssf.usermodel.HSSFWorkbook;
/*     */ import org.springframework.stereotype.Service;
/*     */ import org.springframework.transaction.annotation.Transactional;
/*     */ 
/*     */ @Service
/*     */ public class WorkPlanService
/*     */ {
/*     */ 
/*     */   @Resource
/*     */   private WorkPlanMapper workPlanMapper;
/*     */ 
/*     */   @Resource
/*     */   private IEduUserService eduUserService;
/*     */ 
/*     */   @Resource
/*     */   private DepartmentService departmentService;
/*     */ 
/*     */   @Resource
/*     */   private WorkDetailMapper workDetailMapper;
/*     */ 
/*     */   public ToJson<WorkPlanWithBLOBs> selectWorkPlanByCond(int output, WorkPlanWithBLOBs workPlanWithBLOBs, HttpServletRequest request, HttpServletResponse response, HttpSession session, Integer page, Integer pageSize, boolean useFlag)
/*     */   {
/*  61 */     ToJson json = new ToJson(1, "error");
/*     */     try
/*     */     {
/*  64 */       PageParams pageParams = new PageParams();
/*  65 */       pageParams.setPage(page);
/*  66 */       pageParams.setPageSize(pageSize);
/*  67 */       pageParams.setUseFlag(Boolean.valueOf(useFlag));
/*  68 */       Map map = new HashMap();
/*  69 */       map.put("page", pageParams);
/*  70 */       if (workPlanWithBLOBs != null) {
/*  71 */         if (workPlanWithBLOBs.getStatusFlag().intValue() != 0) {
/*  72 */           Date date = new Date();
/*  73 */           workPlanWithBLOBs.setCurrent(date);
/*     */         }
/*  75 */         if ((!StringUtils.checkNull(workPlanWithBLOBs.getToId()).booleanValue()) && (workPlanWithBLOBs.getToId().contains(","))) {
/*  76 */           workPlanWithBLOBs.setToId(workPlanWithBLOBs.getToId().replace(",", ""));
/*     */         }
/*  78 */         if ((!StringUtils.checkNull(workPlanWithBLOBs.getToPersonId()).booleanValue()) && (workPlanWithBLOBs.getToPersonId().contains(","))) {
/*  79 */           workPlanWithBLOBs.setToPersonId(workPlanWithBLOBs.getToPersonId().replace(",", ""));
/*     */         }
/*  81 */         if ((!StringUtils.checkNull(workPlanWithBLOBs.getParticipator()).booleanValue()) && (workPlanWithBLOBs.getParticipator().contains(","))) {
/*  82 */           workPlanWithBLOBs.setParticipator(workPlanWithBLOBs.getParticipator().replace(",", ""));
/*     */         }
/*     */       }
/*  85 */       map.put("workPlanWithBLOBs", workPlanWithBLOBs);
/*  86 */       List<WorkPlanWithBLOBs> workPlanWithBLOBsList = this.workPlanMapper.selectWorkPlanByCond(map);
/*     */ 
/*  93 */       Date date = new Date();
/*  94 */       long currentTime = DateFormat.getTime(DateFormat.getStrDate(date)).intValue();
/*  95 */       long beginTime = 0L;
/*  96 */       long endTime = 0L;
/*  97 */       double particiCount = 0.0D;
/*  98 */       double percent = 0.0D;
/*  99 */       Map uidPartParam = new HashMap();
/* 100 */       Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 101 */       uidPartParam.put("uId", user.getUid());
/* 102 */       for (WorkPlanWithBLOBs temp : workPlanWithBLOBsList) {
/* 103 */         uidPartParam.put("planId", temp.getPlanId());
/* 104 */         int uidPartFlag = this.workPlanMapper.selManAndPartCount(uidPartParam);
/* 105 */         temp.setUidPartFlag(Integer.valueOf(uidPartFlag));
/*     */ 
/* 107 */         if (temp.getBeginDate() != null) {
/* 108 */           beginTime = DateFormat.getTime(DateFormat.getStrDate(temp.getBeginDate())).intValue();
/*     */         }
/* 110 */         if (temp.getEndDate() != null) {
/* 111 */           endTime = DateFormat.getTime(DateFormat.getStrDate(temp.getEndDate())).intValue();
/*     */         }
/* 113 */         if (temp.getEndDate() == null) {
/* 114 */           if (currentTime < beginTime) {
/* 115 */             temp.setStatus("1");
/* 116 */             temp.setStatusName("未开始");
/*     */           } else {
/* 118 */             temp.setStatus("2");
/* 119 */             temp.setStatusName("进行中");
/*     */           }
/*     */         }
/* 122 */         else if (temp.getPublish().equals("1")) {
/* 123 */           if (temp.getSuspendFlag() == "0")
/*     */           {
/* 125 */             temp.setStatusName("暂停");
/*     */           }
/* 127 */           else if ((currentTime < beginTime) && (currentTime < endTime)) {
/* 128 */             temp.setStatus("1");
/* 129 */             temp.setStatusName("未开始");
/* 130 */           } else if ((currentTime >= beginTime) && (currentTime <= endTime)) {
/* 131 */             temp.setStatus("2");
/* 132 */             temp.setStatusName("进行中");
/* 133 */           } else if ((currentTime > beginTime) && (currentTime > endTime)) {
/* 134 */             temp.setStatus("3");
/* 135 */             temp.setStatusName("已结束");
/*     */           }
/*     */         }
/*     */         else {
/* 139 */           temp.setStatusName("未发布");
/*     */         }
/*     */ 
/* 142 */         if (!StringUtils.checkNull(temp.getManager()).booleanValue()) {
/* 143 */           particiCount += 1.0D;
/* 144 */           temp.setManagerName(this.eduUserService.getUserNameByUids(temp.getManager()));
/*     */         }
/* 146 */         if (!StringUtils.checkNull(temp.getOpinionLeader()).booleanValue()) {
/* 147 */           temp.setOpinionLeaderName(this.eduUserService.getUserNameByUids(temp.getOpinionLeader()));
/*     */         }
/* 149 */         if (!StringUtils.checkNull(temp.getParticipator()).booleanValue()) {
/* 150 */           particiCount += temp.getParticipator().split(",").length - 1;
/* 151 */           temp.setParticipatorName(this.eduUserService.getUserNameByUids(temp.getParticipator()));
/*     */         }
/* 153 */         if (!StringUtils.checkNull(temp.getToPersonId()).booleanValue()) {
/* 154 */           temp.setToPersonName(this.eduUserService.getUserNameByUids(temp.getToPersonId()));
/*     */         }
/* 156 */         if (!StringUtils.checkNull(temp.getToId()).booleanValue()) {
/* 157 */           temp.setToName(this.departmentService.getDeptNameByDeptId(temp.getToId(), ","));
/*     */         }
/* 159 */         if ((!StringUtils.checkNull(temp.getCreator()).booleanValue()) && 
/* 160 */           (this.eduUserService.getByuserId(temp.getCreator()) != null)) {
/* 161 */           temp.setCreatorName(this.eduUserService.getByuserId(temp.getCreator()).getUserName());
/*     */         }
/*     */ 
/* 164 */         if (temp.getPlanId() != null) {
/* 165 */           WorkDetailWithBLOBs workDetail = new WorkDetailWithBLOBs();
/* 166 */           workDetail.setPlanId(temp.getPlanId().toString());
/* 167 */           workDetail.setTypeFlag("0");
/* 168 */           List<WorkDetailWithBLOBs> workDetailList = this.workDetailMapper.selWorkDetailByPlanId(workDetail);
/* 169 */           for (WorkDetailWithBLOBs workDetailWithBLOBs : workDetailList) {
/* 170 */             if (workDetailWithBLOBs.getPercent() != null) {
/* 171 */               percent += workDetailWithBLOBs.getPercent().intValue();
/*     */             }
/*     */           }
/* 174 */           int progress = 0;
/* 175 */           if (particiCount != 0.0D) {
/* 176 */             progress = (int)(percent / particiCount);
/*     */           }
/* 178 */           temp.setProgress(Integer.valueOf(progress));
/*     */         }
/*     */       }
/* 181 */       if (output == 1) {
/* 182 */         HSSFWorkbook tableWork = ExcelUtil.makeExcelHead("工作计划表", 15);
/* 183 */         String[] secondTitles = { "计划名称", "计划内容", "开始时间", "结束时间", "计划类别", "开放部门", "开放人员", "负责人", "参与人", "创建人", "创建时间", "状态", "备注" };
/* 184 */         HSSFWorkbook excelWork = ExcelUtil.makeSecondHead(tableWork, secondTitles);
/* 185 */         String[] beanProperty = { "name", "content", "beginDate", "endDate", "typeName", "toName", "toPersonName", "managerName", "participatorName", "creatorName", "createDate", "statusName", "remark" };
/* 186 */         HSSFWorkbook workbook = ExcelUtil.exportExcelData(excelWork, workPlanWithBLOBsList, beanProperty);
/* 187 */         response.setContentType("text/html;charset=UTF-8");
/* 188 */         OutputStream out = response.getOutputStream();
/*     */ 
/* 190 */         String filename = "工作计划表.xls";
/* 191 */         filename = FileUtils.encodeDownloadFilename(filename, request.getHeader("user-agent"));
/*     */ 
/* 193 */         response.setContentType("application/vnd.ms-excel");
/* 194 */         response.setHeader("content-disposition", "attachment;filename=" + filename);
/*     */ 
/* 196 */         workbook.write(out);
/* 197 */         out.flush();
/* 198 */         out.close();
/*     */       }
/*     */ 
/* 201 */       int result = this.workPlanMapper.selectWorkPlanTotalByCond(workPlanWithBLOBs);
/*     */ 
/* 208 */       json.setTotleNum(Integer.valueOf(result));
/* 209 */       json.setObj(workPlanWithBLOBsList);
/* 210 */       json.setMsg("ok");
/* 211 */       json.setFlag(0);
/*     */     } catch (Exception e) {
/* 213 */       json.setMsg(e.getMessage());
/* 214 */       L.e(new Object[] { "WorkPlanService selectWorkPlanByCond:" + e });
/* 215 */       e.printStackTrace();
/*     */     }
/* 217 */     return json;
/*     */   }
/*     */ 
/*     */   @Transactional
/*     */   public ToJson<WorkPlanWithBLOBs> insertWorkPlan(WorkPlanWithBLOBs workPlanWithBLOBs, HttpServletRequest request)
/*     */   {
/* 229 */     ToJson json = new ToJson(1, "error");
/*     */     try {
/* 231 */       Date date = new Date();
/* 232 */       if (workPlanWithBLOBs.getBeginDate() == null) {
/* 233 */         workPlanWithBLOBs.setBeginDate(date);
/*     */       }
/* 235 */       Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 236 */       workPlanWithBLOBs.setCreateDate(date);
/* 237 */       workPlanWithBLOBs.setCreator(user.getUserId());
/* 238 */       int count = this.workPlanMapper.insertWorkPlan(workPlanWithBLOBs);
/* 239 */       if (count > 0) {
/* 240 */         json.setMsg("ok");
/* 241 */         json.setFlag(0);
/*     */       }
/*     */     } catch (Exception e) {
/* 244 */       json.setMsg(e.getMessage());
/* 245 */       L.e(new Object[] { "WorkPlanService insertWorkPlan:" + e });
/* 246 */       e.printStackTrace();
/*     */     }
/* 248 */     return json;
/*     */   }
/*     */ 
/*     */   @Transactional
/*     */   public ToJson<WorkPlanWithBLOBs> updateWorkPlanById(WorkPlanWithBLOBs workPlanWithBLOBs)
/*     */   {
/* 261 */     ToJson json = new ToJson(1, "error");
/* 262 */     int count = 0;
/*     */     try {
/* 264 */       if (workPlanWithBLOBs.getBeginDate() == null) {
/* 265 */         Date date = new Date();
/* 266 */         workPlanWithBLOBs.setBeginDate(date);
/*     */       }
/*     */ 
/* 269 */       if ((!StringUtils.checkNull(workPlanWithBLOBs.getClearEndClearFlag()).booleanValue()) && 
/* 270 */         (workPlanWithBLOBs.getClearEndClearFlag().equals("1"))) {
/* 271 */         WorkPlanWithBLOBs workPlan = this.workPlanMapper.selectWorkPlanById(workPlanWithBLOBs.getPlanId().intValue());
/* 272 */         if (workPlan.getEndDate() != null) {
/* 273 */           long endTime = DateFormat.getDateTime(DateFormat.getDatestr(workPlan.getEndDate())).intValue();
/* 274 */           long time = DateFormat.getDateTime(DateFormat.getDatestr(new Date())).intValue();
/* 275 */           if (endTime <= time) {
/* 276 */             count += this.workPlanMapper.clearEndDateById(workPlanWithBLOBs.getPlanId().intValue());
/*     */           }
/*     */         }
/*     */       }
/*     */ 
/* 281 */       count += this.workPlanMapper.updateWorkPlanById(workPlanWithBLOBs);
/* 282 */       if (count > 0) {
/* 283 */         json.setMsg("ok");
/* 284 */         json.setFlag(0);
/*     */       }
/*     */     } catch (Exception e) {
/* 287 */       json.setMsg(e.getMessage());
/* 288 */       L.e(new Object[] { "WorkPlanService updateWorkPlanById:" + e });
/* 289 */       e.printStackTrace();
/*     */     }
/* 291 */     return json;
/*     */   }
/*     */ 
/*     */   @Transactional
/*     */   public ToJson<WorkPlanWithBLOBs> delWorkPlanById(int planId)
/*     */   {
/* 303 */     ToJson json = new ToJson(1, "error");
/*     */     try {
/* 305 */       int count = this.workPlanMapper.delWorkPlanById(planId);
/* 306 */       if (count > 0) {
/* 307 */         json.setMsg("ok");
/* 308 */         json.setFlag(0);
/*     */       }
/*     */     } catch (Exception e) {
/* 311 */       json.setMsg(e.getMessage());
/* 312 */       L.e(new Object[] { "WorkPlanService delWorkPlanById:" + e });
/* 313 */       e.printStackTrace();
/*     */     }
/* 315 */     return json;
/*     */   }
/*     */ 
/*     */   @Transactional
/*     */   public ToJson<WorkPlanWithBLOBs> deleteWorkPlanByIds(String planIds)
/*     */   {
/* 327 */     ToJson toJson = new ToJson(1, "error");
/*     */     try {
/* 329 */       int count = 0;
/* 330 */       String[] planIdArray = planIds.split(",");
/* 331 */       for (String planId : planIdArray) {
/* 332 */         if (!StringUtils.checkNull(planId).booleanValue()) {
/* 333 */           count = this.workPlanMapper.delWorkPlanById(Integer.valueOf(planId).intValue());
/*     */         }
/*     */       }
/* 336 */       if (count > 0) {
/* 337 */         toJson.setFlag(0);
/* 338 */         toJson.setMsg("ok");
/*     */       }
/*     */     } catch (Exception e) {
/* 341 */       toJson.setMsg(e.getMessage());
/* 342 */       L.e(new Object[] { "WorkPlanService deleteWorkPlanByIds:" + e });
/*     */     }
/* 344 */     return toJson;
/*     */   }
/*     */ 
/*     */   public ToJson<WorkPlanWithBLOBs> selectWorkPlanById(int planId)
/*     */   {
/* 356 */     ToJson json = new ToJson(1, "error");
/*     */     try {
/* 358 */       WorkPlanWithBLOBs workPlanWithBLOBs = this.workPlanMapper.selectWorkPlanById(planId);
/*     */ 
/* 360 */       Date date = new Date();
/* 361 */       long currentTime = DateFormat.getTime(DateFormat.getStrDate(date)).intValue();
/* 362 */       long beginTime = 0L;
/* 363 */       long endTime = 0L;
/* 364 */       if (workPlanWithBLOBs.getBeginDate() != null) {
/* 365 */         beginTime = DateFormat.getTime(DateFormat.getStrDate(workPlanWithBLOBs.getBeginDate())).intValue();
/*     */       }
/* 367 */       if (workPlanWithBLOBs.getEndDate() != null) {
/* 368 */         endTime = DateFormat.getTime(DateFormat.getStrDate(workPlanWithBLOBs.getEndDate())).intValue();
/*     */       }
/* 370 */       if (workPlanWithBLOBs.getEndDate() == null) {
/* 371 */         if (currentTime < beginTime) {
/* 372 */           workPlanWithBLOBs.setStatus("1");
/* 373 */           workPlanWithBLOBs.setStatusName("未开始");
/*     */         } else {
/* 375 */           workPlanWithBLOBs.setStatus("2");
/* 376 */           workPlanWithBLOBs.setStatusName("进行中");
/*     */         }
/*     */       }
/* 379 */       else if ((currentTime < beginTime) && (currentTime < endTime)) {
/* 380 */         workPlanWithBLOBs.setStatus("1");
/* 381 */         workPlanWithBLOBs.setStatusName("未开始");
/* 382 */       } else if ((currentTime > beginTime) && (currentTime < endTime)) {
/* 383 */         workPlanWithBLOBs.setStatus("2");
/* 384 */         workPlanWithBLOBs.setStatusName("进行中");
/* 385 */       } else if ((currentTime > beginTime) && (currentTime > endTime)) {
/* 386 */         workPlanWithBLOBs.setStatus("3");
/* 387 */         workPlanWithBLOBs.setStatusName("已结束");
/*     */       }
/*     */ 
/* 390 */       if (!StringUtils.checkNull(workPlanWithBLOBs.getManager()).booleanValue()) {
/* 391 */         workPlanWithBLOBs.setManagerName(this.eduUserService.getUserNameByUids(workPlanWithBLOBs.getManager()));
/*     */       }
/* 393 */       if (!StringUtils.checkNull(workPlanWithBLOBs.getOpinionLeader()).booleanValue()) {
/* 394 */         workPlanWithBLOBs.setOpinionLeaderName(this.eduUserService.getUserNameByUids(workPlanWithBLOBs.getOpinionLeader()));
/*     */       }
/* 396 */       if (!StringUtils.checkNull(workPlanWithBLOBs.getParticipator()).booleanValue()) {
/* 397 */         workPlanWithBLOBs.setParticipatorName(this.eduUserService.getUserNameByUids(workPlanWithBLOBs.getParticipator()));
/*     */       }
/* 399 */       if (!StringUtils.checkNull(workPlanWithBLOBs.getToPersonId()).booleanValue()) {
/* 400 */         workPlanWithBLOBs.setToPersonName(this.eduUserService.getUserNameByUids(workPlanWithBLOBs.getToPersonId()));
/*     */       }
/* 402 */       if (!StringUtils.checkNull(workPlanWithBLOBs.getToId()).booleanValue()) {
/* 403 */         workPlanWithBLOBs.setToName(this.departmentService.getDeptNameByDeptId(workPlanWithBLOBs.getToId(), ","));
/*     */       }
/* 405 */       if ((!StringUtils.checkNull(workPlanWithBLOBs.getCreator()).booleanValue()) && 
/* 406 */         (this.eduUserService.getByuserId(workPlanWithBLOBs.getCreator()) != null)) {
/* 407 */         workPlanWithBLOBs.setCreatorName(this.eduUserService.getByuserId(workPlanWithBLOBs.getCreator()).getUserName());
/*     */       }
/*     */ 
/* 410 */       json.setObject(workPlanWithBLOBs);
/* 411 */       json.setMsg("ok");
/* 412 */       json.setFlag(0);
/*     */     } catch (Exception e) {
/* 414 */       json.setMsg(e.getMessage());
/* 415 */       L.e(new Object[] { "WorkPlanService selectWorkPlanById:" + e });
/* 416 */       e.printStackTrace();
/*     */     }
/* 418 */     return json;
/*     */   }
/*     */ 
/*     */   public List<WorkPlanWithBLOBs> getNoFinished(WorkPlanWithBLOBs workPlanWithBLOBs, Integer page, Integer pageSize, boolean useFlag)
/*     */   {
/* 430 */     PageParams pageParams = new PageParams();
/* 431 */     pageParams.setPage(page);
/* 432 */     pageParams.setPageSize(pageSize);
/* 433 */     pageParams.setUseFlag(Boolean.valueOf(useFlag));
/* 434 */     Map map = new HashMap();
/* 435 */     map.put("page", pageParams);
/* 436 */     map.put("workPlanWithBLOBs", workPlanWithBLOBs);
/* 437 */     List<WorkPlanWithBLOBs> allWorkPlan = this.workPlanMapper.selectWorkPlanByCond(map);
/*     */ 
/* 440 */     map.remove("page");
/* 441 */     Date date = new Date();
/* 442 */     workPlanWithBLOBs.setCurrent(date);
/* 443 */     workPlanWithBLOBs.setStatusFlag(Integer.valueOf(1));
/* 444 */     map.put("workPlanWithBLOBs", workPlanWithBLOBs);
/* 445 */     List<WorkPlanWithBLOBs> finishedList = this.workPlanMapper.selectWorkPlanByCond(map);
/*     */ 
/* 447 */     List noFinishedList = new ArrayList();
/* 448 */     for (WorkPlanWithBLOBs workPlan : allWorkPlan) {
/* 449 */       int count = 0;
/* 450 */       for (WorkPlanWithBLOBs temp : finishedList) {
/* 451 */         if (workPlan.getPlanId() == temp.getPlanId()) {
/* 452 */           count++;
/* 453 */           break;
/*     */         }
/*     */       }
/* 456 */       if (count == 0) {
/* 457 */         noFinishedList.add(workPlan);
/*     */       }
/*     */     }
/* 460 */     return noFinishedList;
/*     */   }
/*     */ 
/*     */   public int getNoFinishedCount(WorkPlanWithBLOBs workPlanWithBLOBs)
/*     */   {
/* 473 */     Map map = new HashMap();
/* 474 */     map.put("workPlanWithBLOBs", workPlanWithBLOBs);
/* 475 */     List allWorkPlan = this.workPlanMapper.selectWorkPlanByCond(map);
/*     */ 
/* 478 */     Date date = new Date();
/* 479 */     workPlanWithBLOBs.setCurrent(date);
/* 480 */     workPlanWithBLOBs.setStatusFlag(Integer.valueOf(1));
/* 481 */     map.put("workPlanWithBLOBs", workPlanWithBLOBs);
/* 482 */     List finishedList = this.workPlanMapper.selectWorkPlanByCond(map);
/*     */ 
/* 484 */     int count = allWorkPlan.size() - finishedList.size();
/* 485 */     return count;
/*     */   }
/*     */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.service.workPlan.WorkPlanService
 * JD-Core Version:    0.6.0
 */