  package com.xoa.service.attend;
  
  import com.xoa.dao.attend.AttendOutMapper;
  import com.xoa.dao.common.SysCodeMapper;
  import com.xoa.dao.department.DepartmentMapper;
  import com.xoa.dao.users.UsersMapper;
  import com.xoa.dao.workflow.FlowRunMapper;
  import com.xoa.dao.workflow.FlowRunPrcsMapper;
  import com.xoa.model.attend.AttendOut;
  import com.xoa.model.attend.AttendOutFlowRunPrcs;
  import com.xoa.model.common.SysCode;
  import com.xoa.model.users.Users;
  import com.xoa.model.workflow.FlowFast;
  import com.xoa.model.workflow.FlowRun;
  import com.xoa.model.workflow.FlowRunPrcs;
  import com.xoa.model.workflow.FlowTypeModel;
  import com.xoa.service.WFE.WFERunner.WFEFlowRunInfo;
import com.xoa.util.Constant;
  import com.xoa.util.DateCompute;
  import com.xoa.util.DateFormat;
  import com.xoa.util.ToJson;
  import com.xoa.util.common.L;
  import com.xoa.util.common.StringUtils;
  import com.xoa.util.common.session.SessionUtils;
  import com.xoa.util.common.wrapper.BaseWrapper;
  import com.xoa.util.common.wrapper.BaseWrappers;
  import com.xoa.util.ipUtil.IpAddr;
  import com.xoa.util.page.PageParams;
  import java.text.SimpleDateFormat;
  import java.util.ArrayList;
  import java.util.Date;
  import java.util.HashMap;
  import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
  import javax.servlet.http.HttpServletRequest;
  import javax.servlet.http.HttpSession;
  import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
  
  @Service
  public class AttendOutService
  {
  
    @Autowired
    private AttendOutMapper attendOutMapper;
  
    @Autowired
    private UsersMapper usersMapper;
  
    @Autowired
    private DepartmentMapper departmentMapper;
  
    @Autowired
    private FlowRunPrcsMapper flowRunPrcsMapper;
  
    @Autowired
    private FlowRunMapper flowRunMapper;
  
    @Autowired
    private SysCodeMapper sysCodeMapper;
  
    @Autowired
    private WFEFlowRunInfo wfeFlowRunInfo;
  
    public ToJson<AttendOutFlowRunPrcs> queryAllAttendOut(Integer page, Integer pageSize, Boolean useFlag, HttpServletRequest request, String FlowAllow)
    {
      Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
      Map objectMap = new HashMap();
      PageParams pageParams = new PageParams();
      pageParams.setUseFlag(useFlag);
      pageParams.setPage(page);
      pageParams.setPageSize(pageSize);
      objectMap.put("page", pageParams);
      objectMap.put("userId", users.getUserId());
      objectMap.put("flowAllow", FlowAllow);
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      ToJson json = new ToJson(1, "error");
      try {
        List<AttendOutFlowRunPrcs> attendOutList = this.attendOutMapper.queryAllAttendOut(objectMap);
        for (AttendOut attendOut : attendOutList) {
          String date = DateFormat.getDatestr(attendOut.getCreateDate()).substring(0, 10);
          if (!StringUtils.checkNull(attendOut.getUserId()).booleanValue()) {
            if (this.usersMapper.findUsersByuserId(attendOut.getUserId()) != null) {
              attendOut.setUserName(this.usersMapper.findUsersByuserId(attendOut.getUserId()).getUserName());
            }
            if (this.usersMapper.findUsersByuserId(attendOut.getUserId()) != null) {
              attendOut.setDeptName(this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendOut.getUserId()).getDeptId().intValue()));
            }
          }
  
          if ((!StringUtils.checkNull(attendOut.getAgent()).booleanValue()) && 
            (this.usersMapper.findUsersByuserId(attendOut.getAgent()) != null)) {
            attendOut.setAgent(this.usersMapper.findUsersByuserId(attendOut.getAgent()).getUserName());
          }
  
          if (!StringUtils.checkNull(attendOut.getStatus()).booleanValue()) {
            int status = Integer.valueOf(attendOut.getStatus()).intValue();
            switch (status) {
            case 1:
              attendOut.setStatus("未确认");
              break;
            case 2:
              attendOut.setStatus("确认归来");
            }
          }
  
          if (!StringUtils.checkNull(attendOut.getAllow()).booleanValue()) {
            int allow = Integer.valueOf(attendOut.getAllow()).intValue();
            switch (allow) {
            case 0:
              attendOut.setAllow("待审批");
              break;
            case 1:
              attendOut.setAllow("已批准");
              break;
            case 2:
              attendOut.setAllow("未批准");
            }
  
          }
  
          if ((!StringUtils.checkNull(attendOut.getOutTime1()).booleanValue()) && (!StringUtils.checkNull(attendOut.getOutTime2()).booleanValue()))
          {
            Date outTime1 = DateFormat.getDate(attendOut.getOutTime1());
            Date outTime2 = DateFormat.getDate(attendOut.getOutTime2());
            long begin = DateFormat.getTime(sdf.format(outTime1)).intValue();
            long end = DateFormat.getTime(sdf.format(outTime2)).intValue();
            attendOut.setOutTime(DateFormat.returnTime(Integer.valueOf((int)(end - begin))));
            attendOut.setOutTime1(attendOut.getOutTime1());
            attendOut.setOutTime2(attendOut.getOutTime2());
          } else {
            attendOut.setOutTime("");
            attendOut.setOutTime1("");
            attendOut.setOutTime2("");
          }
  
          FlowRunPrcs flowRunPrcs = this.flowRunPrcsMapper.queryByRunId(attendOut.getRunId());
          if (flowRunPrcs != null) {
            attendOut.setFlowPrcs(flowRunPrcs.getFlowPrcs().toString());
            attendOut.setPrcsId(flowRunPrcs.getPrcsId().toString());
          } else {
            attendOut.setFlowPrcs("");
            attendOut.setPrcsId("");
          }
          FlowRun flowRun = this.flowRunMapper.find(attendOut.getRunId());
          if (flowRun != null) {
            attendOut.setRunId(Integer.valueOf(flowRun.getRunId()));
          }
  
        }
  
        json.setObj(attendOutList);
        json.setMsg("ok");
        json.setFlag(0);
        json.setTotleNum(pageParams.getTotal());
      } catch (Exception e) {
        json.setMsg(e.getMessage());
        L.e(new Object[] { "AttendService queryAllAttendOut:" + e });
      }
      return json;
    }
    public BaseWrapper addAllAttendOut(String createDate, HttpServletRequest request) {
      BaseWrapper baseWrapper = new BaseWrapper();
      AttendOut attendOut = new AttendOut();
      Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
      String sqlType = Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse");
  
      List<SysCode> SysCode = this.sysCodeMapper.getSysCode("KQQJTYPE");
      for (SysCode sysCode : SysCode) {
        if (sysCode.getCodeName().equals("外出申请")) {
          ToJson flowFastToJson = this.wfeFlowRunInfo.workFastAdd(users, Integer.parseInt(sysCode.getCodeNo()), 1, "1", "", request, sqlType, "", null);
          if (flowFastToJson.isFlag()) {
            FlowFast flowFast = (FlowFast)flowFastToJson.getObject();
            attendOut.setUserId(users.getUserId());
            attendOut.setUserName(users.getUserName());
            attendOut.setCreateDate(DateFormat.getDate(createDate));
            attendOut.setSubmitTime(DateFormat.getDate(createDate));
            attendOut.setRegisterIp(IpAddr.getIpAddress(request));
            attendOut.setRunId(Integer.valueOf(flowFast.getFlowRun().getRunId()));
            attendOut.setStatus("1");
            attendOut.setTableName("attend_out");
            attendOut.setAllow("0");
  
            int amount = this.attendOutMapper.insertSelective(attendOut);
            if (amount > 0) {
              attendOut.setFlowId(flowFast.getFlowTypeModel().getFlowId().toString());
              attendOut.setFlowName(flowFast.getFlowTypeModel().getFlowName());
              baseWrapper.setFlag(true);
              baseWrapper.setStatus(true);
              baseWrapper.setData(attendOut);
              baseWrapper.setMsg("更新成功");
            }
  
          }
  
        }
  
      }
  
      return baseWrapper;
    }
  
    public BaseWrappers backlogAttendList(HttpServletRequest request, String num, Integer page, Integer pageSize, Boolean useFlag)
    {
      BaseWrappers wrappers = new BaseWrappers();
      wrappers.setStatus(true);
      wrappers.setFlag(false);
      Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
      if (StringUtils.checkNull(users.getUserId()).booleanValue()) {
        wrappers.setMsg("用户信息过期");
        return wrappers;
      }
      Map map = new HashMap();
      PageParams pageParams = new PageParams();
      pageParams.setUseFlag(useFlag);
      pageParams.setPage(page);
      pageParams.setPageSize(pageSize);
      map.put("page", pageParams);
      map.put("userId", users.getUserId());
      wrappers.setTotal(pageParams.getTotal());
      if ("1".equals(num)) {
        List<AttendOutFlowRunPrcs> attendFlowRunPrcs = this.attendOutMapper.backlogAttendOut(map);
        for (AttendOutFlowRunPrcs attendFlowRunPrcs1 : attendFlowRunPrcs) {
          String date = DateFormat.getDatestr(attendFlowRunPrcs1.getCreateDate()).substring(0, 9);
          if (!StringUtils.checkNull(attendFlowRunPrcs1.getUserId()).booleanValue()) {
            if (this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) {
              attendFlowRunPrcs1.setUserName(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getUserName());
            }
            if (this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) {
              attendFlowRunPrcs1.setDeptName(this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getDeptId().intValue()));
            }
          }
  
          attendFlowRunPrcs1.setTableName("attend_out");
        }
        wrappers.setFlag(true);
        wrappers.setDatas(attendFlowRunPrcs);
        wrappers.setTotal(pageParams.getTotal());
      } else if ("2".equals(num)) {
        List<AttendOutFlowRunPrcs> attendFlowRunPrcs = this.attendOutMapper.haveDoneAttendOut(map);
        for (AttendOutFlowRunPrcs attendFlowRunPrcs1 : attendFlowRunPrcs) {
          String date = DateFormat.getDatestr(attendFlowRunPrcs1.getCreateDate()).substring(0, 9);
          if (!StringUtils.checkNull(attendFlowRunPrcs1.getUserId()).booleanValue()) {
            if (this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) {
              attendFlowRunPrcs1.setUserName(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getUserName());
            }
            if (this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()) != null) {
              attendFlowRunPrcs1.setDeptName(this.departmentMapper.getDeptNameById(this.usersMapper.findUsersByuserId(attendFlowRunPrcs1.getUserId()).getDeptId().intValue()));
            }
          }
  
          attendFlowRunPrcs1.setTableName("attend_out");
        }
        wrappers.setFlag(true);
        wrappers.setDatas(attendFlowRunPrcs);
        wrappers.setTotal(pageParams.getTotal());
      }
  
      return wrappers;
    }
  
    public ToJson<AttendOut> queryAttendOutByUserId(String beginDate, String endDate, HttpServletRequest req)
    {
      ToJson json = new ToJson();
      try {
        String userId = ((Users)SessionUtils.getSessionInfo(req.getSession(), Users.class, new Users())).getUserId();
        List<Date> dates = DateCompute.getBetweenDates(DateFormat.DateToStr(beginDate), DateFormat.DateToStr(endDate));
        List<AttendOut> attendOutList = this.attendOutMapper.queryAttendOutByUserId(userId);
        List newAttendOutList = new ArrayList();
        if (attendOutList.size() > 0) {
          for (Iterator i$ = attendOutList.iterator(); i$.hasNext(); ) {
	                AttendOut attendOut = (AttendOut)i$.next();
            for (Date nowDate : dates) {
              String aTime = DateFormat.getDatestr(attendOut.getSubmitTime()).substring(0, 10);
              String nTime = DateFormat.getDatestr(nowDate);
              if (aTime.equals(nTime))
              {
                newAttendOutList.add(attendOut);
              }
            }
          }
          AttendOut attendOut;
          json.setObj(newAttendOutList);
          json.setFlag(0);
          json.setMsg("ok");
        }
        else {
          json.setFlag(1);
          json.setMsg("err");
        }
      }
      catch (Exception e) {
        e.printStackTrace();
        json.setFlag(1);
        json.setMsg("err");
      }
  
      return json;
    }
  }

