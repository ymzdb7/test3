/*     */ package com.xoa.service.rms.impl;
/*     */ 
/*     */ import com.xoa.dao.rms.RmsRollMapper;
/*     */ import com.xoa.dao.users.UsersMapper;
/*     */ import com.xoa.model.rms.RmsRollWithBLOBs;
/*     */ import com.xoa.model.users.Users;
/*     */ import com.xoa.service.rms.RmsRollService;
/*     */ import com.xoa.util.ToJson;
/*     */ import com.xoa.util.common.StringUtils;
/*     */ import com.xoa.util.common.session.SessionUtils;
/*     */ import com.xoa.util.page.PageParams;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.servlet.http.HttpServletRequest;
/*     */ import org.springframework.beans.factory.annotation.Autowired;
/*     */ import org.springframework.stereotype.Service;
/*     */ 
/*     */ @Service
/*     */ public class RmsRollServiceImpl
/*     */   implements RmsRollService
/*     */ {
/*     */ 
/*     */   @Autowired
/*     */   private RmsRollMapper rmsRollMapper;
/*     */ 
/*     */   @Autowired
/*     */   private UsersMapper usersMapper;
/*     */ 
/*     */   public ToJson<RmsRollWithBLOBs> save(RmsRollWithBLOBs rmsRoll, HttpServletRequest request)
/*     */   {
/*  35 */     ToJson json = new ToJson();
/*     */     try {
/*  37 */       Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  38 */       rmsRoll.setAddUser(user.getUserId());
/*  39 */       rmsRoll.setAddTime(new Date());
/*  40 */       if (StringUtils.checkNull(rmsRoll.getManageUser()).booleanValue()) {
/*  41 */         rmsRoll.setManageUser("");
/*     */       }
/*  43 */       if (StringUtils.checkNull(rmsRoll.getReadUser()).booleanValue()) {
/*  44 */         rmsRoll.setReadUser("");
/*     */       }
/*  46 */       this.rmsRollMapper.insertSelective(rmsRoll);
/*  47 */       json.setFlag(0);
/*  48 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/*  50 */       e.printStackTrace();
/*  51 */       json.setFlag(1);
/*  52 */       json.setMsg("err");
/*     */     }
/*  54 */     return json;
/*     */   }
/*     */ 
/*     */   public ToJson<RmsRollWithBLOBs> update(RmsRollWithBLOBs rmsRollWithBLOBs, HttpServletRequest request)
/*     */   {
/*  59 */     ToJson json = new ToJson();
/*     */     try {
/*  61 */       Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  62 */       rmsRollWithBLOBs.setModUser(user.getUserId());
/*  63 */       rmsRollWithBLOBs.setModTime(new Date());
/*     */ 
/*  65 */       this.rmsRollMapper.updateByPrimaryKeySelective(rmsRollWithBLOBs);
/*  66 */       json.setFlag(0);
/*  67 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/*  69 */       e.printStackTrace();
/*  70 */       json.setFlag(1);
/*  71 */       json.setMsg("err");
/*     */     }
/*  73 */     return json;
/*     */   }
/*     */ 
/*     */   public ToJson<RmsRollWithBLOBs> destroy(String rollIds, HttpServletRequest request)
/*     */   {
/*  78 */     ToJson json = new ToJson();
/*     */     try {
/*  80 */       Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  81 */       String[] split = rollIds.split(",");
/*  82 */       this.rmsRollMapper.deleteByRollIds(split);
/*  83 */       json.setFlag(0);
/*  84 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/*  86 */       e.printStackTrace();
/*  87 */       json.setFlag(1);
/*  88 */       json.setMsg("err");
/*     */     }
/*  90 */     return json;
/*     */   }
/*     */ 
/*     */   public ToJson<RmsRollWithBLOBs> query(RmsRollWithBLOBs rmsRollWithBLOBs, PageParams pageParams)
/*     */   {
/*  95 */     ToJson json = new ToJson();
/*     */     try {
/*  97 */       Map map = new HashMap();
/*  98 */       map.put("page", pageParams);
/*  99 */       map.put("fileCode", rmsRollWithBLOBs.getRollCode());
/* 100 */       map.put("roomId", rmsRollWithBLOBs.getRoomId());
/*     */ 
/* 102 */       map.put("beginDate", rmsRollWithBLOBs.getBeginDate());
/* 103 */       map.put("beginDate2", rmsRollWithBLOBs.getBeginDate2());
/* 104 */       map.put("endDate", rmsRollWithBLOBs.getEndDate());
/* 105 */       map.put("endDate2", rmsRollWithBLOBs.getEndDate2());
/* 106 */       map.put("deadBeginDate", rmsRollWithBLOBs.getDeadBeginDate());
/* 107 */       map.put("deadEndDate", rmsRollWithBLOBs.getDeadEndDate());
/*     */ 
/* 109 */       map.put("categoryNo", rmsRollWithBLOBs.getCategoryNo());
/* 110 */       map.put("archiveNo", rmsRollWithBLOBs.getArchiveNo());
/*     */ 
/* 112 */       map.put("microNo", rmsRollWithBLOBs.getMicroNo());
/*     */ 
/* 114 */       map.put("certificateStart", rmsRollWithBLOBs.getCertificateStart());
/* 115 */       map.put("certificateStart2", rmsRollWithBLOBs.getCertificateStart2());
/*     */ 
/* 117 */       map.put("certificateEnd", rmsRollWithBLOBs.getCertificateEnd());
/* 118 */       map.put("certificateEnd2", rmsRollWithBLOBs.getCertificateEnd2());
/*     */ 
/* 121 */       map.put("rollPage", rmsRollWithBLOBs.getRollPage());
/* 122 */       map.put("rollPage2", rmsRollWithBLOBs.getRollPage2());
/*     */ 
/* 124 */       map.put("remark", rmsRollWithBLOBs.getRemark());
/* 125 */       map.put("rollName", rmsRollWithBLOBs.getRollName());
/* 126 */       map.put("years", rmsRollWithBLOBs.getYears());
/* 127 */       map.put("secret", rmsRollWithBLOBs.getSecret());
/* 128 */       map.put("catalogNo", rmsRollWithBLOBs.getCatalogNo());
/* 129 */       map.put("boxNo", rmsRollWithBLOBs.getBoxNo());
/* 130 */       map.put("certificateKind", rmsRollWithBLOBs.getCertificateKind());
/* 131 */       map.put("deptId", rmsRollWithBLOBs.getDeptId());
/*     */ 
/* 133 */       List RmsRollWithBLOBs = this.rmsRollMapper.query(map);
/* 134 */       json.setTotleNum(pageParams.getTotal());
/* 135 */       json.setObj(RmsRollWithBLOBs);
/* 136 */       json.setFlag(0);
/* 137 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/* 139 */       json.setFlag(1);
/* 140 */       json.setMsg("err");
/*     */     }
/* 142 */     return json;
/*     */   }
/*     */ 
/*     */   public ToJson<RmsRollWithBLOBs> selectById(Integer rollId)
/*     */   {
/* 147 */     ToJson json = new ToJson();
/*     */     try {
/* 149 */       RmsRollWithBLOBs rmsRollWithBLOBs = this.rmsRollMapper.selectById(rollId);
/* 150 */       if (!StringUtils.checkNull(rmsRollWithBLOBs.getManager()).booleanValue()) {
/* 151 */         Users usersByuserId = this.usersMapper.getUsersByuserId(rmsRollWithBLOBs.getManager());
/* 152 */         rmsRollWithBLOBs.setManagerName(usersByuserId.getUserName());
/*     */       }
/* 154 */       json.setObject(rmsRollWithBLOBs);
/* 155 */       json.setFlag(0);
/* 156 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/* 158 */       e.printStackTrace();
/* 159 */       json.setFlag(1);
/* 160 */       json.setMsg("err");
/*     */     }
/* 162 */     return json;
/*     */   }
/*     */ 
/*     */   public ToJson<RmsRollWithBLOBs> selectAll()
/*     */   {
/* 167 */     ToJson json = new ToJson();
/*     */     try {
/* 169 */       List rmsRollWithBLOBs = this.rmsRollMapper.selectAll();
/* 170 */       json.setObj(rmsRollWithBLOBs);
/* 171 */       json.setFlag(0);
/* 172 */       json.setMsg("ok");
/*     */     } catch (Exception e) {
/* 174 */       e.printStackTrace();
/* 175 */       json.setFlag(1);
/* 176 */       json.setMsg("err");
/*     */     }
/* 178 */     return json;
/*     */   }
/*     */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.service.rms.impl.RmsRollServiceImpl
 * JD-Core Version:    0.6.0
 */