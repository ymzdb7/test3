 package com.xoa.util.sendUtil;
 
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
 import java.net.URLEncoder;
 
 public class send
 {
   public static void main(String[] args)
     throws Exception
   {
   }
 
   public static String doPost(StringBuffer mobileString, StringBuffer contextString, String protocol, String host, String port, String username, String pwd, String content_field, String code, String mobile, String time_content, String sign, String location, String extend_1, String extend_2, String extend_3, String extend_4, String extend_5, String startTime)
     throws Exception
   {
     StringBuffer param = new StringBuffer();
 
     if (code.equals("1"))
       code = "utf-8";
     else if (code.equals("0")) {
       code = "GBK";
     }
     param.append(username);
     param.append(new StringBuilder().append("&").append(pwd).toString());
     param.append(new StringBuilder().append("&").append(mobile).append("=").toString()).append(mobileString);
 
     if (location.equals("1"))
     {
       param.append(new StringBuilder().append("&").append(content_field).append("=").append(URLEncoder.encode(new StringBuilder().append(contextString.toString()).append("【高速波】").toString(), "UTF-8")).toString());
     }
 
     if (location.equals("0")) {
       param.append(new StringBuilder().append("&").append(content_field).append("=").toString()).append(URLEncoder.encode(contextString.toString(), "UTF-8"));
       param.append(new StringBuilder().append("&").append(sign).append("=").append(URLEncoder.encode("高速波", "UTF-8")).toString());
     }
     if (startTime == null) {
       startTime = "";
     }
     param.append(new StringBuilder().append("&").append(time_content).append("=").append(startTime).toString());
     param.append(new StringBuilder().append("&").append(extend_1).toString());
     param.append(new StringBuilder().append("&").append(extend_2).toString());
     param.append(new StringBuilder().append("&").append(extend_3).toString());
     param.append(new StringBuilder().append("&").append(extend_4).toString());
     param.append(new StringBuilder().append("&").append(extend_5).toString());
 
     URL localURL = new URL(new StringBuilder().append(protocol).append(":").append(host).append("/").append(port).append("?").toString());
     URLConnection connection = localURL.openConnection();
     HttpURLConnection httpURLConnection = (HttpURLConnection)connection;
 
     httpURLConnection.setDoOutput(true);
     httpURLConnection.setRequestMethod("POST");
     httpURLConnection.setRequestProperty("Accept-Charset", code);
     httpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
     httpURLConnection.setRequestProperty("Content-Length", String.valueOf(param.length()));
 
     OutputStream outputStream = null;
     OutputStreamWriter outputStreamWriter = null;
     InputStream inputStream = null;
     InputStreamReader inputStreamReader = null;
     BufferedReader reader = null;
     String resultBuffer = "";
     try
     {
       outputStream = httpURLConnection.getOutputStream();
       outputStreamWriter = new OutputStreamWriter(outputStream);
 
       outputStreamWriter.write(param.toString());
       outputStreamWriter.flush();
 
       if (httpURLConnection.getResponseCode() >= 300) {
         throw new Exception(new StringBuilder().append("HTTP Request is not success, Response code is ").append(httpURLConnection.getResponseCode()).toString());
       }
 
       inputStream = httpURLConnection.getInputStream();
       resultBuffer = convertStreamToString(inputStream);
     }
     finally
     {
       if (outputStreamWriter != null) {
         outputStreamWriter.close();
       }
 
       if (outputStream != null) {
         outputStream.close();
       }
 
       if (reader != null) {
         reader.close();
       }
 
       if (inputStreamReader != null) {
         inputStreamReader.close();
       }
 
       if (inputStream != null) {
         inputStream.close();
       }
 
     }
 
     return resultBuffer;
   }
 
   public static String convertStreamToString(InputStream is)
   {
     StringBuilder sb1 = new StringBuilder();
     byte[] bytes = new byte[4096];
     int size = 0;
     try
     {
       while ((size = is.read(bytes)) > 0) {
         String str = new String(bytes, 0, size, "UTF-8");
         sb1.append(str);
       }
     } catch (IOException e) {
       e.printStackTrace();
     } finally {
       try {
         is.close();
       } catch (IOException e) {
         e.printStackTrace();
       }
     }
     return sb1.toString();
   }
 }
