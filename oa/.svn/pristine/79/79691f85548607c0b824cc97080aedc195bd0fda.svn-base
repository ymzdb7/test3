<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xoa.dao.department.DepartmentMapper">
    <resultMap id="DepResultMap" type="com.xoa.model.department.Department">
        <id column="DEPT_ID" property="deptId" javaType="int"/>
        <result column="DEPT_NAME" property="deptName" javaType="string"/>
        <result column="TEL_NO" property="telNo" javaType="string"/>
        <result column="FAX_NO" property="faxNo" javaType="string"/>
        <result column="DEPT_ADDRESS" property="deptAddress" javaType="string"/>
        <result column="DEPT_NO" property="deptNo" javaType="string"/>
        <result column="DEPT_CODE" property="deptCode" javaType="string"/>
        <result column="DEPT_PARENT" property="deptParent" javaType="int"/>
        <result column="IS_ORG" property="isOrg" javaType="string"/>
        <result column="ORG_ADMIN" property="orgAdmin" javaType="string"/>
        <result column="DEPT_EMAIL_AUDITS_IDS" property="deptEmailAuditsIds"
                javaType="string"/>
        <result column="WEIXIN_DEPT_ID" property="weixinDeptId"
                javaType="int"/>
        <result column="DINGDING_DEPT_ID" property="dingdingDeptId"
                javaType="int"/>
        <result column="G_DEPT" property="gDept" javaType="byte"/>
        <result column="MANAGER" property="manager" javaType="string"/>
        <result column="ASSISTANT_ID" property="assistantId" javaType="string"/>
        <result column="LEADER1" property="leader1" javaType="string"/>
        <result column="LEADER2" property="leader2" javaType="string"/>
        <result column="DEPT_FUNC" property="deptFunc" javaType="string"/>
        <result column="ClASSIFY_ORG" property="classifyOrg" javaType="int"/>
        <result column="ClASSIFY_ORG_ADMIN" property="classifyOrgAdmin" javaType="string"/>
    </resultMap>
    <select id="getDatagrid" resultMap="DepResultMap">
		SELECT * from department u ORDER BY DEPT_NO
	</select>
    <select id="getChDept"
            resultMap="DepResultMap">
		SELECT "dep" as type, DEPT_ID,DEPT_NAME,DEPT_NO,DEPT_CODE,DEPT_PARENT,ClASSIFY_ORG,ClASSIFY_ORG_ADMIN from department where DEPT_PARENT=#{deptId} ORDER BY RIGHT(DEPT_NO,3)
	</select>

    <select id="getChDept"
            resultMap="DepResultMap" databaseId="oracle">
        SELECT  DEPT_ID,DEPT_NAME,DEPT_NO,DEPT_CODE,DEPT_PARENT,ClASSIFY_ORG,ClASSIFY_ORG_ADMIN from "DEPARTMENT" where DEPT_PARENT=#{deptId} ORDER BY DEPT_NO
    </select>

    <select id="getChDept"
            resultMap="DepResultMap" databaseId="dm">
        SELECT 'dep' as type, DEPT_ID,DEPT_NAME,DEPT_NO,DEPT_CODE,DEPT_PARENT,ClASSIFY_ORG,ClASSIFY_ORG_ADMIN from department where DEPT_PARENT=#{deptId} ORDER BY RIGHT(DEPT_NO,3)
    </select>

    <select id="checkDep"
            resultMap="DepResultMap">
        SELECT * from department where DEPT_NAME=#{deptName}
    </select>

    <select id="getFatherDept"
            resultMap="DepResultMap">
		SELECT * from department where DEPT_ID=#{deptParent}
	</select>

    <select id="getChDeptUser"
            resultType="com.xoa.model.department.Department">
		SELECT "people" as type, u.AVATAR as avatar,u.USER_NAME as userName, u.USER_ID as userId,
		u.UID as uid,u.USER_PRIV_NAME as userPrivName,u.SEX as sex,u.BIRTHDAY as birthday,u.MOBIL_NO as mobilNo,u.MY_STATUS as mystatus from department d,user u
		 where d.DEPT_ID=u.DEPT_ID AND u.not_login!=1 and (d.DEPT_ID=#{deptId}
		 OR (u.DEPT_ID_OTHER LIKE CONCAT('%,',#{deptId},',%') OR u.DEPT_ID_OTHER LIKE CONCAT(#{deptId},',%')) ) ORDER BY d.DEPT_NO, u.USER_PRIV_NO, u.USER_NO
	</select>

    <select id="getChDeptUser"
            resultType="com.xoa.model.department.Department" databaseId="dm">
        SELECT 'people' as type, u.AVATAR as avatar,u.USER_NAME as userName, u.USER_ID as userId,
        u.UID as uid,u.USER_PRIV_NAME as userPrivName,u.SEX as sex,u.BIRTHDAY as birthday,u.MOBIL_NO as mobilNo,u.MY_STATUS as mystatus from department d,"USER" u
        where d.DEPT_ID=u.DEPT_ID and (d.DEPT_ID=#{deptId}
        OR (u.DEPT_ID_OTHER LIKE CONCAT('%,',#{deptId},',%') OR u.DEPT_ID_OTHER LIKE CONCAT(#{deptId},',%')) ) ORDER BY d.DEPT_NO, u.USER_PRIV_NO, u.USER_NO
    </select>

    <select id="getChDeptUser"
            resultType="com.xoa.model.department.Department" databaseId="oracle">
        SELECT 'people' as type, u.AVATAR as avatar,u.USER_NAME as userName, u.USER_ID as userId,
        u."UID" as "uid",u.USER_PRIV_NAME as userPrivName,u.SEX as sex,u.BIRTHDAY as birthday,u.MOBIL_NO as mobilNo,u.MY_STATUS as mystatus from department d,"USER" u
        where d.DEPT_ID=u.DEPT_ID and (d.DEPT_ID=#{deptId}
        OR (u.DEPT_ID_OTHER LIKE CONCAT(CONCAT('%,',#{deptId}),',%') OR u.DEPT_ID_OTHER LIKE CONCAT(#{deptId},',%')) ) ORDER BY d.DEPT_NO, u.USER_PRIV_NO, u.USER_NO
    </select>

    <select id="getCountChDeptUser"
            resultType="Integer">
		select count(*) from user where DEPT_ID in 
	(select DEPT_ID from department where DEPT_NO LIKE CONCAT(#{deptNo},'%'))
	</select>

    <select id="getCountChDeptUser"
            resultType="Integer" databaseId="oracle">
        select count(*) from "USER" where DEPT_ID in
        (select DEPT_ID from department where DEPT_NO LIKE CONCAT(#{deptNo},'%'))
    </select>

    <select id="getCountChDeptUser"
            resultType="Integer" databaseId="dm">
        select count(*) from "USER" where DEPT_ID in
        (select DEPT_ID from department where DEPT_NO LIKE CONCAT(#{deptNo},'%'))
    </select>

    <select id="getDeptNameById" resultType="java.lang.String">
		SELECT DEPT_NAME from department where DEPT_ID=#{deptId}
	</select>
    <select id="getDeptById" resultMap="DepResultMap">
		SELECT * from department where DEPT_ID=#{deptId}
	</select>
    <select id="getDeptByMany" parameterType="com.xoa.model.department.Department" resultType="map">
        select * from department
        where 1=1
        <if test="deptName != null">
            and DEPT_NAME = #{deptName},
        </if>
        <if test="telNo != null">
            and TEL_NO = #{telNo},
        </if>
        <if test="faxNo != null">
            and FAX_NO = #{faxNo},
        </if>
        <if test="deptAddress != null">
            and DEPT_ADDRESS = #{deptAddress},
        </if>
        <if test="deptNo != null">
            and DEPT_NO = #{deptNo},
        </if>
        <if test="deptParent != null">
            and DEPT_PARENT = #{deptParent},
        </if>
        <if test="isOrg != null">
            and IS_ORG = #{isOrg},
        </if>
        <if test="orgAdmin != null">
            and ORG_ADMIN = #{orgAdmin},
        </if>
        <if test="deptEmailAuditsIds != null">
            and DEPT_EMAIL_AUDITS_IDS = #{deptEmailAuditsIds},
        </if>
        <if test="weixinDeptId != null">
            and WEIXIN_DEPT_ID = #{weixinDeptId},
        </if>
        <if test="dingdingDeptId != null">
            and DINGDING_DEPT_ID = #{dingdingDeptId},
        </if>
        <if test="gDept != null">
            and G_DEPT = #{gDept},
        </if>
        <if test="manager != null">
            and MANAGER = #{manager},
        </if>
        <if test="assistantId != null">
            and ASSISTANT_ID = #{assistantId},
        </if>
        <if test="leader1 != null">
            and LEADER1 = #{leader1},
        </if>
        <if test="leader2 != null">
            and LEADER2 = #{leader2},
        </if>
        <if test="deptFunc != null">
            and DEPT_FUNC = #{deptFunc},
        </if>
    </select>
    <delete id="deleteDept">
		DELETE FROM department where DEPT_ID=#{deptId}
	</delete>
    <update id="editDept" parameterType="com.xoa.model.department.Department">
        update department
        <set>
            <if test="deptName != null">
                DEPT_NAME = #{deptName},
            </if>
            <if test="telNo != null">
                TEL_NO = #{telNo},
            </if>
            <if test="faxNo != null">
                FAX_NO = #{faxNo},
            </if>
            <if test="deptAddress != null">
                DEPT_ADDRESS = #{deptAddress},
            </if>
            <if test="deptNo != null">
                DEPT_NO = #{deptNo},
            </if>
            <if test="deptCode != null">
                DEPT_CODE = #{deptCode},
            </if>
            <if test="deptParent != null">
                DEPT_PARENT = #{deptParent},
            </if>
            <if test="isOrg != null">
                IS_ORG = #{isOrg},
            </if>
            <if test="orgAdmin != null">
                ORG_ADMIN = #{orgAdmin},
            </if>
            <if test="deptEmailAuditsIds != null">
                DEPT_EMAIL_AUDITS_IDS = #{deptEmailAuditsIds},
            </if>
            <if test="weixinDeptId != null">
                WEIXIN_DEPT_ID = #{weixinDeptId},
            </if>
            <if test="dingdingDeptId != null">
                DINGDING_DEPT_ID = #{dingdingDeptId},
            </if>
            <if test="gDept != null">
                G_DEPT = #{gDept},
            </if>
            <if test="manager != null">
                MANAGER = #{manager},
            </if>
            <if test="assistantId != null">
                ASSISTANT_ID = #{assistantId},
            </if>
            <if test="leader1 != null">
                LEADER1 = #{leader1},
            </if>
            <if test="leader2 != null">
                LEADER2 = #{leader2},
            </if>
            <if test="deptFunc != null">
                DEPT_FUNC = #{deptFunc},
            </if>
            <if test="classifyOrgAdmin != null">
                ClASSIFY_ORG_ADMIN = #{classifyOrgAdmin},
            </if>
        </set>
        where DEPT_ID = #{deptId}
    </update>
    <insert useGeneratedKeys="true" keyProperty="deptId" id="insertDept" parameterType="com.xoa.model.department.Department">
        <selectKey order="AFTER" keyProperty="deptId" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into department
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="deptId != null">
                DEPT_ID,
            </if>
            <if test="deptName != null">
                DEPT_NAME,
            </if>
            <if test="telNo != null">
                TEL_NO,
            </if>
            <if test="faxNo != null">
                FAX_NO,
            </if>
            <if test="deptAddress != null">
                DEPT_ADDRESS,
            </if>
            <if test="deptNo != null">
                DEPT_NO,
            </if>
            <if test="deptCode != null">
                DEPT_CODE,
            </if>
            <if test="deptParent != null">
                DEPT_PARENT,
            </if>
            <if test="isOrg != null">
                IS_ORG,
            </if>
            <if test="orgAdmin != null">
                ORG_ADMIN,
            </if>
            <if test="deptEmailAuditsIds != null">
                DEPT_EMAIL_AUDITS_IDS,
            </if>
            <if test="weixinDeptId != null">
                WEIXIN_DEPT_ID,
            </if>
            <if test="dingdingDeptId != null">
                DINGDING_DEPT_ID,
            </if>
            <if test="gDept != null">
                G_DEPT,
            </if>
            <if test="manager != null">
                MANAGER,
            </if>
            <if test="assistantId != null">
                ASSISTANT_ID,
            </if>
            <if test="leader1 != null">
                LEADER1,
            </if>
            <if test="leader2 != null">
                LEADER2,
            </if>
            <if test="deptFunc != null">
                DEPT_FUNC,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="deptId != null">
                #{deptId},
            </if>
            <if test="deptName != null">
                #{deptName},
            </if>
            <if test="telNo != null">
                #{telNo},
            </if>
            <if test="faxNo != null">
                #{faxNo},
            </if>
            <if test="deptAddress != null">
                #{deptAddress},
            </if>
            <if test="deptNo != null">
                #{deptNo},
            </if>
            <if test="deptCode != null">
                #{deptCode},
            </if>
            <if test="deptParent != null">
                #{deptParent},
            </if>
            <if test="isOrg != null">
                #{isOrg},
            </if>
            <if test="orgAdmin != null">
                #{orgAdmin},
            </if>
            <if test="deptEmailAuditsIds != null">
                #{deptEmailAuditsIds},
            </if>
            <if test="weixinDeptId != null">
                #{weixinDeptId},
            </if>
            <if test="dingdingDeptId != null">
                #{dingdingDeptId},
            </if>
            <if test="gDept != null">
                #{gDept},
            </if>
            <if test="manager != null">
                #{manager},
            </if>
            <if test="assistantId != null">
                #{assistantId},
            </if>
            <if test="leader1 != null">
                #{leader1},
            </if>
            <if test="leader2 != null">
                #{leader2},
            </if>
            <if test="deptFunc != null">
                #{deptFunc},
            </if>
        </trim>
    </insert>
    <insert useGeneratedKeys="true" keyProperty="deptId" id="insertDept" parameterType="com.xoa.model.department.Department" databaseId="oracle">
        <selectKey order="BEFORE" keyProperty="deptId" resultType="int">
            SELECT DEPARTMENT_DEPT_ID_SEQ.nextval AS  deptId FROM  dual
        </selectKey>
        insert into department
        <trim prefix="(" suffix=")" suffixOverrides=",">

                DEPT_ID,

            <if test="deptName != null">
                DEPT_NAME,
            </if>
            <if test="telNo != null">
                TEL_NO,
            </if>
            <if test="faxNo != null">
                FAX_NO,
            </if>
            <if test="deptAddress != null">
                DEPT_ADDRESS,
            </if>
            <if test="deptNo != null">
                DEPT_NO,
            </if>
            <if test="deptCode != null">
                DEPT_CODE,
            </if>
            <if test="deptParent != null">
                DEPT_PARENT,
            </if>
            <if test="isOrg != null">
                IS_ORG,
            </if>
            <if test="orgAdmin != null">
                ORG_ADMIN,
            </if>
            <if test="deptEmailAuditsIds != null">
                DEPT_EMAIL_AUDITS_IDS,
            </if>
            <if test="weixinDeptId != null">
                WEIXIN_DEPT_ID,
            </if>
            <if test="dingdingDeptId != null">
                DINGDING_DEPT_ID,
            </if>
            <if test="gDept != null">
                G_DEPT,
            </if>
            <if test="manager != null">
                MANAGER,
            </if>
            <if test="assistantId != null">
                ASSISTANT_ID,
            </if>
            <if test="leader1 != null">
                LEADER1,
            </if>
            <if test="leader2 != null">
                LEADER2,
            </if>
            <if test="deptFunc != null">
                DEPT_FUNC,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                #{deptId},
            <if test="deptName != null">
                #{deptName},
            </if>
            <if test="telNo != null">
                #{telNo},
            </if>
            <if test="faxNo != null">
                #{faxNo},
            </if>
            <if test="deptAddress != null">
                #{deptAddress},
            </if>
            <if test="deptNo != null">
                #{deptNo},
            </if>
            <if test="deptCode != null">
                #{deptCode},
            </if>
            <if test="deptParent != null">
                #{deptParent},
            </if>
            <if test="isOrg != null">
                #{isOrg},
            </if>
            <if test="orgAdmin != null">
                #{orgAdmin},
            </if>
            <if test="deptEmailAuditsIds != null">
                #{deptEmailAuditsIds},
            </if>
            <if test="weixinDeptId != null">
                #{weixinDeptId},
            </if>
            <if test="dingdingDeptId != null">
                #{dingdingDeptId},
            </if>
            <if test="gDept != null">
                #{gDept},
            </if>
            <if test="manager != null">
                #{manager},
            </if>
            <if test="assistantId != null">
                #{assistantId},
            </if>
            <if test="leader1 != null">
                #{leader1},
            </if>
            <if test="leader2 != null">
                #{leader2},
            </if>
            <if test="deptFunc != null">
                #{deptFunc},
            </if>
        </trim>
    </insert>
    <!-- 根据部门ID获取部门名字 -->
    <select id="getDeptNameByDeptId" resultType="String">
    SELECT DEPT_NAME FROM department WHERE
    DEPT_ID = #{deptId}
  </select>


    <select id="getDeptIdByDeptName" resultType="String">
        SELECT DEPT_ID FROM department WHERE
        DEPT_NAME = #{deptName} ORDER BY DEPT_PARENT
    </select>

    <select id="getDepartmentByUid" resultMap="DepResultMap">
        select d.DEPT_ID, d.DEPT_NAME  FROM department d, user u WHERE u.DEPT_ID= d.DEPT_ID AND u.UID = #{uid}
    </select>
    <select id="getDepartmentByUid" resultMap="DepResultMap" databaseId="oracle">
        select d.DEPT_ID, d.DEPT_NAME  FROM department d, "USER" u WHERE u.DEPT_ID= d.DEPT_ID AND u."UID" = #{uid}
    </select>
    <select id="getDepartmentByUid" resultMap="DepResultMap" databaseId="dm">
        select d.DEPT_ID, d.DEPT_NAME  FROM department d, "USER" u WHERE u.DEPT_ID= d.DEPT_ID AND u."UID" = #{uid}
    </select>

    <select id="getDepartmentByParet" resultMap="DepResultMap">
        SELECT *,"dep" as type FROM department d where d.DEPT_PARENT=0 ORDER BY DEPT_NO
    </select>

    <select id="getDepartmentByParet" resultMap="DepResultMap" databaseId="dm">
        SELECT *,'dep' as type FROM department d where d.DEPT_PARENT=0 ORDER BY DEPT_NO
    </select>

    <select id="getDepartmentByParet" resultMap="DepResultMap" databaseId="oracle">
        SELECT 'dep' as TYPE, d.* FROM department d where d.DEPT_PARENT=0 ORDER BY DEPT_NO
    </select>

    <select id="getFirstDept" resultMap="DepResultMap">
        SELECT * FROM department d where d.DEPT_NO =(select left(#{deptNo}, 6));
    </select>

    <!--根据部门id进行批量修改部门主管、部门助理-->
    <update id="batchUpdateDeptById" parameterType="com.xoa.model.department.Department">
            update department
            <set>
                <if test="manager!=null">
                    MANAGER = #{manager},
                </if>
                <if test="assistantId!=null">
                    ASSISTANT_ID = #{assistantId}
                </if>
            </set>
            where DEPT_ID = #{deptId}
    </update>
    
    <update id="updateDeptNoByDeptId" parameterType="com.xoa.model.department.Department">
        update department SET DEPT_NO=#{deptNo} where DEPT_ID = #{deptId}
    </update>

    <select id="getDeptIdByParent" resultType="Integer">
        select DEPT_ID from department where DEPT_PARENT=#{deptParent} order by DEPT_NO,DEPT_NAME
    </select>

    <select id="getAllDepartment" resultMap="DepResultMap">
        SELECT  * from department ORDER BY DEPT_NO
    </select>

    <select id="getFatherDeptName" resultType="String">
        SELECT DEPT_NAME from department where DEPT_ID=#{deptParent}
    </select>
    
    <select id="getDeptNames" parameterType="map" resultType="String">
    SELECT DEPT_NAME FROM department WHERE DEPT_ID IN (${checkDept})
    </select>

    <update id="setClassifyOrgByDeptId" parameterType="com.xoa.model.department.Department">
        update department SET ClASSIFY_ORG=#{classifyOrg},ClASSIFY_ORG_ADMIN=#{classifyOrgAdmin} where DEPT_ID=#{deptId}
    </update>

    <select id="getAllClassifyOrg"  resultMap="DepResultMap">
        SELECT * FROM department WHERE ClASSIFY_ORG =1 order by DEPT_NO
    </select>

    <select id="getClassifyOrgByAdmin"  resultMap="DepResultMap" parameterType="Integer">
        SELECT * FROM department WHERE ClASSIFY_ORG =1
         and
        (
          ClASSIFY_ORG_ADMIN like CONCAT('%,',#{uid},',%')
           or
          ClASSIFY_ORG_ADMIN like CONCAT(#{uid},',%')
        )
        and
        DEPT_PARENT=#{deptParent}
    </select>
    <select id="selClaNumByParentId" parameterType="Integer" resultType="Integer">
        select count(*) from department where DEPT_PARENT=#{deptId} and ClASSIFY_ORG=1
    </select>

    <select id="getBydeptNo" parameterType="string" resultMap="DepResultMap">
       select * from department WHERE DEPT_NO LIKE CONCAT(#{deptNo},'%')
    </select>


    <select id="getDepByNo"
            resultMap="DepResultMap">
        SELECT * from department where DEPT_NO=#{deptNo}
    </select>

    <!--根据ID查询部门名称-->
    <select id="departmentOneSelect" parameterType="java.lang.Integer" resultType="java.lang.String">
        select DEPT_NAME from department where DEPT_ID=#{deptId}
    </select>

    <select id="selDeptNoByDeptParent" parameterType="map" resultType="java.lang.String">
        select RIGHT(Dept_NO,3) as deptNo from department where DEPT_PARENT = #{deptParent}
        <if test="deptNo!=null">
            and Dept_NO!=#{deptNo}
        </if>
    </select>
    <select id="selDeptNoByDeptParent" parameterType="map" resultType="java.lang.String" databaseId="oracle">
        select SUBSTR(Dept_NO,LENGTH(Dept_NO)-2) as deptNo from department where DEPT_PARENT = #{deptParent,jdbcType=INTEGER}
        <if test="deptNo!=null">
            and Dept_NO!=#{deptNo}
        </if>
    </select>
    <select id="selDeptNoByDeptParent" parameterType="map" resultType="java.lang.String" databaseId="dm">
        select SUBSTR(Dept_NO,LENGTH(Dept_NO)-2) as deptNo from department where DEPT_PARENT = #{deptParent,jdbcType=INTEGER}
        <if test="deptNo!=null">
            and Dept_NO!=#{deptNo}
        </if>
    </select>
    <select id="selByLikeDeptName" resultMap="DepResultMap" parameterType="java.lang.String">
        SELECT * from department where DEPT_NAME like concat('%',#{deptName},'%')
    </select>

    <select id="selByLikeDeptName" resultMap="DepResultMap" parameterType="java.lang.String" databaseId="oracle">
        SELECT * from department where DEPT_NAME like concat('%',concat(#{deptName},'%'))
    </select>

    <select id="selByLikeDeptName" resultMap="DepResultMap" parameterType="java.lang.String" databaseId="dm">
        SELECT * from department where DEPT_NAME like concat('%',concat(#{deptName},'%'))
    </select>

    <select id="getDeptManagerIdByDeptId" parameterType="int" resultType="string">
        select MANAGER from department where DEPT_ID = #{deptId}
    </select>

    <select id="getDeptByName" resultMap="DepResultMap">
        select * from department where dept_name = #{deptName}
    </select>

    <select id="getDingdingIdByDeptId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select DINGDING_DEPT_ID from department where DEPT_ID = #{deptId}
    </select>
    
    <select id="getParentDingdingId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT
	d.DINGDING_DEPT_ID
FROM
	department d
WHERE
	DEPT_ID IN (
		SELECT
			d.DEPT_PARENT
		FROM
			department d
		WHERE
			d.DEPT_ID = #{deptId}
	)
    </select>
    
    <select id="selDeptByIds" resultMap="DepResultMap" >
        select * from department where dept_id in
        <foreach collection="ids" item="id" open="(" close=")" separator="," >
            #{id}
        </foreach>
    </select>

    <select id="selByNameAndParent" parameterType="map" resultMap="DepResultMap">
        select * from department where DEPT_NAME=#{deptName} and DEPT_PARENT=#{deptParent};
    </select>
</mapper>