/*      */ package com.xoa.controller.users;
/*      */ 
/*      */ import com.xoa.dao.users.UserFunctionMapper;
/*      */ import com.xoa.model.modulePriv.ModulePriv;
/*      */ import com.xoa.model.users.UserExt;
/*      */ import com.xoa.model.users.Users;
/*      */ import com.xoa.service.syspara.SysParaService;
/*      */ import com.xoa.service.users.UsersService;
/*      */ import com.xoa.util.AjaxJson;
import com.xoa.util.Constant;
/*      */ import com.xoa.util.ExcelUtil;
/*      */ import com.xoa.util.FileUploadUtil;
/*      */ import com.xoa.util.ToJson;
/*      */ import com.xoa.util.common.ImgUpUtils;
/*      */ import com.xoa.util.common.L;
/*      */ import com.xoa.util.common.StringUtils;
/*      */ import com.xoa.util.common.log.FileUtils;
/*      */ import com.xoa.util.common.session.SessionUtils;
/*      */ import com.xoa.util.common.wrapper.BaseWrapper;
/*      */ import com.xoa.util.dataSource.ContextHolder;
/*      */ import java.io.File;
/*      */ import java.io.IOException;
/*      */ import java.io.PrintStream;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.HashMap;
/*      */ import java.util.List;
/*      */ import java.util.Map;
/*      */ import javax.annotation.Resource;
/*      */ import javax.servlet.ServletContext;
/*      */ import javax.servlet.ServletOutputStream;
/*      */ import javax.servlet.http.HttpServletRequest;
/*      */ import javax.servlet.http.HttpServletResponse;
/*      */ import javax.servlet.http.HttpSession;
/*      */ import org.apache.log4j.Logger;
/*      */ import org.apache.poi.hssf.usermodel.HSSFWorkbook;
/*      */ import org.springframework.beans.factory.annotation.Autowired;
/*      */ import org.springframework.stereotype.Controller;
/*      */ import org.springframework.ui.Model;
/*      */ import org.springframework.web.bind.annotation.RequestMapping;
/*      */ import org.springframework.web.bind.annotation.RequestParam;
/*      */ import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
/*      */ 
/*      */ @Controller
/*      */ public class UsersController
/*      */ {
/*   53 */   private Logger loger = Logger.getLogger(UsersController.class);
/*      */ 
/*      */   @Resource
/*      */   private UsersService usersService;
/*      */ 
/*      */   @Resource
/*      */   SysParaService sysParaService;
/*      */ 
/*      */   @Resource
/*      */   private UserFunctionMapper userFunctionMapper;
/*      */ 
/*      */   @Autowired
/*      */   ImgUpUtils imgUpUtils;
/*      */ 
/*   65 */   @RequestMapping({"/addUsers"})
/*      */   public String addUser(HttpServletRequest request) { ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*   67 */     Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*   68 */     if (!this.sysParaService.checkIsHaveSecure(user, Integer.valueOf(8))) {
/*   69 */       return "app/common/development";
/*      */     }
/*   71 */     return "app/sys/addUser";
/*      */   }
/*      */ 
/*      */   @RequestMapping({"/controlpanel/theme"})
/*      */   public String theme()
/*      */   {
/*   82 */     return "/app/url/theme";
/*      */   }
/*      */ 
/*      */   @RequestMapping({"/controlpanel/personInfor"})
/*      */   public String personInfo(Model model, HttpServletRequest request) {
/*   88 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*   89 */     if (!StringUtils.checkNull(users.getUserId()).booleanValue())
/*   90 */       model.addAttribute("userId", users.getUserId());
/*      */     else {
/*   92 */       model.addAttribute("userId", "");
/*      */     }
/*   94 */     return "/app/url/personInfor";
/*      */   }
/*      */ 
/*      */   @RequestMapping({"/controlpanel/count"})
/*      */   public String count() {
/*  100 */     return "/app/url/count";
/*      */   }
/*      */   @RequestMapping({"/controlpanel/modifyInfo"})
/*      */   public String modifyInfo() {
/*  105 */     return "/app/url/modifyInfo";
/*      */   }
/*      */   @RequestMapping({"/user/goQueryExportUsers"})
/*      */   public String goQueryExportUsers() {
/*  110 */     return "app/user/queryExportUsers";
/*      */   }
/*      */   @RequestMapping({"/user/goImportUsers"})
/*      */   public String goImportUsers() {
/*  115 */     return "app/user/importUsers";
/*      */   }
/*      */   @RequestMapping({"/user/goEditUserBatch"})
/*      */   public String goEditUserBatch() {
/*  120 */     return "app/user/editUserBatch";
/*      */   }
/*      */   @RequestMapping({"/user/goImportEduUsers"})
/*      */   public String goImportEduUsers() {
/*  125 */     return "app/user/importEduUsers";
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/addUser"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> addUser(Users user, UserExt userExt, @RequestParam(required=false) String deptIds, @RequestParam(required=false) String privIds, @RequestParam(required=false) String userIds, HttpServletRequest request)
/*      */   {
/*  140 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  142 */     ModulePriv modulePriv = null;
/*  143 */     if ((!StringUtils.checkNull(deptIds).booleanValue()) || (!StringUtils.checkNull(privIds).booleanValue()) || (!StringUtils.checkNull(userIds).booleanValue())) {
/*  144 */       modulePriv = new ModulePriv();
/*  145 */       modulePriv.setDeptId(deptIds);
/*  146 */       modulePriv.setPrivId(privIds);
/*  147 */       modulePriv.setUserId(userIds);
/*      */     }
/*  149 */     return this.usersService.addUser(user, userExt, modulePriv, request);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/editUser"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> editUser(Users user, UserExt userExt, @RequestParam(required=false) String deptIds, @RequestParam(required=false) String privIds, @RequestParam(required=false) String userIds, HttpServletRequest request)
/*      */   {
/*  164 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  166 */     ModulePriv modulePriv = null;
/*  167 */     if ((!StringUtils.checkNull(deptIds).booleanValue()) || (!StringUtils.checkNull(privIds).booleanValue()) || (!StringUtils.checkNull(userIds).booleanValue())) {
/*  168 */       modulePriv = new ModulePriv();
/*  169 */       modulePriv.setDeptId(deptIds);
/*  170 */       modulePriv.setPrivId(privIds);
/*  171 */       modulePriv.setUserId(userIds);
/*      */     }
/*  173 */     return this.usersService.editUser(user, userExt, modulePriv);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/edit"})
/*      */   public ToJson<Users> edit(Users user, @RequestParam(value="userExt", required=false) UserExt userExt, @RequestParam(value="imgFile", required=false) MultipartFile imageFile, HttpServletRequest request)
/*      */     throws IllegalStateException, IOException
/*      */   {
/*  196 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  198 */     String realPath = request.getSession().getServletContext().getRealPath("/");
/*  199 */     String resourcePath = "ui/img/user";
/*  200 */     if ((imageFile != null) && 
/*  201 */       (FileUploadUtil.allowUpload(imageFile.getContentType()))) {
/*  202 */       String fileName = FileUploadUtil.rename(imageFile.getOriginalFilename());
/*  203 */       File dir = new File(realPath + resourcePath);
/*  204 */       if (!dir.exists()) {
/*  205 */         dir.mkdirs();
/*      */       }
/*  207 */       File file = new File(dir, fileName);
/*  208 */       imageFile.transferTo(file);
/*  209 */       user.setAvatar(fileName);
/*      */     }
/*      */ 
/*  212 */     return this.usersService.editUser(user, userExt, null);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/deleteUser"})
/*      */   public ToJson<Users> deletesUser(String uids, HttpServletRequest request)
/*      */   {
/*  228 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  230 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  232 */       this.usersService.deleteUser(uids);
/*  233 */       json.setMsg("OK");
/*  234 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  236 */       e.printStackTrace();
/*  237 */       json.setMsg(e.getMessage());
/*  238 */       json.setFlag(1);
/*      */     }
/*  240 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/findUserByuid"}, produces={"application/json;charset=UTF-8"}, method={org.springframework.web.bind.annotation.RequestMethod.GET})
/*      */   public ToJson<Users> findUserByuid(int uid, HttpServletRequest request)
/*      */   {
/*  255 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  257 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  259 */       Users users = this.usersService.findUserByuid(uid);
/*      */ 
/*  263 */       json.setObject(users);
/*  264 */       json.setMsg("OK");
/*  265 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  267 */       e.printStackTrace();
/*  268 */       json.setMsg(e.getMessage());
/*      */     }
/*  270 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/findUserByuserId"}, produces={"application/json;charset=UTF-8"}, method={org.springframework.web.bind.annotation.RequestMethod.GET})
/*      */   public ToJson<Users> findUserByuserId(String userId, HttpServletRequest request)
/*      */   {
/*  286 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  288 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  290 */       if (StringUtils.checkNull(userId).booleanValue()) {
/*  291 */         json.setMsg("error");
/*  292 */         json.setFlag(1);
/*      */       } else {
/*  294 */         Users users = this.usersService.findUsersByuserId(userId);
/*      */ 
/*  298 */         json.setObject(users);
/*  299 */         json.setMsg("OK");
/*  300 */         json.setFlag(0);
/*      */       }
/*      */     }
/*      */     catch (Exception e) {
/*  304 */       json.setMsg(e.getMessage());
/*      */     }
/*  306 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getAlluser"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getAllUser(Map<String, Object> maps, Integer page, Integer pageSize, boolean useFlag)
/*      */   {
/*  325 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  327 */       List list = this.usersService.getAlluser(maps, page, pageSize, useFlag);
/*  328 */       json.setObj(list);
/*  329 */       json.setMsg("OK");
/*  330 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  332 */       json.setMsg(e.getMessage());
/*  333 */       System.out.println(e.getMessage());
/*      */     }
/*  335 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getDeptByMany"}, method={org.springframework.web.bind.annotation.RequestMethod.POST})
/*      */   public ToJson<Users> getDeptByMany(Users users, HttpServletRequest request)
/*      */   {
/*  350 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  352 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  354 */       List list = this.usersService.getUserByMany(users);
/*  355 */       json.setObj(list);
/*  356 */       json.setMsg("OK");
/*  357 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  359 */       json.setMsg(e.getMessage());
/*      */     }
/*  361 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getUserAndDept"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getUserAndDept(Map<String, Object> maps, Integer page, Integer pageSize, boolean useFlag, HttpServletRequest request)
/*      */   {
/*  380 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  382 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  384 */       List list = this.usersService.getUserAndDept(maps, page, pageSize, useFlag);
/*  385 */       json.setObj(list);
/*  386 */       json.setMsg("OK");
/*  387 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  389 */       json.setMsg(e.getMessage());
/*  390 */       System.out.println(e.getMessage());
/*      */     }
/*  392 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getBySearch"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getBySearch(HttpServletRequest request, Map<String, Object> maps)
/*      */   {
/*  412 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  414 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  416 */       request.setCharacterEncoding("UTF-8");
/*  417 */       String search = request.getParameter("search");
/*      */ 
/*  419 */       maps = new HashMap();
/*  420 */       maps.put("byName", search);
/*  421 */       maps.put("userId", search);
/*  422 */       maps.put("userName", search);
/*  423 */       maps.put("userPrivName", search);
/*  424 */       maps.put("deptName", search);
/*  425 */       List list = this.usersService.getBySearch(maps);
/*  426 */       json.setObj(list);
/*  427 */       json.setMsg("OK");
/*  428 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  430 */       json.setMsg(e.getMessage());
/*  431 */       System.out.println(e.getMessage());
/*      */     }
/*  433 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getByDeptId"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getByDeptId(HttpServletRequest request, Map<String, Object> maps, Integer page, Integer pageSize, boolean useFlag)
/*      */   {
/*  454 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  456 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  458 */       request.setCharacterEncoding("UTF-8");
/*  459 */       int deptId = Integer.parseInt(new String(request.getParameter("deptId").getBytes("ISO-8859-1"), "UTF-8"));
/*  460 */       maps = new HashMap();
/*  461 */       maps.put("deptId", Integer.valueOf(deptId));
/*  462 */       List list = this.usersService.getByDeptId(maps, page, pageSize, useFlag);
/*  463 */       json.setObj(list);
/*  464 */       json.setMsg("OK");
/*  465 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  467 */       e.printStackTrace();
/*  468 */       json.setMsg(e.getMessage());
/*  469 */       System.out.println(e.getMessage());
/*      */     }
/*  471 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getByUid"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getByUid(int uid, HttpServletRequest request)
/*      */   {
/*  486 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  488 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  490 */       Users user = this.usersService.getByUid(uid);
/*  491 */       json.setObject(user);
/*  492 */       json.setMsg("OK");
/*  493 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  495 */       json.setMsg(e.getMessage());
/*  496 */       System.out.println(e.getMessage());
/*      */     }
/*  498 */     return json;
/*      */   }
/*  504 */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getUserNameById"}, method={org.springframework.web.bind.annotation.RequestMethod.GET})
/*      */   public ToJson<Users> getUserNameById(String userIds, HttpServletRequest request) { ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  506 */     ToJson json = new ToJson(0, null);
/*      */     try
/*      */     {
/*  509 */       String userName = this.usersService.getUserNameById(userIds);
/*  510 */       json.setObject(userName);
/*  511 */       json.setMsg("OK");
/*  512 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  514 */       json.setMsg(e.getMessage());
/*      */     }
/*  516 */     return json;
/*      */   }
/*      */ 
/*      */   @RequestMapping(value={"/user/xsu"}, method={org.springframework.web.bind.annotation.RequestMethod.GET})
/*      */   public String xs(HttpServletRequest request)
/*      */   {
/*  523 */     return "app/test/xs";
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/getUserByCondition"})
/*      */   public ToJson<Users> getUserByCondition(HttpServletRequest request, Users users)
/*      */   {
/*  539 */     ToJson json = new ToJson(0, null);
/*      */     try
/*      */     {
/*  542 */       List userList = this.usersService.getUsersByCondition(users);
/*  543 */       json.setObject(userList);
/*  544 */       json.setMsg("OK");
/*  545 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  547 */       json.setMsg(e.getMessage());
/*      */     }
/*  549 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/getUserOnline"})
/*      */   public ToJson<Users> getUserOnline(HttpServletRequest request)
/*      */   {
/*  562 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  565 */     ToJson json = new ToJson(0, null);
/*      */     try
/*      */     {
/*  568 */       List userList = this.usersService.getUsersOnline();
/*  569 */       json.setObject(userList);
/*  570 */       json.setMsg("OK");
/*  571 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  573 */       json.setMsg(e.getMessage());
/*      */     }
/*  575 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/getUserbyCondition"})
/*      */   public ToJson<Users> getUserbyCondition(@RequestParam(value="userId", required=false, defaultValue="") String userId, @RequestParam(value="userName", required=false, defaultValue="") String userName, @RequestParam(value="sex", required=false, defaultValue="") String sex, @RequestParam(value="deptId", required=false, defaultValue="") String deptId, @RequestParam(value="userPrivNo", required=false, defaultValue="") String userPrivNo, @RequestParam("choice") String choice, HttpServletRequest request, HttpServletResponse response)
/*      */     throws Exception
/*      */   {
/*  589 */     String sqlType = Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse");
/*      */ 
/*  591 */     ContextHolder.setConsumerType(sqlType);
/*  592 */     if ("-1".equals(deptId)) {
/*  593 */       deptId = "";
/*      */     }
/*  595 */     Map maps = new HashMap();
/*  596 */     maps.put("userId", userId);
/*  597 */     maps.put("userName", userName);
/*  598 */     maps.put("sex", sex);
/*  599 */     maps.put("deptId", deptId);
/*  600 */     maps.put("userPrivNo", userPrivNo);
/*  601 */     ToJson usersJson = new ToJson();
/*  602 */     List userToJson = null;
/*      */     try {
/*  604 */       userToJson = this.usersService.getUserbyCondition(maps);
/*      */     } catch (Exception e) {
/*  606 */       e.printStackTrace();
/*      */     }
/*  608 */     if ("1".equals(choice)) {
/*  609 */       if (userToJson.size() > 0) {
/*  610 */         usersJson.setFlag(0);
/*  611 */         usersJson.setMsg("ok");
/*  612 */         usersJson.setObj(userToJson);
/*      */       } else {
/*  614 */         usersJson.setFlag(1);
/*  615 */         usersJson.setMsg("err");
/*      */       }
/*  617 */     } else if ("2".equals(choice)) {
/*      */       try {
/*  619 */         HSSFWorkbook workbook1 = ExcelUtil.makeExcelHead("用户信息导出", 9);
/*  620 */         String[] secondTitles = { "部门", "姓名", "角色", "辅助角色", "在线时长", "性别", "在线时长", "工作电话", "部门电话", "手机", "电子邮件" };
/*  621 */         HSSFWorkbook workbook2 = ExcelUtil.makeSecondHead(workbook1, secondTitles);
/*  622 */         Users user = new Users();
/*      */ 
/*  624 */         String[] beanProperty = { "deptName", "userName", "userPrivName", "roleAuxiliaryName", "online", "sex", "online", "telNoDept", "telNoDept", "departmentPhone", "email" };
/*      */ 
/*  626 */         HSSFWorkbook workbook = ExcelUtil.exportExcelData(workbook2, userToJson, beanProperty);
/*  627 */         ServletOutputStream out = response.getOutputStream();
/*      */ 
/*  629 */         String filename = "用户信息导出.xls";
/*  630 */         filename = FileUtils.encodeDownloadFilename(filename, request.getHeader("user-agent"));
/*      */ 
/*  632 */         response.setContentType("application/vnd.ms-excel");
/*  633 */         response.setHeader("content-disposition", "attachment;filename=" + filename);
/*      */ 
/*  635 */         workbook.write(out);
/*  636 */         out.close();
/*      */       } catch (Exception e) {
/*  638 */         e.printStackTrace();
/*      */       }
/*      */     } else {
/*  641 */       usersJson.setFlag(1);
/*  642 */       usersJson.setMsg("err");
/*      */     }
/*      */ 
/*  645 */     return usersJson;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/getUsersByDeptId"})
/*      */   public ToJson<Users> getUsersByDeptId(HttpServletRequest request, String deptId)
/*      */   {
/*  657 */     ToJson json = new ToJson();
/*  658 */     List usersList = new ArrayList();
/*      */     try {
/*  660 */       if (StringUtils.checkNull(deptId).booleanValue()) {
/*  661 */         Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  662 */         usersList = this.usersService.getUsersByDeptId(users.getDeptId());
/*      */       } else {
/*  664 */         usersList = this.usersService.getUsersByDeptId(Integer.valueOf(deptId));
/*      */       }
/*  666 */       json.setObj(usersList);
/*  667 */       json.setMsg("ok");
/*  668 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  670 */       json.setMsg("err");
/*  671 */       json.setFlag(1);
/*      */     }
/*  673 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/getNullPwUsers"})
/*      */   public ToJson<Users> getNullPwUsers(@RequestParam(value="deptId", required=false) Integer deptId)
/*      */   {
/*  686 */     ToJson json = new ToJson();
/*      */     try {
/*  688 */       List nullPwUsers = this.usersService.getNullPwUsers(deptId);
/*  689 */       json.setObj(nullPwUsers);
/*  690 */       json.setMsg("ok");
/*  691 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  693 */       e.printStackTrace();
/*  694 */       json.setMsg("err");
/*  695 */       json.setFlag(1);
/*      */     }
/*  697 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getUsers"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getByNotLogin(HttpServletRequest request, Integer deptId, String notLogin, Map<String, Object> maps, Integer page, Integer pageSize, boolean useFlag)
/*      */   {
/*  717 */     ToJson json = new ToJson(0, null);
/*  718 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  719 */     String userFunctionStr = this.userFunctionMapper.getUserFuncIdStr(users.getUserId());
/*  720 */     String[] f = userFunctionStr.split(",");
/*  721 */     if (!Arrays.asList(f).contains("33")) {
/*  722 */       json.setFlag(1);
/*  723 */       json.setMsg("越权");
/*  724 */       return json;
/*      */     }
/*      */     try
/*      */     {
/*  728 */       maps = new HashMap();
/*  729 */       if (deptId != null) {
/*  730 */         maps.put("deptId", deptId);
/*      */       }
/*  732 */       if ((notLogin != null) && (notLogin != "")) {
/*  733 */         maps.put("notLogin", notLogin);
/*      */       }
/*  735 */       List list = this.usersService.getByDeptId(maps, page, pageSize, useFlag);
/*  736 */       json.setObj(list);
/*  737 */       json.setMsg("OK");
/*  738 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  740 */       e.printStackTrace();
/*  741 */       json.setMsg(e.getMessage());
/*  742 */       System.out.println(e.getMessage());
/*      */     }
/*  744 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/clearPassword"})
/*      */   public ToJson<Users> clearPassword(String uids)
/*      */   {
/*  756 */     ToJson json = new ToJson();
/*      */     try {
/*  758 */       this.usersService.clearPassword(uids);
/*  759 */       json.setMsg("ok");
/*  760 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  762 */       e.printStackTrace();
/*  763 */       json.setMsg("err");
/*  764 */       json.setFlag(1);
/*      */     }
/*  766 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/clearOnLine"})
/*      */   public ToJson<Users> clearOnLine(String uids)
/*      */   {
/*  778 */     ToJson json = new ToJson();
/*      */     try {
/*  780 */       this.usersService.clearOnLine(uids);
/*  781 */       json.setMsg("ok");
/*  782 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  784 */       e.printStackTrace();
/*  785 */       json.setMsg("err");
/*  786 */       json.setFlag(1);
/*      */     }
/*  788 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/setNotLogin"})
/*      */   public ToJson<Users> setNotLogin(String uids)
/*      */   {
/*  800 */     ToJson json = new ToJson();
/*      */     try {
/*  802 */       this.usersService.setNotLogin(uids);
/*  803 */       json.setMsg("ok");
/*  804 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  806 */       e.printStackTrace();
/*  807 */       json.setMsg("err");
/*  808 */       json.setFlag(1);
/*      */     }
/*  810 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/editUsersDeptId"})
/*      */   public ToJson<Users> editUsersDeptId(Integer deptId, String uids)
/*      */   {
/*  823 */     ToJson json = new ToJson();
/*      */     try {
/*  825 */       this.usersService.editUsersDetId(deptId, uids);
/*  826 */       json.setMsg("ok");
/*  827 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  829 */       e.printStackTrace();
/*  830 */       json.setMsg("err");
/*  831 */       json.setFlag(1);
/*      */     }
/*  833 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"user/getUsersByUids"})
/*      */   public ToJson<Users> getUsersByUids(String uids)
/*      */   {
/*  845 */     ToJson json = new ToJson();
/*      */     try {
/*  847 */       List usersByUids = this.usersService.getUsersByUids(uids);
/*  848 */       json.setObj(usersByUids);
/*  849 */       json.setMsg("ok");
/*  850 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  852 */       e.printStackTrace();
/*  853 */       json.setMsg("err");
/*  854 */       json.setFlag(1);
/*      */     }
/*  856 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"users/addAndApplicationUsers"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> addAndApplicationUsers(HttpServletRequest request, Users users)
/*      */   {
/*  873 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  875 */     ToJson json = new ToJson(0, null);
/*      */     try {
/*  877 */       this.usersService.updateUserTheme(users, request);
/*  878 */       json.setMsg("ok");
/*  879 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/*  881 */       json.setMsg(e.getMessage());
/*      */     }
/*  883 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/users/showInformation"})
/*      */   public ToJson<Users> selectList(HttpServletRequest request)
/*      */   {
/*  899 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  901 */     ToJson json = new ToJson(1, "error");
/*      */     try {
/*  903 */       Users users = new Users();
/*  904 */       List list = this.usersService.selectList(users);
/*  905 */       if (list.size() > 0) {
/*  906 */         json.setObj(list);
/*  907 */         json.setMsg("ok");
/*  908 */         json.setFlag(0);
/*      */       } else {
/*  910 */         json.setMsg("没有数据！");
/*  911 */         json.setFlag(1);
/*      */       }
/*      */     } catch (Exception e) {
/*  914 */       e.printStackTrace();
/*  915 */       json.setMsg(e.getMessage());
/*      */     }
/*  917 */     return json;
/*      */   }
/*      */ 
/*      */   @RequestMapping({"/editPwd"})
/*      */   @ResponseBody
/*      */   public ToJson<Object> editPwd(HttpServletRequest request, Users user, String newPwd)
/*      */   {
/*  932 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  934 */     ToJson json = new ToJson(0, null);
/*      */ 
/*  936 */     String msg = null;
/*      */     try
/*      */     {
/*  939 */       msg = this.usersService.editPwd(request, user, newPwd);
/*      */ 
/*  941 */       if ("ok".equals(msg)) {
/*  942 */         json.setMsg("ok");
/*  943 */         json.setFlag(0);
/*  944 */       } else if ("原密码错误".equals(msg)) {
/*  945 */         json.setFlag(1);
/*  946 */         json.setMsg(msg);
/*      */       }
/*      */     } catch (Exception e) {
/*  949 */       json.setMsg("1");
/*  950 */       json.setMsg("修改失败");
/*  951 */       L.e(new Object[] { "user editPwd:" + e });
/*      */     }
/*  953 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/getLoginUser"})
/*      */   public ToJson<String> getLoginUser(HttpServletRequest request)
/*      */   {
/*  967 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  969 */     ToJson json = new ToJson(0, null);
/*      */ 
/*  971 */     String msg = null;
/*      */     try
/*      */     {
/*  974 */       Users user = this.usersService.getLoginUser(request);
/*  975 */       if (user != null) {
/*  976 */         json.setMsg("ok");
/*  977 */         json.setFlag(0);
/*  978 */         json.setObject(user);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/*  984 */       json.setMsg(e.getMessage());
/*  985 */       L.e(new Object[] { "user getLoginUser:" + e });
/*      */     }
/*  987 */     return json;
/*      */   }
/*  993 */   @ResponseBody
/*      */   @RequestMapping({"/getUsersByuserId"})
/*      */   public ToJson<String> getUsersByuserId(HttpServletRequest request) { ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/*  995 */     ToJson json = new ToJson(0, null);
/*  996 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*      */ 
/*  998 */     String msg = null;
/*      */     try
/*      */     {
/* 1001 */       Users user = this.usersService.getUsersByuserId(users.getUserId());
/* 1002 */       if (user != null) {
/* 1003 */         json.setMsg("ok");
/* 1004 */         json.setFlag(0);
/* 1005 */         json.setObject(user);
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/* 1011 */       json.setMsg(e.getMessage());
/* 1012 */       L.e(new Object[] { "user getUsersByuserId:" + e });
/*      */     }
/* 1014 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"user/getNewUsers"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> getNewUsers()
/*      */   {
/* 1026 */     return this.usersService.getNewUsers();
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getUserByuid"}, produces={"application/json;charset=UTF-8"}, method={org.springframework.web.bind.annotation.RequestMethod.GET})
/*      */   public ToJson<Users> getUserByuid(int uid, HttpServletRequest request)
/*      */   {
/* 1038 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/* 1040 */     ToJson json = new ToJson(0, null);
/*      */     try {
/* 1042 */       Users users = this.usersService.getUserByUid(uid);
/*      */ 
/* 1046 */       json.setObject(users);
/* 1047 */       json.setMsg("OK");
/* 1048 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/* 1050 */       e.printStackTrace();
/* 1051 */       json.setMsg(e.getMessage());
/*      */     }
/* 1053 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/users/getUserTheme"}, produces={"application/json;charset=UTF-8"}, method={org.springframework.web.bind.annotation.RequestMethod.POST})
/*      */   public ToJson<Users> getUserTheme(HttpServletRequest request)
/*      */   {
/* 1067 */     ContextHolder.setConsumerType(Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"));
/*      */ 
/* 1069 */     ToJson json = new ToJson(0, null);
/*      */ 
/* 1071 */     String msg = null;
/*      */     try
/*      */     {
/* 1074 */       Users user = this.usersService.getLoginUserTheme(request);
/* 1075 */       json.setMsg("ok");
/* 1076 */       json.setFlag(0);
/* 1077 */       json.setObject(user);
/*      */     } catch (Exception e) {
/* 1079 */       json.setMsg(e.getMessage());
/* 1080 */       L.e(new Object[] { "user getUserTheme:" + e });
/*      */     }
/* 1082 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"user/queryExportUsers"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> queryExportUsers(HttpServletRequest request, HttpServletResponse response, Users user, String sortType, String isExport, String notLogin)
/*      */   {
/* 1098 */     return this.usersService.queryExportUsers(request, response, user, sortType, isExport, notLogin);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/insertImportUsers"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> insertImportUsers(HttpServletRequest request, HttpServletResponse response, HttpSession session, MultipartFile file, String ifUpdate, String psWord, String userPriv)
/*      */   {
/* 1113 */     return this.usersService.insertImportUsers(request, response, session, file, ifUpdate, psWord, userPriv);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/insertImportUsersByEdu"}, produces={"application/json;charset=UTF-8"})
/*      */   public AjaxJson insertImportUsersByEdu(HttpServletRequest request, HttpServletResponse response, HttpSession session, MultipartFile file, String ifUpdate, String pw, String userPriv, @RequestParam(value="rule", required=false) String rule)
/*      */   {
/* 1130 */     return this.usersService.insertImportUsersByEdu(request, response, session, file, ifUpdate, pw, userPriv, rule);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/editUserBatch"}, produces={"application/json;charset=UTF-8"}, method={org.springframework.web.bind.annotation.RequestMethod.POST})
/*      */   public ToJson<Users> editUserBatch(Users user, UserExt userExt, @RequestParam(required=false) String modulePrivIds, @RequestParam(required=false) String privIds, @RequestParam(required=false) String deptIds, @RequestParam(required=false) String uids, HttpServletRequest request)
/*      */   {
/* 1151 */     return this.usersService.editUserBatch(user, userExt, modulePrivIds, privIds, deptIds, uids, request);
/*      */   }
/* 1157 */   @ResponseBody
/*      */   @RequestMapping(value={"/user/singleSearch"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Users> singleSearch(HttpServletRequest request, String searchData) { return this.usersService.singleSearch(searchData); } 
/*      */   @ResponseBody
/*      */   @RequestMapping(value={"/user/getAnalysis"}, produces={"application/json;charset=UTF-8"})
/*      */   public ToJson<Object> userAnalysis(String type, HttpServletRequest request) {
/* 1163 */     return this.usersService.userAnalysis(type);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/editUserExt"})
/*      */   public ToJson<Users> editUserExt(HttpServletRequest request, MultipartFile imageFile, Users users, UserExt userExt)
/*      */     throws IllegalStateException, IOException
/*      */   {
/* 1177 */     return this.usersService.editUserExt(request, imageFile, users, userExt);
/*      */   }
/* 1183 */   @ResponseBody
/*      */   @RequestMapping({"/user/editUserSign"})
/*      */   public ToJson editUserSign(HttpServletRequest request, String sign) { return this.usersService.editUserSign(request, sign); } 
/* 1188 */   @ResponseBody
/*      */   @RequestMapping({"/user/userCookie"})
/*      */   public ToJson userCookie(HttpServletRequest request) { Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/* 1189 */     ToJson usersToJson = new ToJson();
/* 1190 */     usersToJson.setFlag(0);
/* 1191 */     usersToJson.setMsg("ok");
/* 1192 */     usersToJson.setObject(users);
/* 1193 */     return usersToJson;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/selectUserAllInfoByName"})
/*      */   public ToJson<Users> selectUserAllInfoByName(String byname, HttpServletRequest req)
/*      */   {
/* 1205 */     ToJson json = new ToJson(0, null);
/*      */     try
/*      */     {
/* 1208 */       Users user = this.usersService.selectUserAllInfoByName(byname, req);
/* 1209 */       json.setObject(user);
/* 1210 */       json.setMsg("OK");
/* 1211 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/* 1213 */       json.setMsg(e.getMessage());
/*      */     }
/* 1215 */     return json;
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/upload"})
/*      */   public BaseWrapper uploadImg(HttpServletRequest request, MultipartFile file)
/*      */   {
/* 1227 */     return this.usersService.uploadImg(request, file);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/imgae/update"})
/*      */   public BaseWrapper updateImg(HttpServletRequest request)
/*      */   {
/* 1236 */     return this.imgUpUtils.updateUserImgaes(request);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/editUserExtNew"})
/*      */   public ToJson<Users> editUserExtNew(HttpServletRequest request, Users users, UserExt userExt)
/*      */     throws IllegalStateException, IOException
/*      */   {
/* 1248 */     return this.usersService.editUserExtNew(request, users, userExt);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/getByName"})
/*      */   public ToJson<Users> getByName(String name)
/*      */   {
/* 1261 */     return this.usersService.getByName(name);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/getuserNameByDeptId"})
/*      */   public ToJson getuserNameByDeptId(String deptId)
/*      */   {
/* 1275 */     if (deptId.endsWith(",")) {
/* 1276 */       deptId = deptId.substring(0, deptId.length() - 1);
/*      */     }
/* 1278 */     return this.usersService.getuserNameByDeptId(Integer.valueOf(deptId));
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/selectuidByName"})
/*      */   public ToJson selectuidByName(String userName)
/*      */   {
/* 1288 */     return this.usersService.selectuidByName(userName);
/*      */   }
/*      */ 
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/getUserDepartmentUserexe"})
/*      */   public ToJson getUserDepartmentUserexe(String deptId, String dutyType, String uids)
/*      */   {
/* 1298 */     return this.usersService.getUserDepartmentUserexe(deptId, dutyType, uids);
/*      */   }
/*      */   @ResponseBody
/*      */   @RequestMapping({"/user/checkUserCount"})
/*      */   public BaseWrapper checkUserCount(HttpServletRequest request) {
/* 1305 */     return this.usersService.checkUserCount(request);
/*      */   }
/*      */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.controller.users.UsersController
 * JD-Core Version:    0.6.0
 */