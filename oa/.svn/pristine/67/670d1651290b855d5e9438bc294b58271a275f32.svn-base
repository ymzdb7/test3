 package com.xoa.util;
 
 import com.xoa.model.weather.OneDayWeatherInf;
 import com.xoa.model.weather.WeatherInf;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.net.URLEncoder;
 import java.util.Date;
 import net.sf.json.JSONArray;
 import net.sf.json.JSONObject;
 
 public class WeatherUtil
 {
   private static final String SUN = "晴";
   private static final String CLOUDY = "多云";
   private static final String OVERCAST = "阴";
   private static final String THUNDER_SHOWER = "雷阵雨";
   private static final String LIGHT_RAIN = "小雨";
   private static final String MODERATE_RAIN = "中雨";
   private static final String HEAVY_RAIN = "大雨";
   private static final String RAINSTORM = "暴雨";
 
   static String getWeatherInform(String cityName)
   {
     String baiduUrl = "http:api.map.baidu.comv3/weather?location=北京&output=json&ak=W69oaDTCfuGwzNwmtVvgWfGH";
     try
     {
       baiduUrl = "http:api.map.baidu.comv3/weather?location=" + URLEncoder.encode(cityName, "utf-8") + "&output=json&ak=eQX5bMc9sGz8SPWquI3XV7x5eTAIgCQj";
     } catch (UnsupportedEncodingException e1) {
       e1.printStackTrace();
     }
 
     StringBuffer strBuf = new StringBuffer();
     try
     {
       URL url = new URL(baiduUrl);
       URLConnection conn = url.openConnection();
       BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"));
       String line = null;
       while ((line = reader.readLine()) != null)
         strBuf.append(line + " ");
       reader.close();
     } catch (MalformedURLException e) {
       e.printStackTrace();
     } catch (IOException e) {
       e.printStackTrace();
     }
 
     return strBuf.toString();
   }
 
   public static WeatherInf resolveWeatherInf(String cityName)
   {
     WeatherInf weatherInf = new WeatherInf();
     try
     {
       String weatherInform = getWeatherInform(cityName);
 
       JSONObject dataOfJson = JSONObject.fromObject(weatherInform);
 
       if (dataOfJson.getInt("error") != 0) {
         return null;
       }
 
       String date = dataOfJson.getString("date");
       int year = Integer.parseInt(date.substring(0, 4));
       int month = Integer.parseInt(date.substring(5, 7));
       int day = Integer.parseInt(date.substring(8, 10));
       Date today = new Date(year - 1900, month - 1, day);
 
       JSONArray results = dataOfJson.getJSONArray("results");
       JSONObject results0 = results.getJSONObject(0);
 
       String location = results0.getString("currentCity");
       int pmTwoPointFive;
       if (results0.getString("pm25").isEmpty())
         pmTwoPointFive = 0;
       else {
         pmTwoPointFive = results0.getInt("pm25");
       }
 
       JSONArray weather_data = results0.getJSONArray("weather_data");
 
       OneDayWeatherInf[] oneDayWeatherInfS = new OneDayWeatherInf[4];
       for (int i = 0; i < 4; i++) {
         oneDayWeatherInfS[i] = new OneDayWeatherInf();
       }
 
       for (int i = 0; i < 1; i++)
       {
         JSONObject OneDayWeatherinfo = weather_data.getJSONObject(i);
         String dayData = OneDayWeatherinfo.getString("date");
         OneDayWeatherInf oneDayWeatherInf = new OneDayWeatherInf();
 
         oneDayWeatherInf.setDate(today.getYear() + 1900 + "." + (today.getMonth() + 1) + "." + today.getDate());
         today.setDate(today.getDate() + 1);
 
         oneDayWeatherInf.setLocation(location);
         oneDayWeatherInf.setPmTwoPointFive(pmTwoPointFive);
 
         if (i == 0) {
           int beginIndex = dayData.indexOf("：");
           int endIndex = dayData.indexOf(")");
           if (beginIndex > -1) {
             oneDayWeatherInf.setTempertureNow(dayData.substring(beginIndex + 1, endIndex).replace("℃", ""));
             oneDayWeatherInf.setWeek(OneDayWeatherinfo.getString("date").substring(0, 2));
           } else {
             oneDayWeatherInf.setTempertureNow(" ");
             oneDayWeatherInf.setWeek(OneDayWeatherinfo.getString("date").substring(0, 2));
           }
         }
         else {
           oneDayWeatherInf.setWeek(OneDayWeatherinfo.getString("date"));
         }
 
         oneDayWeatherInf.setTempertureOfDay(OneDayWeatherinfo.getString("temperature"));
         oneDayWeatherInf.setWeather(OneDayWeatherinfo.getString("weather"));
         oneDayWeatherInf.setWind(OneDayWeatherinfo.getString("wind"));
 
         oneDayWeatherInf = setWeatherPicture(oneDayWeatherInf);
         oneDayWeatherInfS[i] = oneDayWeatherInf;
       }
 
       weatherInf.setWeatherInfs(oneDayWeatherInfS);
     }
     catch (Exception e) {
       e.printStackTrace();
       return null;
     }
 
     return weatherInf;
   }
 
   public static OneDayWeatherInf setWeatherPicture(OneDayWeatherInf oneDayWeatherInf)
   {
     switch (oneDayWeatherInf.getWeather()) {
     case "晴":
       oneDayWeatherInf.setPicture("");
       break;
     case "多云":
       oneDayWeatherInf.setPicture("");
       break;
     case "阴":
       oneDayWeatherInf.setPicture("");
       break;
     case "雷阵雨":
       oneDayWeatherInf.setPicture("");
       break;
     case "小雨":
       oneDayWeatherInf.setPicture("");
       break;
     case "中雨":
       oneDayWeatherInf.setPicture("");
       break;
     case "大雨":
       oneDayWeatherInf.setPicture("");
       break;
     case "暴雨":
       oneDayWeatherInf.setPicture("");
     }
 
     return oneDayWeatherInf;
   }
 }
