 package com.xoa.util;
 
 import java.io.PrintStream;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.List;
 
 public class DateCompute
 {
   public static String getWeekOfDate(Date dt)
   {
     String[] weekDays = { "星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六" };
     Calendar cal = Calendar.getInstance();
     cal.setTime(dt);
 
     int w = cal.get(7) - 1;
     return weekDays[w];
   }
 
   public static List<Date> getBetweenDates(Date start, Date end)
   {
     List result = new ArrayList();
     Calendar tempStart = Calendar.getInstance();
     tempStart.setTime(start);
 
     while (start.getTime() <= end.getTime()) {
       result.add(tempStart.getTime());
       tempStart.add(6, 1);
       start = tempStart.getTime();
     }
     return result;
   }
 
   public static String getWeekInterval()
   {
     Calendar cal = Calendar.getInstance();
     cal.setTime(new Date());
 
     int dayWeek = cal.get(7);
     if (1 == dayWeek) {
       cal.add(5, -1);
     }
     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 
     cal.setFirstDayOfWeek(2);
 
     int day = cal.get(7);
 
     cal.add(5, cal.getFirstDayOfWeek() - day);
     String imptimeBegin = sdf.format(cal.getTime());
     cal.add(5, 6);
     String imptimeEnd = sdf.format(cal.getTime());
     return imptimeBegin + "," + imptimeEnd;
   }
 
   public static String getMonthInterval()
   {
     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
     Calendar calendar = Calendar.getInstance();
     calendar.setTime(new Date());
     Date theDate = calendar.getTime();
 
     GregorianCalendar gcLast = (GregorianCalendar)Calendar.getInstance();
     gcLast.setTime(theDate);
     gcLast.set(5, 1);
     String day_first = df.format(gcLast.getTime());
     StringBuffer str = new StringBuffer().append(day_first);
     day_first = str.toString();
 
     calendar.add(2, 1);
     calendar.set(5, 1);
     calendar.add(5, -1);
     String day_last = df.format(calendar.getTime());
     StringBuffer endStr = new StringBuffer().append(day_last);
     day_last = endStr.toString();
     return day_first + "," + day_last;
   }
 
   public static String getMonthTime(String datadate)
   {
     String day_last = null;
     String day_first = null;
     Date date = new Date();
     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
     try {
       date = df.parse(datadate);
 
       Calendar calendar = Calendar.getInstance();
       calendar.setTime(date);
       calendar.add(2, 1);
       calendar.set(5, 1);
       calendar.add(5, -1);
       day_last = df.format(calendar.getTime());
       System.out.println("当月最后一天" + day_last);
 
       date = df.parse(datadate);
 
       calendar.setTime(date);
       calendar.set(5, 1);
       day_first = df.format(calendar.getTime());
       System.out.println("当月第一天" + day_first);
     }
     catch (Exception e) {
       e.printStackTrace();
     }
     return day_first + "," + day_last;
   }
 
   public static String getLastMonthDay(String datadate) throws ParseException
   {
     SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");
     Date date1 = df.parse(datadate);
     Calendar calendar = Calendar.getInstance();
     calendar.setTime(date1);
     int first1 = calendar.getActualMinimum(5);
     int last1 = calendar.getActualMaximum(5);
     return datadate + "-" + last1;
   }
 
   public static int workAge(Date nowTime, Date workTime)
   {
     int year = 0;
 
     Calendar cal = Calendar.getInstance();
     cal.setTime(nowTime);
     int nowYear = cal.get(1);
     int nowMonth = cal.get(2);
     int nowDay = cal.get(5);
 
     cal.setTime(workTime);
     int workYear = cal.get(1);
     int workMonth = cal.get(2);
     int workDay = cal.get(5);
 
     year = nowYear - workYear;
 
     if (nowMonth == workMonth)
     {
       if (nowDay > workDay)
         year += 1;
     }
     else if (nowMonth > workMonth) {
       year += 1;
     }
     return year;
   }
 
   public static int getAge(Date dateOfBirth)
   {
     int age = 0;
 
     Calendar born = Calendar.getInstance();
 
     Calendar now = Calendar.getInstance();
 
     if (dateOfBirth != null)
     {
       now.setTime(new Date());
 
       born.setTime(dateOfBirth);
 
       if (born.after(now))
       {
         throw new IllegalArgumentException("年龄不能超过当前日期");
       }
 
       age = now.get(1) - born.get(1);
 
       int nowDayOfYear = now.get(6);
 
       int bornDayOfYear = born.get(6);
 
       System.out.println("nowDayOfYear:" + nowDayOfYear + " bornDayOfYear:" + bornDayOfYear);
 
       if (nowDayOfYear < bornDayOfYear)
       {
         age--;
       }
 
     }
 
     return age;
   }
 }

