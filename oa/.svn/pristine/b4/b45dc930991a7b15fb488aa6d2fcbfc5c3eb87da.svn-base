/*     */ package com.xoa.util.systeminfo;
import java.io.UnsupportedEncodingException;
/*     */ 
/*     */ import java.security.Key;
/*     */ import java.security.SecureRandom;
/*     */ import java.util.Random;
/*     */ import javax.crypto.BadPaddingException;
/*     */ import javax.crypto.Cipher;
/*     */ import javax.crypto.IllegalBlockSizeException;
/*     */ import javax.crypto.SecretKey;
/*     */ import javax.crypto.SecretKeyFactory;
/*     */ import javax.crypto.spec.DESKeySpec;
/*     */ 
/*     */ public class DESUtils
/*     */ {
/*     */   public static final String MY_KEY = "abcdefg123456789";
/*     */   public static final String KEY_ALGORITHM = "DES";
/*     */   public static final String CIPHER_ALGORITHM = "DES/ECB/NoPadding";
/*     */ 
/*     */   private static SecretKey keyGenerator(String keyStr)
/*     */     throws Exception
/*     */   {
/*  41 */     byte[] input = HexString2Bytes(keyStr);
/*  42 */     DESKeySpec desKey = new DESKeySpec(input);
/*     */ 
/*  44 */     SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
/*  45 */     SecretKey securekey = keyFactory.generateSecret(desKey);
/*  46 */     return securekey;
/*     */   }
/*     */ 
/*     */   private static int parse(char c) {
/*  50 */     if (c >= 'a') return c - 'a' + 10 & 0xF;
/*  51 */     if (c >= 'A') return c - 'A' + 10 & 0xF;
/*  52 */     return c - '0' & 0xF;
/*     */   }
/*     */ 
/*     */   public static byte[] HexString2Bytes(String hexstr)
/*     */   {
/*  57 */     byte[] b = new byte[hexstr.length() / 2];
/*  58 */     int j = 0;
/*  59 */     for (int i = 0; i < b.length; i++) {
/*  60 */       char c0 = hexstr.charAt(j++);
/*  61 */       char c1 = hexstr.charAt(j++);
/*  62 */       b[i] = (byte)(parse(c0) << 4 | parse(c1));
/*     */     }
/*  64 */     return b;
/*     */   }
/*     */ 
/*     */   public static String myEncrypt(String data, String key)
/*     */     throws Exception
/*     */   {
/*  79 */     int count = 0;
/*  80 */     while (data.getBytes().length % 8 != 0) {
/*  81 */       data = data + "0";
/*  82 */       count++;
/*     */     }
/*     */ 
/*  85 */     Key deskey = keyGenerator(key);
/*     */ 
/*  87 */     Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
/*  88 */     SecureRandom random = new SecureRandom();
/*     */ 
/*  90 */     cipher.init(1, deskey, random);
/*  91 */     byte[] results = cipher.doFinal(data.getBytes());
/*     */ 
/*  93 */     for (int i = 0; i < results.length; i++);
/*  98 */     return count + Base64.encodeBase64String(results);
/*     */   }
/*     */ 
/*     */   public static String encrypt(String data, String key)
/*     */     throws Exception
/*     */   {
/* 111 */     Key deskey = keyGenerator(key);
/*     */ 
/* 113 */     Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
/* 114 */     SecureRandom random = new SecureRandom();
/*     */ 
/* 116 */     cipher.init(1, deskey, random);
/*     */     try
/*     */     {
/* 120 */       byte[] results = cipher.doFinal(data.trim().getBytes());
/*     */ 
/* 123 */       return Base64.encodeBase64String(results);
/*     */     } catch (IllegalBlockSizeException e) {
/* 125 */       e.printStackTrace();
/* 126 */       throw new Exception("IllegalBlockSizeException", e);
/*     */     } catch (BadPaddingException e) {
/* 128 */       e.printStackTrace();
                throw new Exception("BadPaddingException", e);
/* 129 */     }
/*     */   }
/*     */ 
/*     */   public static String myDecrypt(String data, String key)
/*     */     throws Exception
/*     */   {
/* 144 */     String num = data.substring(0, 1);
/*     */ 
/* 146 */     data = data.substring(1, data.length());
/* 147 */     Key deskey = keyGenerator(key);
/* 148 */     Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
/*     */ 
/* 150 */     cipher.init(2, deskey);
/*     */ 
/* 152 */     String msg = new String(cipher.doFinal(Base64.decodeBase64(data)));
/*     */ 
/* 154 */     String publicMsg = new String(cipher.doFinal(Base64.decodeBase64(data)));
/*     */ 
/* 156 */     publicMsg = publicMsg.substring(0, publicMsg.length() - Integer.parseInt(num));
/*     */ 
/* 158 */     return publicMsg;
/*     */   }
/*     */ 
/*     */   public static String chineseCrpt(String chineseStr)
/*     */   {
			    byte[] bytes;
				try {
					bytes = chineseStr.getBytes("GBK");
					StringBuffer sb = new StringBuffer();
					for (byte aByte : bytes) {
						sb.append(aByte).append(",");
					}
					String s1 = sb.toString();
		
					return s1;
				} catch (UnsupportedEncodingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
/* 171 */       return "";
/*     */   }
/*     */ 
/*     */   public static String chineseDec(String chineseStr)
/*     */   {
/* 189 */     String[] stringArr = chineseStr.split(",");
/* 190 */     byte[] mybytes = new byte[stringArr.length];
/* 191 */     for (int i = 0; i < stringArr.length; i++)
/*     */     {
/* 193 */       byte b = (byte)Integer.parseInt(stringArr[i]);
/* 194 */       mybytes[i] = b;
/*     */     }
/* 196 */     String str = "";
/*     */     try {
/* 198 */       str = new String(mybytes, "GBK");
/*     */     } catch (Exception e) {
/* 200 */       e.printStackTrace();
/*     */     }
/*     */ 
/* 203 */     return str;
/*     */   }
/*     */ 
/*     */   public static String finalEncry(String chineseStr, String notchineseStr, String macode) {
/* 207 */     String noChinesePwd = null;
/*     */     try {
/* 209 */       noChinesePwd = myEncrypt(notchineseStr, MY_KEY);
/*     */     } catch (Exception e) {
/* 211 */       e.printStackTrace();
/*     */     }
/* 213 */     String chinesePwd = chineseCrpt(chineseStr);
/*     */ 
/* 216 */     String finalCrptStr = MY_KEY + chinesePwd + "@123456789qwertyuiopasdfghjklzxcvbnm,.-@" + noChinesePwd;
/*     */ 
/* 218 */     return finalCrptStr;
/*     */   }
/*     */ 
/*     */   public static String get16Char()
/*     */   {
/* 229 */     String str = new String("0123456789QWERTYUIOPLKJHGFDSAZXCVBNM");
/* 230 */     Random random = new Random();
/* 231 */     int i = random.nextInt(36);
/* 232 */     char[] chars = str.toCharArray();
/*     */ 
/* 234 */     StringBuffer sb = new StringBuffer();
/* 235 */     for (int j = 0; j < 16; j++) {
/* 236 */       sb.append(chars[i]);
/*     */     }
/* 238 */     return sb.toString();
/*     */   }
/*     */ 
/*     */   public static String finalDec(String pwd) {
/* 242 */     String[] allPwd = pwd.split("\\@shjkhhghkjkwquu7765xw,\\.-\\@");
/* 243 */     String chinesePwd = allPwd[0];
/* 244 */     String nochinesePwd = allPwd[1];
/*     */ 
/* 246 */     String mykey = pwd.substring(0, 16);
/* 247 */     chinesePwd = chinesePwd.substring(16, chinesePwd.length());
/* 248 */     String chineseMsg = chineseDec(chinesePwd);
/* 249 */     String noChineseMsg = null;
/*     */     try
/*     */     {
	            nochinesePwd = nochinesePwd.substring(16, nochinesePwd.length());
/* 252 */       noChineseMsg = myDecrypt(nochinesePwd, MY_KEY);
/*     */     } catch (Exception e) {
/* 254 */       e.printStackTrace();
/*     */     }
/*     */ 
/* 257 */     String finalMsgStr = chineseMsg + noChineseMsg;
/* 258 */     return finalMsgStr;
/*     */   }
/*     */ 
/*     */   public static String decrypt(String data, String key)
/*     */     throws Exception
/*     */   {
/* 270 */     Key deskey = keyGenerator(key);
/* 271 */     Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
/*     */ 
/* 273 */     cipher.init(2, deskey);
/*     */ 
/* 275 */     return new String(cipher.doFinal(Base64.decodeBase64(data)));
/*     */   }
/*     */ 
/*     */   public static void main(String[] args)
/*     */     throws Exception
/*     */   {
	          System.out.println(chineseCrpt("南京总公司"));
/* 286 */     String source = "oa,1,150,2017-06-30,2025-01-01,xoa17-12345678-1234,60F67735B7636F73,30";
/*     */ 
/* 288 */     String key = MY_KEY;
/* 289 */     String encryptData = myEncrypt(source, key);
/*     */     System.out.println(encryptData);
/* 291 */     String decryptData = myDecrypt(encryptData, key);
/*     */     System.out.println(decryptData);
/* 293 */     String[] split = decryptData.split(",");
System.out.println(DESUtils.finalDec("abcdefg123456789-60,-49,-66,-87,-41,-36,-71,-85,-53,-66,@shjkhhghkjkwquu7765xw,.-@abcdefg1234567892h2gyrqa2RRQMrstqqARYhd9m0DFdb3gfFsI0A1t9/Dpa3ZcG6Zz3SKmRbsanqlAhEha21i9HxrqnfPgeg/xKcebXEMJJamve"));
/*     */   
MachineUtil.getEncryptMacCode();
}
/*     */ }