 package com.xoa.service.wechat.WeChatCommentReply.impl;
 
 import com.xoa.dao.wechat.WeChatCommentReplyMapper;
 import com.xoa.model.users.Users;
 import com.xoa.model.wechat.WeChatCommentReply;
 import com.xoa.service.wechat.WeChatCommentReply.WeChatCommentReplyService;
 import com.xoa.util.ToJson;
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.net.URLEncoder;
 import java.util.Date;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import javax.annotation.Resource;
 import org.springframework.stereotype.Service;
 
 @Service
 public class WeChatCommentReplyServiceImpl
   implements WeChatCommentReplyService
 {
 
   @Resource
   private WeChatCommentReplyMapper weChatCommentReplyMapper;
 
   public static String emojiConvert1(String str)
     throws UnsupportedEncodingException
   {
     String patternString = "([\\x{10000}-\\x{10ffff}�-�])";
 
     Pattern pattern = Pattern.compile(patternString);
 
     Matcher matcher = pattern.matcher(str);
 
     StringBuffer sb = new StringBuffer();
     while (matcher.find()) {
       try {
         matcher.appendReplacement(sb, "[[" + URLEncoder.encode(matcher.group(1), "UTF-8") + "]]");
       }
       catch (UnsupportedEncodingException e)
       {
         e.printStackTrace();
       }
     }
     matcher.appendTail(sb);
 
     return sb.toString();
   }
 
   public static String emojiRecovery2(String str) throws UnsupportedEncodingException
   {
     String patternString = "\\[\\[(.*?)\\]\\]";
 
     Pattern pattern = Pattern.compile(patternString);
     Matcher matcher = pattern.matcher(str);
 
     StringBuffer sb = new StringBuffer();
     while (matcher.find()) {
       try {
         matcher.appendReplacement(sb, URLDecoder.decode(matcher.group(1), "UTF-8"));
       }
       catch (UnsupportedEncodingException e)
       {
         e.printStackTrace();
       }
     }
     matcher.appendTail(sb);
 
     return sb.toString();
   }
 
   public ToJson<WeChatCommentReply> insertWeChatCommentReply(WeChatCommentReply weChatCommentReply, Users user) {
     ToJson json = new ToJson();
     try {
       int uid = user.getUid().intValue();
       String currentTime = String.valueOf(new Date().getTime() / 1000L);
       int time = Integer.valueOf(currentTime).intValue();
       weChatCommentReply.setUid(Integer.valueOf(uid));
       weChatCommentReply.setrTime(Integer.valueOf(time));
       String message = emojiConvert1(weChatCommentReply.getMessage());
       weChatCommentReply.setMessage(message);
       this.weChatCommentReplyMapper.insertWeChatCommentReply(weChatCommentReply);
       json.setFlag(0);
       json.setMsg("ok");
     } catch (Exception e) {
       e.printStackTrace();
       json.setFlag(1);
       json.setMsg("err");
     }
     return json;
   }
   public ToJson<WeChatCommentReply> selectWeChatCommentReply(Integer wid, Integer cid) {
     ToJson json = new ToJson();
     try {
       List weChatCommentReplyList = this.weChatCommentReplyMapper.selectWeChatCommentReply(wid, cid);
       json.setObj(weChatCommentReplyList);
       json.setFlag(0);
       json.setMsg("ok");
     }
     catch (Exception e) {
       e.printStackTrace();
       json.setFlag(1);
       json.setMsg("err");
     }
     return json;
   }
   public ToJson<WeChatCommentReply> deleteByPrimaryKey(Integer rid) {
     ToJson json = new ToJson();
     try {
       this.weChatCommentReplyMapper.deleteByPrimaryKey(rid);
       json.setFlag(0);
       json.setMsg("ok");
     } catch (Exception e) {
       e.printStackTrace();
       json.setFlag(1);
       json.setMsg("err");
     }
     return json;
   }
 }
