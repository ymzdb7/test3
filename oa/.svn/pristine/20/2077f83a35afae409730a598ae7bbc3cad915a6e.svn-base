package com.xoa.controller.netdisk;

import com.alibaba.fastjson.JSONArray;
import com.xoa.model.netdisk.Netdisk;
import com.xoa.model.netdisk.NetdiskWrapper;
import com.xoa.service.netdisk.NetdiskService;
import com.xoa.util.Constant;
import com.xoa.util.ToJson;
import com.xoa.util.common.wrapper.BaseWrapper;
import com.xoa.util.dataSource.ContextHolder;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@Scope("prototype")
@RequestMapping({ "/netdiskSettings" })
public class NetdiskSettingsController {
	private Logger loger = Logger.getLogger(NetdiskSettingsController.class);

	@Resource
	private NetdiskService netdiskService;

	@RequestMapping({ "/netdisksetting" })
	public String netdisksetting() {
		return "app/netdesk/netdisksetting";
	}

	@RequestMapping({ "/netdisksetpower" })
	public String netdisksetpower() {
		return "app/netdesk/netdisksetpower";
	}

	public String netdesk() {
		return "app/netdesk/netdesk";
	}

	@RequestMapping({ "/networkHardDisk" })
	public String networkHardDisk() {
		return "app/netdesk/networkHardDisk";
	}

	@ResponseBody
	@RequestMapping(value = { "/selectNetdiskSettings" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<Netdisk> selectNetdiskSettings(HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		ToJson tojson = new ToJson(0, "");
		try {
			List list = this.netdiskService.selectNetdisk();
			tojson.setObject(list);
			tojson.setMsg("ok");
			tojson.setFlag(0);
		} catch (Exception e) {
			tojson.setMsg(e.getMessage());
		}
		return tojson;
	}

	@ResponseBody
	@RequestMapping(value = { "/addNetdiskSettings" }, produces = { "application/json;charset=UTF-8" })
	public BaseWrapper addNetdisk(Netdisk netdisk, HttpServletRequest request) {
		return this.netdiskService.addNetdisk(netdisk);
	}

	@ResponseBody
	@RequestMapping(value = { "/editNetdiskSettings" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<Netdisk> editNetdisk(String auth, Netdisk netdisk,
			HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		ToJson json = new ToJson();
		try {
			int a = this.netdiskService.editNetdisk(netdisk);
			if (a > 0) {
				json.setFlag(0);
				json.setMsg("ok");
			} else {
				json.setFlag(1);
				json.setMsg("err");
			}
		} catch (Exception e) {
			json.setMsg(e.getMessage());
		}
		return json;
	}

	@ResponseBody
	@RequestMapping(value = { "/editNetdiskJurisdictionSettings" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<Netdisk> editNetdiskJurisdiction(
			@RequestParam(name = "auth") String auth, HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		ToJson json = new ToJson();
		Map mmp = (Map) JSONArray.parseObject(auth, Map.class);
		try {
			int a = this.netdiskService.editNetdiskJurisdiction(mmp);
			if (a > 0) {
				json.setFlag(0);
				json.setMsg("ok");
			} else {
				json.setFlag(1);
				json.setMsg("err");
			}
		} catch (Exception e) {
			json.setMsg(e.getMessage());
		}
		return json;
	}

	@ResponseBody
	@RequestMapping(value = { "/deleteByDiskId" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<Netdisk> deleteByDiskId(
			@RequestParam("diskId") Integer diskId, HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		ToJson tojson = new ToJson(0, "");
		this.loger.debug("message" + diskId);
		try {
			this.netdiskService.delete(diskId);
			tojson.setMsg("ok");
			return tojson;
		} catch (Exception e) {
			tojson.setMsg(e.getMessage());
		}
		return tojson;
	}

	@RequestMapping({ "/getNetiskBySortId" })
	@ResponseBody
	public NetdiskWrapper getAuthBySortId(Integer diskId) {
		return this.netdiskService.queryById(diskId);
	}
}
