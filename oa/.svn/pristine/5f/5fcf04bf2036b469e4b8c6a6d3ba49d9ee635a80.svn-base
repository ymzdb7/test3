package com.xoa.kg.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xoa.dao.kg.KgRelationKeySignMapper;
import com.xoa.dao.kg.KgRelationKeyUserMapper;
import com.xoa.dao.kg.KgSignKeyMapper;
import com.xoa.dao.kg.KgSignatureMapper;
import com.xoa.dao.users.UsersMapper;
import com.xoa.kg.model.KgRelationKeySign;
import com.xoa.kg.model.KgRelationKeyUser;
import com.xoa.kg.model.KgRelationKeyUserExample;
import com.xoa.kg.model.KgSignKey;
import com.xoa.kg.model.KgSignKeyExample;
import com.xoa.kg.model.KgSignature;
import com.xoa.kg.model.KgSignatureExample;
import com.xoa.model.users.Users;
import com.xoa.util.common.wrapper.BaseWrapper;
import com.xoa.util.common.wrapper.BaseWrappers;

@Service
public class KgService {

	@Autowired
	KgSignatureMapper kgSignatureMapper;

	@Autowired
	KgRelationKeyUserMapper kgRelationKeyUserMapper;

	@Autowired
	KgSignKeyMapper kgSignKeyMapper;

	@Autowired
	KgRelationKeySignMapper kgRelationKeySignMapper;

	@Autowired
	UsersMapper usersMapper;

	public BaseWrappers getAllSignatures() {
		BaseWrappers wrappers = new BaseWrappers();
		List datas = this.kgSignatureMapper.selectByExample(null);
		wrappers.setStatus(true);
		wrappers.setDatas(datas);
		wrappers.setFlag(true);
		return wrappers;
	}

	public BaseWrappers getUserSignature(Integer uid) {
		BaseWrappers baseWrappers = new BaseWrappers();
		if (uid == null)
			return baseWrappers;

		List<KgSignKey> kgSignKeys = this.kgSignKeyMapper.selectUserKey(uid);

		List<KgSignature> kgSignatures = this.kgSignatureMapper
				.selectUserSign(uid);
		for (KgSignKey key : kgSignKeys) {
			List keySign = new ArrayList();
			for (KgSignature signature : kgSignatures) {
				if (signature.getKeyId() == key.getSignkeyId()) {
					keySign.add(signature);
				}
			}
			key.setKgSignatures(keySign);
		}
		baseWrappers.setDatas(kgSignKeys);
		baseWrappers.setFlag(true);
		return baseWrappers;
	}

	public BaseWrapper getKgSignatureList() {
		BaseWrapper wrapper = new BaseWrapper();
		List kgSignatureList = this.kgSignatureMapper.getKgSignatureList();

		if (kgSignatureList != null) {
			wrapper.setFlag(true);
			wrapper.setMsg("查询成功！");
			wrapper.setData(kgSignatureList);
		} else {
			wrapper.setMsg("查询出错！");
		}
		return wrapper;
	}

	public BaseWrapper getKgSignKeyList(Integer signId) {
		BaseWrapper wrapper = new BaseWrapper();
		List kgSignKeyList = this.kgSignKeyMapper.getKgSignKeyList(signId);

		if (kgSignKeyList != null) {
			wrapper.setFlag(true);
			wrapper.setMsg("查询成功！");
			wrapper.setData(kgSignKeyList);
		} else {
			wrapper.setMsg("查询出错！");
		}
		return wrapper;
	}

	@Transactional(rollbackFor = { RuntimeException.class })
	public BaseWrapper addKgSignature(KgSignature kgSignature) {
		BaseWrapper wrapper = new BaseWrapper();
		try {
			int result = this.kgSignatureMapper.insertSelective(kgSignature);

			if (result > 0) {
				wrapper.setMsg("添加成功！");
				wrapper.setFlag(true);
			} else {
				wrapper.setMsg("添加失败！");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("添加出错！");
		}
		return wrapper;
	}

	@Transactional(rollbackFor = { RuntimeException.class })
	public BaseWrapper addKgSignKey(KgSignKey kgSignKey, Integer signId) {
		BaseWrapper wrapper = new BaseWrapper();
		int result = 0;
		try {
			this.kgSignKeyMapper.insertSelective(kgSignKey);

			KgRelationKeySign kgRelationKeySign = new KgRelationKeySign();
			kgRelationKeySign.setSignId(signId);
			kgRelationKeySign.setKeyId(kgSignKey.getSignkeyId());
			this.kgRelationKeySignMapper.insertSelective(kgRelationKeySign);

			KgRelationKeyUser kgRelationKeyUser = new KgRelationKeyUser();
			kgRelationKeyUser.setKeyId(kgSignKey.getSignkeyId());
			for (String userId : kgSignKey.getUserIdStr().split(",")) {
				kgRelationKeyUser.setUserId(Integer.valueOf(Integer
						.parseInt(userId)));
				result = this.kgRelationKeyUserMapper
						.insertSelective(kgRelationKeyUser);
			}

			if (result > 0) {
				wrapper.setMsg("添加成功！");
				wrapper.setFlag(true);
			} else {
				wrapper.setMsg("添加失败！");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("添加出错！");
		}
		return wrapper;
	}

	public BaseWrapper updateKgSignature(KgSignature kgSignature) {
		BaseWrapper wrapper = new BaseWrapper();
		try {
			int result = this.kgSignatureMapper
					.updateByPrimaryKeySelective(kgSignature);

			if (result > 0) {
				wrapper.setMsg("修改成功！");
				wrapper.setFlag(true);
			} else {
				wrapper.setMsg("修改失败！");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return wrapper;
	}

	@Transactional(rollbackFor = { RuntimeException.class })
	public BaseWrapper updateKgSignKey(KgSignKey kgSignKey) {
		BaseWrapper wrapper = new BaseWrapper();
		int result = 0;
		try {
			this.kgSignKeyMapper.updateByPrimaryKeySelective(kgSignKey);

			KgRelationKeyUserExample example = new KgRelationKeyUserExample();
			example.or().andKeyIdEqualTo(kgSignKey.getSignkeyId());
			this.kgRelationKeyUserMapper.deleteByExample(example);

			KgRelationKeyUser kgRelationKeyUser = new KgRelationKeyUser();
			kgRelationKeyUser.setKeyId(kgSignKey.getSignkeyId());
			for (String userId : kgSignKey.getUserIdStr().split(",")) {
				kgRelationKeyUser.setUserId(Integer.valueOf(Integer
						.parseInt(userId)));
				result = this.kgRelationKeyUserMapper
						.insertSelective(kgRelationKeyUser);
			}

			if (result > 0) {
				wrapper.setMsg("修改成功！");
				wrapper.setFlag(true);
			} else {
				wrapper.setMsg("修改失败！");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("修改出错！");
		}
		return wrapper;
	}

	public BaseWrapper deleteKgSignature(Integer signatureId) {
		BaseWrapper wrapper = new BaseWrapper();

		KgSignatureExample example = new KgSignatureExample();
		example.or().andSignatureIdEqualTo(signatureId);
		KgSignature kgSignature = new KgSignature();
		kgSignature.setSignatureStatus(Integer.valueOf(-1));
		try {
			int result = this.kgSignatureMapper.updateByExampleSelective(
					kgSignature, example);

			if (result > 0) {
				wrapper.setMsg("修改成功！");
				wrapper.setFlag(true);
			} else {
				wrapper.setMsg("修改失败！");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return wrapper;
	}

	public BaseWrapper deleteKgSignKey(Integer signkeyId) {
		BaseWrapper wrapper = new BaseWrapper();

		KgSignKeyExample example = new KgSignKeyExample();
		example.or().andSignkeyIdEqualTo(signkeyId);
		KgSignKey kgSignKey = new KgSignKey();
		kgSignKey.setSignkeyStatus(Integer.valueOf(-1));
		try {
			int result = this.kgSignKeyMapper.updateByExampleSelective(
					kgSignKey, example);

			if (result > 0) {
				wrapper.setMsg("修改成功！");
				wrapper.setFlag(true);
			} else {
				wrapper.setMsg("修改失败！");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return wrapper;
	}

	public BaseWrapper getKgSignatureByKey(Integer signatureId) {
		BaseWrapper wrapper = new BaseWrapper();
		KgSignature kgSignature = this.kgSignatureMapper
				.selectByPrimaryKey(signatureId);
		if (kgSignature != null) {
			wrapper.setFlag(true);
			wrapper.setMsg("查询成功！");
			wrapper.setData(kgSignature);
		} else {
			wrapper.setMsg("查询失败！");
		}
		return wrapper;
	}

	public BaseWrapper getKgSignKetByKey(Integer signkeyId) {
		BaseWrapper wrapper = new BaseWrapper();
		String resultId = "";
		String resultName = "";

		KgSignKey kgSignKey = this.kgSignKeyMapper
				.selectByPrimaryKey(signkeyId);

		KgRelationKeyUserExample example = new KgRelationKeyUserExample();
		example.or().andKeyIdEqualTo(signkeyId);
		List<KgRelationKeyUser> userIds = this.kgRelationKeyUserMapper
				.selectByExample(example);

		for (KgRelationKeyUser userId : userIds) {
			resultId = resultId + userId.getUserId() + ",";
			Users users = this.usersMapper.selectUserByUId(userId.getUserId());
			resultName = resultName + "," + users.getUserName();
		}
		resultName = resultName.replaceFirst(",", "");
		kgSignKey.setUserIdStr(resultId);
		kgSignKey.setUserNameStr(resultName);

		if (kgSignKey != null) {
			wrapper.setMsg("查询成功！");
			wrapper.setFlag(true);
			wrapper.setData(kgSignKey);
		} else {
			wrapper.setMsg("查询失败！");
		}
		return wrapper;
	}
}
