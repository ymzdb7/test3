 package com.xoa.util.netdisk;
 
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.PrintStream;
 import java.nio.channels.FileChannel;
 
 public class CopyFile
 {
   public static String readByBufferedReader(String fileName)
   {
     String read = null;
     String read1 = null;
     try {
       File file = new File(fileName);
 
       byte[] b = new byte[3];
       InputStreamReader isr;
       if ((b[0] == -17) && (b[1] == -69) && (b[2] == -65)) {
         System.out.println(file.getName() + "：编码为UTF-8");
         isr = new InputStreamReader(new FileInputStream(file), "GBK");
       } else {
         System.out.println(file.getName() + "：可能是GBK，也可能是其他编码");
         isr = new InputStreamReader(new FileInputStream(file), "GBK");
       }
 
       BufferedReader bufread = new BufferedReader(isr);
 
       while ((read = bufread.readLine()) != null) {
         System.out.println(read);
         read1 = read;
       }
       bufread.close();
     } catch (FileNotFoundException ex) {
       ex.printStackTrace();
     } catch (IOException ex) {
       ex.printStackTrace();
     }
     return read1;
   }
 
   public static void writeFile(String content, File file)
   {
     String str = content;
     byte[] bt = new byte[1024];
     bt = str.getBytes();
     try {
       FileOutputStream in = new FileOutputStream(file);
       try {
         in.write(bt, 0, bt.length);
         in.close();
       }
       catch (IOException e)
       {
         e.printStackTrace();
       }
     }
     catch (FileNotFoundException e) {
       e.printStackTrace();
     }
   }
 
   public static void copeFile(File srcFile, File destFile)
   {
     int byteread = 0;
     FileChannel in = null;
     FileChannel out = null;
     FileInputStream inStream = null;
     FileOutputStream outStream = null;
     try {
       inStream = new FileInputStream(srcFile);
       outStream = new FileOutputStream(destFile);
       in = inStream.getChannel();
       out = outStream.getChannel();
       in.transferTo(0L, in.size(), out);
     } catch (FileNotFoundException e) {
       e.printStackTrace();
     } catch (IOException e) {
       e.printStackTrace();
     } finally {
       try {
         if (outStream != null)
           outStream.close();
         if (inStream != null)
           inStream.close();
         if (out != null)
           out.close();
         if (in != null)
           in.close();
       } catch (IOException e) {
         e.printStackTrace();
       }
     }
   }
 }

