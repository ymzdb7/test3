package com.xoa.controller.diary;

import com.xoa.model.diary.DiaryCommentModel;
import com.xoa.model.diary.DiaryCommentReplyModel;
import com.xoa.model.diary.DiaryModel;
import com.xoa.model.enclosure.Attachment;
import com.xoa.service.diary.DiaryService;
import com.xoa.util.Constant;
import com.xoa.util.ToJson;
import com.xoa.util.dataSource.ContextHolder;
import com.xoa.util.page.PageParams;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.zip.DataFormatException;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping({ "/diary" })
public class DiaryController {
	private Logger loger = Logger.getLogger(DiaryController.class);

	@Resource
	DiaryService diaryService;

	@RequestMapping({ "/workLog" })
	public String workLog() {
		return "app/diary/workLog";
	}

	@RequestMapping({ "/details" })
	public String details() {
		return "app/diary/details";
	}

	@RequestMapping({ "/index" })
	public String diaryIndex(DiaryModel diaryModel, HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		return "app/diary/index";
	}

	@RequestMapping({ "/save" })
	@ResponseBody
	public ToJson<DiaryModel> diaryAdd(DiaryModel diaryModel,
			HttpServletRequest request) throws UnsupportedEncodingException,
			DataFormatException {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		if (diaryModel.getUserId() == null) {
			diaryModel.setUserId((String) request.getSession().getAttribute(
					"userId"));
		}
		int temp = this.diaryService.saveDiary(diaryModel);
		ToJson diaryListToJson = new ToJson();
		if (temp == 1)
			diaryListToJson.setFlag(0);
		else {
			diaryListToJson.setFlag(1);
		}
		return diaryListToJson;
	}

	@RequestMapping({ "/update" })
	@ResponseBody
	public ToJson<DiaryModel> diaryUpdate(DiaryModel diaryModel,
			HttpServletRequest request) throws UnsupportedEncodingException {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		int temp = this.diaryService.updateDiary(diaryModel);
		ToJson diaryListToJson = new ToJson();
		if (temp == 1) {
			diaryListToJson.setFlag(0);
			diaryListToJson.setMsg("修改成功！");
		} else {
			diaryListToJson.setFlag(1);
			diaryListToJson.setMsg("修改失败！");
		}
		return diaryListToJson;
	}

	@RequestMapping(value = { "/getIndex" }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ToJson<DiaryModel> diaryGet(DiaryModel diaryModel,
			HttpServletRequest request, @RequestParam("page") Integer page,
			@RequestParam("pageSize") Integer pageSize,
			@RequestParam("useFlag") Boolean useFlag) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		PageParams pageParams = new PageParams();
		pageParams.setUseFlag(useFlag);
		pageParams.setPage(page);
		pageParams.setPageSize(pageSize);
		if ((diaryModel.getUserId() == null)
				|| ("".equals(diaryModel.getUserId()))) {
			HttpSession session = request.getSession();
			diaryModel.setUserId(session.getAttribute("userId").toString());
		}
		ToJson diaryToJson = this.diaryService.getDiaryIndex(diaryModel,
				pageParams, request);
		return diaryToJson;
	}

	@RequestMapping({ "/getAll" })
	@ResponseBody
	public ToJson<DiaryModel> diaryGetAll(DiaryModel diaryModel,
			HttpServletResponse response, HttpServletRequest request,
			@RequestParam("page") Integer page,
			@RequestParam("pageSize") Integer pageSize,
			@RequestParam("useFlag") Boolean useFlag) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));
		PageParams pageParams = new PageParams();
		pageParams.setUseFlag(useFlag);
		pageParams.setPage(page);
		pageParams.setPageSize(pageSize);
		if ((diaryModel.getUserId() == null)
				|| ("".equals(diaryModel.getUserId()))) {
			HttpSession session = request.getSession();
			diaryModel.setUserId(session.getAttribute("userId").toString());
		}
		ToJson diaryToJson = this.diaryService.getDiaryAll(diaryModel,
				pageParams, request);
		return diaryToJson;
	}

	@RequestMapping(value = { "/getOther" }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ToJson<DiaryModel> diaryGetOther(DiaryModel diaryModel,
			HttpServletRequest request, @RequestParam("page") Integer page,
			@RequestParam("pageSize") Integer pageSize,
			@RequestParam("useFlag") Boolean useFlag) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		PageParams pageParams = new PageParams();
		pageParams.setUseFlag(useFlag);
		pageParams.setPage(page);
		pageParams.setPageSize(pageSize);

		if ((diaryModel.getUserId() == null)
				|| ("".equals(diaryModel.getUserId()))) {
			HttpSession session = request.getSession();
			diaryModel.setUserId(session.getAttribute("userId").toString());
		}
		ToJson diaryOtherToJson = this.diaryService.getDiaryOther(diaryModel,
				pageParams, request);
		return diaryOtherToJson;
	}

	@RequestMapping(value = { "/getConByDiaId" }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ToJson<Attachment> getConByDiaId(DiaryModel diaryModel,
			HttpServletRequest request) {
		String sqlType = Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse");

		ContextHolder.setConsumerType(sqlType);
		if ((diaryModel.getUserId() == null)
				|| ("".equals(diaryModel.getUserId()))) {
			HttpSession session = request.getSession();
			diaryModel.setUserId(session.getAttribute("userId").toString());
		}
		ToJson diaryOtherToJson = this.diaryService.getDiaryByDiaId(diaryModel,
				sqlType);
		return diaryOtherToJson;
	}

	@RequestMapping(value = { "/delete" }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ToJson<DiaryModel> deletDiaById(DiaryModel diaryModel,
			HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		ToJson diaryResult = new ToJson();
		if ((diaryModel.getDiaId() == null)
				|| ("".equals(diaryModel.getDiaId()))) {
			diaryResult.setMsg("删除失败");
			return diaryResult;
		}
		int i = this.diaryService.deletDiaById(diaryModel);
		if (i == 0) {
			diaryResult.setMsg("无该条记录");
			return diaryResult;
		}
		diaryResult.setFlag(0);
		diaryResult.setMsg(i + "");
		return diaryResult;
	}

	@RequestMapping(value = { "/diarySelect" }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ToJson<DiaryModel> diarySelect(DiaryModel diaryModel,
			HttpServletRequest request) {
		ContextHolder.setConsumerType(Constant.MYOA
				+ (String) request.getSession().getAttribute("loginDateSouse"));

		ToJson diaryResult = new ToJson();
		Map mapParamter = new HashMap();

		Map paramMap = request.getParameterMap();

		Iterator iKeys = paramMap.keySet().iterator();
		while (iKeys.hasNext()) {
			String key = (String) iKeys.next();
			String[] value = (String[]) paramMap.get(key);
			if ((value != null) && (value.length > 0))
				mapParamter.put(key, value[0]);
			else {
				mapParamter.put(key, "");
			}
		}
		diaryResult = this.diaryService.diarySelect(mapParamter, request);
		return diaryResult;
	}

	@ResponseBody
	@RequestMapping(value = { "/insertDiaryComment" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryCommentModel> insertDiaryComment(
			DiaryCommentModel diaryCommentModel, HttpServletRequest request) {
		return this.diaryService.insertDiaryComment(diaryCommentModel, request);
	}

	@ResponseBody
	@RequestMapping(value = { "/getDiaryCommentByDiaId" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryCommentModel> getDiaryCommentByDiaId(String diaId) {
		return this.diaryService.getDiaryCommentByDiaId(diaId);
	}

	@ResponseBody
	@RequestMapping(value = { "/insertCommentReply" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryCommentReplyModel> insertCommentReply(
			DiaryCommentReplyModel diaryCommentReplyModel,
			HttpServletRequest request) {
		return this.diaryService.insertCommentReply(diaryCommentReplyModel,
				request);
	}

	@ResponseBody
	@RequestMapping(value = { "/delDiaryCommentByCommentId" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryCommentModel> delDiaryCommentByCommentId(String commentId) {
		return this.diaryService.delDiaryCommentByCommentId(commentId);
	}

	@ResponseBody
	@RequestMapping(value = { "/delCommentReplyByReplyId" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryCommentReplyModel> delCommentReplyByReplyId(
			String replyId) {
		return this.diaryService.delCommentReplyByReplyId(replyId);
	}

	@ResponseBody
	@RequestMapping(value = { "/getDiaryCommentCount" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryCommentModel> getDiaryCommentCount(Integer diaId) {
		return this.diaryService.getDiaryCommentCount(diaId);
	}

	@ResponseBody
	@RequestMapping(value = { "/insertDiaryTop" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryModel> insertDiaryTop(String diaId,
			HttpServletRequest request) {
		return this.diaryService.insertDiaryTop(diaId, request);
	}

	@ResponseBody
	@RequestMapping(value = { "/deleteDiaryTop" }, produces = { "application/json;charset=UTF-8" })
	public ToJson<DiaryModel> deleteDiaryTop(String diaId,
			HttpServletRequest request) {
		return this.diaryService.deleteDiaryTop(diaId, request);
	}

	@ResponseBody
	@RequestMapping({ "/getReaders" })
	public ToJson<DiaryModel> getReaders(Integer diaId) {
		return this.diaryService.getReadUsers(diaId);
	}
}
