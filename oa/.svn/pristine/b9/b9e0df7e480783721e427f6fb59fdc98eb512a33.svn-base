package com.xoa.controller.enclosure;

import com.alibaba.fastjson.JSONObject;
import com.xoa.model.enclosure.Attachment;
import com.xoa.service.enclosure.EnclosureService;
import com.xoa.util.Constant;
import com.xoa.util.ToJson;
import com.xoa.util.common.MobileCheck;
import com.xoa.util.common.StringUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;
import java.util.ResourceBundle;
import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class EnclosureController {
	private Logger loger = LoggerFactory.getLogger(EnclosureController.class);

	@Resource
	private EnclosureService enclosureService;

	@RequestMapping(value = { "/upload" }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public void upload(@RequestParam("file") MultipartFile[] files,
			String module,
			@RequestParam(value = "company", required = false) String company,
			HttpServletRequest request, HttpServletResponse response) {
		ToJson json = new ToJson(0, null);

		StringBuffer sb = new StringBuffer();
		if (StringUtils.checkNull(company).booleanValue()) {
			sb.append(Constant.MYOA
					+ (String) request.getSession().getAttribute(
							"loginDateSouse"));
		} else {
			sb.append(company);
		}

		try {
			boolean a = false;
			for (int i = 0; i < files.length; i++) {
				MultipartFile file = files[i];
				if (file.getSize() == 0L) {
					a = true;
				}
			}
			if (a) {
				json.setFlag(1);
				json.setMsg("The file size is 0");
			} else {
				List list = this.enclosureService.upload(files, sb.toString(),
						module);
				json.setObj(list);
				json.setMsg("OK");
				json.setFlag(0);
			}

			response.setHeader("content-type", "text/html;charset=utf-8");
			response.setCharacterEncoding("utf-8");
			ServletOutputStream out = response.getOutputStream();
			OutputStreamWriter ow = new OutputStreamWriter(out, "UTF-8");

			ow.write(JSONObject.toJSONString(json));
			ow.flush();
			ow.close();
		} catch (Exception e) {
			json.setMsg(e.getMessage());
		}
	}

	@RequestMapping({ "/download" })
	public String download(@RequestParam("AID") String aid,
			@RequestParam("MODULE") String module,
			@RequestParam("YM") String ym,
			@RequestParam("ATTACHMENT_ID") String attachmentId,
			@RequestParam("COMPANY") String company,
			HttpServletResponse response, HttpServletRequest request)
			throws UnsupportedEncodingException {
		if (StringUtils.checkNull(company).booleanValue()) {
			company = "xoa1001";
		}

		System.setProperty("sun.jnu.encoding", "UTF-8");
		System.setProperty("file.encoding", "UTF-8");
		String attachmentName1 = request.getParameter("ATTACHMENT_NAME");
		String aName = "";
		if (attachmentName1.substring(attachmentName1.length() - 1,
				attachmentName1.length()).equals("*"))
			aName = attachmentName1.substring(0,
					request.getParameter("ATTACHMENT_NAME").length() - 1);
		else {
			aName = attachmentName1;
		}
		String attachmentName = URLDecoder.decode(aName, "UTF-8");

		ResourceBundle rb = ResourceBundle.getBundle("upload");
		String osName = System.getProperty("os.name");
		StringBuffer sb = new StringBuffer();
		if (osName.toLowerCase().startsWith("win"))
			sb = sb.append(rb.getString("upload.win"));
		else {
			sb = sb.append(rb.getString("upload.linux"));
		}
		if (StringUtils.checkNull(sb.toString()).booleanValue()) {
			String a = request.getRealPath("");
			sb.append(a);
			sb.append(System.getProperty("file.separator")).append("attach")
					.append(System.getProperty("file.separator"))
					.append(company)
					.append(System.getProperty("file.separator"))
					.append(module)
					.append(System.getProperty("file.separator")).append(ym)
					.append(System.getProperty("file.separator"))
					.append(attachmentId).append(".").append(attachmentName);
		} else {
			sb.append(System.getProperty("file.separator")).append("attach")
					.append(System.getProperty("file.separator"))
					.append(company)
					.append(System.getProperty("file.separator"))
					.append(module)
					.append(System.getProperty("file.separator")).append(ym)
					.append(System.getProperty("file.separator"))
					.append(attachmentId).append(".").append(attachmentName);
		}

		String path = sb.toString();
		response.setCharacterEncoding("utf-8");
		response.setContentType("multipart/form-data");
		String userAgent = request.getHeader("User-Agent").toUpperCase();
		if (!MobileCheck.isMobileDevice(userAgent)) {
			if ((userAgent.contains("MSIE")) || (userAgent.contains("TRIDENT"))
					|| (userAgent.contains("EDGE"))) {
				attachmentName = URLEncoder.encode(attachmentName, "utf-8");
				attachmentName = attachmentName.replace("+", "%20");
			} else {
				attachmentName = new String(attachmentName.getBytes("UTF-8"),
						"ISO-8859-1");
			}

		}

		response.setHeader("Content-disposition", String.format(
				"attachment; filename=\"%s\"", new Object[] { attachmentName }));
		try {
			File file = new File(path);

			if (!file.exists()) {
				request.setAttribute("message", "您要下载或查看的资源不存在！");

				return "您要下载或查看的资源不存在！".toString();
			}
			InputStream inputStream = new FileInputStream(new File(path));
			OutputStream os = response.getOutputStream();
			byte[] b = new byte[2048];
			int length;
			while ((length = inputStream.read(b)) > 0) {
				os.write(b, 0, length);
			}

			os.close();
			inputStream.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	@RequestMapping(value = { "/uploadCover" }, produces = { "application/json;charset=UTF-8" })
	public String uploadCover(@RequestParam("file") MultipartFile files,
			@RequestParam("AID") String aid,
			@RequestParam("MODULE") String module,
			@RequestParam("YM") String ym,
			@RequestParam("ATTACHMENT_ID") String attachmentId,
			@RequestParam("ATTACHMENT_NAME") String attachmentName,
			@RequestParam("COMPANY") String company,
			HttpServletResponse response, HttpServletRequest request)
			throws UnsupportedEncodingException {
		if (request.getCharacterEncoding() == null) {
			request.setCharacterEncoding("UTF-8");
		}

		ResourceBundle rb = ResourceBundle.getBundle("upload");
		String osName = System.getProperty("os.name");
		StringBuffer sb = new StringBuffer();
		if (osName.toLowerCase().startsWith("win"))
			sb = sb.append(rb.getString("upload.win"));
		else {
			sb = sb.append(rb.getString("upload.linux"));
		}

		String userAgent = request.getHeader("user-agent").toLowerCase();

		String path = sb.toString() + System.getProperty("file.separator")
				+ "attach" + System.getProperty("file.separator") + company
				+ System.getProperty("file.separator") + module
				+ System.getProperty("file.separator") + ym
				+ System.getProperty("file.separator") + attachmentId + "."
				+ attachmentName;
		try {
			File file = new File(path);

			if (file.exists()) {
				file.delete();

				files.transferTo(file);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	@RequestMapping(value = { "/delete" }, method = { org.springframework.web.bind.annotation.RequestMethod.GET }, produces = { "application/json;charset=UTF-8" })
	@ResponseBody
	public ToJson delete(@RequestParam("AID") String aid,
			@RequestParam("MODULE") String module,
			@RequestParam("YM") String ym,
			@RequestParam("ATTACHMENT_ID") String attachmentId,
			@RequestParam("ATTACHMENT_NAME") String attachmentName,
			@RequestParam("COMPANY") String company,
			HttpServletResponse response, HttpServletRequest request) {
		return this.enclosureService.delete(aid, module, ym, attachmentId,
				attachmentName, company, response, request);
	}

	@RequestMapping({ "/up" })
	public String cont(HttpServletRequest request) {
		return "app/upload/updwj";
	}

	public static boolean deleteFile(String fileName) {
		File file = new File(fileName);

		if ((file.exists()) && (file.isFile())) {
			if (file.delete()) {
				System.out.println("删除单个文件" + fileName + "成功！");
				return true;
			}
			System.out.println("删除单个文件" + fileName + "失败！");
			return false;
		}

		System.out.println("删除单个文件失败：" + fileName + "不存在！");
		return false;
	}

	@RequestMapping(value = { "/xs" }, produces = { "application/json;charset=UTF-8" })
	public void loadImage(@RequestParam("AID") String aid,
			@RequestParam("MODULE") String module,
			@RequestParam("YM") String ym,
			@RequestParam("ATTACHMENT_ID") String attachmentId,
			@RequestParam("ATTACHMENT_NAME") String attachmentName,
			@RequestParam("COMPANY") String company,
			HttpServletResponse response, HttpServletRequest request)
			throws Exception {
		if (StringUtils.checkNull(company).booleanValue()) {
			company = "xoa1001";
		}

		ResourceBundle rb = ResourceBundle.getBundle("upload");
		String osName = System.getProperty("os.name");
		StringBuffer sb = new StringBuffer();
		if (osName.toLowerCase().startsWith("win"))
			sb = sb.append(rb.getString("upload.win"));
		else {
			sb = sb.append(rb.getString("upload.linux"));
		}
		if (!MobileCheck.isMobileDevice(request.getHeader("user-agent"))) {
			attachmentName = URLDecoder.decode(attachmentName, "utf-8");
		}
		if (attachmentName.substring(attachmentName.length() - 1,
				attachmentName.length()).equals("*")) {
			attachmentName = attachmentName.substring(0,
					request.getParameter("ATTACHMENT_NAME").length() - 1);
		}

		String path = sb.toString() + System.getProperty("file.separator")
				+ "attach" + System.getProperty("file.separator") + company
				+ System.getProperty("file.separator") + module
				+ System.getProperty("file.separator") + ym
				+ System.getProperty("file.separator") + attachmentId + "."
				+ attachmentName;
		try {
			File file = new File(path);

			if (!file.exists()) {
				request.setAttribute("message", "您要下载或查看的资源不存在！");

				return;
			}
			FileInputStream inputStream = new FileInputStream(file);
			OutputStream os = response.getOutputStream();
			byte[] b = new byte[2048];
			int length;
			while ((length = inputStream.read(b)) > 0) {
				os.write(b, 0, length);
			}

			os.close();
			inputStream.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@ResponseBody
	@RequestMapping({ "attachment/findByAid" })
	public ToJson<Attachment> findByAttachId(int aid, String module,
			HttpServletRequest request) {
		return this.enclosureService.selectByPrimaryKey(Integer.valueOf(aid),
				module, request);
	}

	public static void writer(HttpServletResponse response, String str) {
		try {
			response.setHeader("Pragma", "No-cache");
			response.setHeader("Cache-Control", "no-cache");
			response.setCharacterEncoding("UTF-8");
			PrintWriter out = null;
			out = response.getWriter();
			out.print(str);
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
