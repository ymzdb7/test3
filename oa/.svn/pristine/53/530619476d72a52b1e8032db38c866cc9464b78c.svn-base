/*      */ package com.xoa.service.address.impl;
/*      */ 
/*      */ import com.xoa.dao.address.AddressGroupMapper;
/*      */ import com.xoa.dao.address.AddressMapper;
/*      */ import com.xoa.dao.hierarchical.HierarchicalGlobalMapper;
/*      */ import com.xoa.dao.hr.HrStaffInfoMapper;
/*      */ import com.xoa.model.address.Address;
/*      */ import com.xoa.model.address.AddressWithBLOBs;
/*      */ import com.xoa.model.addressGroup.AddressGroup;
/*      */ import com.xoa.model.addressGroup.AddressGroupWithBLOBs;
/*      */ import com.xoa.model.hierarchical.HierarchicalGlobal;
/*      */ import com.xoa.model.hr.HrStaffInfo;
/*      */ import com.xoa.model.users.Users;
/*      */ import com.xoa.service.address.AddressService;
/*      */ import com.xoa.util.ExcelUtil;
/*      */ import com.xoa.util.ToJson;
/*      */ import com.xoa.util.common.StringUtils;
/*      */ import com.xoa.util.common.log.FileUtils;
/*      */ import com.xoa.util.common.session.SessionUtils;
/*      */ import com.xoa.util.common.wrapper.BaseWrapper;
/*      */ import com.xoa.util.page.PageParams;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.InputStream;
/*      */ import java.math.BigDecimal;
/*      */ import java.text.SimpleDateFormat;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Date;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import java.util.Map;
/*      */ import java.util.ResourceBundle;
/*      */ import java.util.UUID;
/*      */ import javax.servlet.ServletOutputStream;
/*      */ import javax.servlet.http.HttpServletRequest;
/*      */ import javax.servlet.http.HttpServletResponse;
/*      */ import org.apache.commons.collections.map.HashedMap;
/*      */ import org.apache.poi.hssf.usermodel.HSSFSheet;
/*      */ import org.apache.poi.hssf.usermodel.HSSFWorkbook;
/*      */ import org.apache.poi.ss.usermodel.Cell;
/*      */ import org.apache.poi.ss.usermodel.CellStyle;
/*      */ import org.apache.poi.ss.usermodel.DateUtil;
/*      */ import org.apache.poi.ss.usermodel.Row;
/*      */ import org.springframework.beans.factory.annotation.Autowired;
/*      */ import org.springframework.stereotype.Service;
/*      */ import org.springframework.web.multipart.MultipartFile;
/*      */ 
/*      */ @Service
/*      */ public class AddressServiceImpl
/*      */   implements AddressService
/*      */ {
/*      */ 
/*      */   @Autowired
/*      */   AddressMapper addressMapper;
/*      */ 
/*      */   @Autowired
/*      */   AddressGroupMapper addressGroupMapper;
/*      */ 
/*      */   @Autowired
/*      */   HierarchicalGlobalMapper hierarchicalGlobalMapper;
/*      */ 
/*      */   @Autowired
/*      */   HrStaffInfoMapper hrStaffInfoMapper;
/*      */ 
/*      */   public BaseWrapper getUsersById(HttpServletRequest request, String groupId, String PUBLIC_FLAG, String SHARE_TYPE, String TYPE)
/*      */   {
/*   81 */     BaseWrapper baseWrapper = new BaseWrapper();
/*      */ 
/*   83 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*   84 */     if ((groupId != null) && 
/*   85 */       (groupId.equals("-1"))) {
/*   86 */       groupId = null;
/*      */     }
/*   88 */     List data = new ArrayList();
/*   89 */     List addressList = new ArrayList();
/*      */     List<AddressGroupWithBLOBs> addressGroupWithBLOBs2;
/*      */     Iterator i$;
/*      */     Address address;
/*   90 */     if (groupId == null) {
/*   91 */       Map param1 = new HashMap();
/*   92 */       param1.put("userId", users.getUserId());
/*   93 */       List<AddressGroupWithBLOBs> addressGroupWithBLOBs1 = this.addressGroupMapper.selectPublicGroup(param1);
/*   94 */       String privDept = null;
/*   95 */       String privRole = null;
/*   96 */       String privUser = null;
/*   97 */       Map maps = new HashMap();
/*   98 */       if ((users != null) && (users.getUserId() != null)) {
/*   99 */         privUser = users.getUserId();
/*  100 */         privRole = users.getUserPriv() + "";
/*  101 */         privDept = users.getDeptId() + "";
/*      */       }
/*  103 */       maps.put("userId", "");
/*  104 */       maps.put("privDept", privDept);
/*  105 */       maps.put("privRole", privRole);
/*  106 */       maps.put("privUser", privUser);
/*  107 */       addressGroupWithBLOBs2 = new ArrayList();
/*  108 */       List<AddressGroupWithBLOBs> addressGroupWithBLOBsList = this.addressGroupMapper.selectAllAddressGroup(maps);
/*      */ 
/*  110 */       if (addressGroupWithBLOBs1.size() > 0) {
/*  111 */         for (AddressGroupWithBLOBs addressGroupWithBLOBs4 : addressGroupWithBLOBs1) {
/*  112 */           addressGroupWithBLOBs2.add(addressGroupWithBLOBs4);
/*      */         }
/*      */       }
/*  115 */       if (addressGroupWithBLOBsList.size() > 0) {
/*  116 */         for (AddressGroupWithBLOBs addressGroupWithBLOBs3 : addressGroupWithBLOBsList) {
/*  117 */           addressGroupWithBLOBs2.add(addressGroupWithBLOBs3);
/*      */         }
/*      */       }
/*  120 */       Map param = new HashedMap();
/*  121 */       param.put("userId", users.getUserId());
/*  122 */       param.put("groupId", groupId);
/*  123 */       data = this.addressMapper.getUsersById(param);
/*  124 */       for (i$ = data.iterator(); i$.hasNext(); ) { address = (Address)i$.next();
/*  125 */         for (AddressGroupWithBLOBs addressGroupWithBLOBs : addressGroupWithBLOBs2) {
/*  126 */           if (address.getGroupId().intValue() == 0) {
/*  127 */             addressList.add(address);
/*  128 */             break;
/*  129 */           }if (address.getGroupId() == addressGroupWithBLOBs.getGroupId())
/*  130 */             addressList.add(address);
/*      */         }
/*      */       }
/*      */     }
/*      */     else
/*      */     {
/*  136 */       Map param = new HashedMap();
/*  137 */       param.put("userId", users.getUserId());
/*  138 */       param.put("groupId", groupId);
/*  139 */       addressList = this.addressMapper.getUsersById(param);
/*      */     }
/*  141 */     baseWrapper.setData(addressList);
/*  142 */     baseWrapper.setStatus(true);
/*  143 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper getAddressUser(HttpServletRequest request, String groupId, String PUBLIC_FLAG, String SHARE_TYPE, String TYPE)
/*      */   {
/*  151 */     BaseWrapper baseWrapper = new BaseWrapper();
/*      */ 
/*  153 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  154 */     if ((groupId != null) && 
/*  155 */       (groupId.equals("-1"))) {
/*  156 */       groupId = null;
/*      */     }
/*  158 */     List data = new ArrayList();
/*  159 */     List addressList = new ArrayList();
/*      */     List<AddressGroupWithBLOBs>  addressGroupWithBLOBs2;
/*      */     Iterator i$;
/*      */     Address address;
/*  160 */     if (groupId == null) {
/*  161 */       Map param1 = new HashMap();
/*  162 */       param1.put("userId", users.getUserId());
/*  163 */       List<AddressGroupWithBLOBs> addressGroupWithBLOBs1 = this.addressGroupMapper.selectPublicGroup(param1);
/*  164 */       String privDept = null;
/*  165 */       String privRole = null;
/*  166 */       String privUser = null;
/*  167 */       Map maps = new HashMap();
/*  168 */       if ((users != null) && (users.getUserId() != null)) {
/*  169 */         privUser = users.getUserId();
/*  170 */         privRole = users.getUserPriv() + "";
/*  171 */         privDept = users.getDeptId() + "";
/*      */       }
/*  173 */       maps.put("userId", "");
/*  174 */       maps.put("privDept", privDept);
/*  175 */       maps.put("privRole", privRole);
/*  176 */       maps.put("privUser", privUser);
/*  177 */       addressGroupWithBLOBs2 = new ArrayList();
/*  178 */       List<AddressGroupWithBLOBs>  addressGroupWithBLOBsList = this.addressGroupMapper.selectAllAddressGroup(maps);
/*      */ 
/*  180 */       if (addressGroupWithBLOBs1.size() > 0) {
/*  181 */         for (AddressGroupWithBLOBs addressGroupWithBLOBs4 : addressGroupWithBLOBs1) {
/*  182 */           addressGroupWithBLOBs2.add(addressGroupWithBLOBs4);
/*      */         }
/*      */       }
/*  185 */       if (addressGroupWithBLOBsList.size() > 0) {
/*  186 */         for (AddressGroupWithBLOBs addressGroupWithBLOBs3 : addressGroupWithBLOBsList) {
/*  187 */           addressGroupWithBLOBs2.add(addressGroupWithBLOBs3);
/*      */         }
/*      */       }
/*  190 */       Map param = new HashedMap();
/*  191 */       param.put("userId", users.getUserId());
/*  192 */       param.put("groupId", groupId);
/*  193 */       data = this.addressMapper.getUsersById(param);
/*  194 */       for (i$ = data.iterator(); i$.hasNext(); ) { address = (Address)i$.next();
/*  195 */         for (AddressGroupWithBLOBs addressGroupWithBLOBs : addressGroupWithBLOBs2) {
/*  196 */           if (address.getGroupId().intValue() == 0) {
/*  197 */             addressList.add(address);
/*  198 */             break;
/*  199 */           }if (address.getGroupId() == addressGroupWithBLOBs.getGroupId())
/*  200 */             addressList.add(address);
/*      */         }
/*      */       }
/*      */     }
/*      */     else
/*      */     {
/*  206 */       Map param = new HashedMap();
/*  207 */       param.put("userId", users.getUserId());
/*  208 */       param.put("groupId", groupId);
/*  209 */       addressList = this.addressMapper.getUsersById(param);
/*      */     }
/*  211 */     baseWrapper.setData(addressList);
/*  212 */     baseWrapper.setStatus(true);
/*  213 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper selectByPrimaryKey(String addId)
/*      */   {
/*  218 */     BaseWrapper baseWrapper = new BaseWrapper();
/*  219 */     baseWrapper.setData(this.addressMapper.selectByPrimaryKey(Integer.valueOf(Integer.parseInt(addId))));
/*  220 */     baseWrapper.setStatus(true);
/*  221 */     baseWrapper.setFlag(true);
/*  222 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper addUser(HttpServletRequest request, AddressWithBLOBs addressWithBLOBs, String birthday)
/*      */   {
/*  233 */     BaseWrapper baseWrapper = new BaseWrapper();
/*  234 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*      */     try {
/*  236 */       if (!StringUtils.checkNull(birthday).booleanValue()) {
/*  237 */         Date d = new SimpleDateFormat("yyyy-MM-dd").parse(birthday);
/*  238 */         addressWithBLOBs.setBirthday(d);
/*      */       }
/*  240 */       addressWithBLOBs.setUserId(users.getUserId());
/*  241 */       if (this.addressMapper.insert(addressWithBLOBs) > 0) {
/*  242 */         baseWrapper.setStatus(true);
/*  243 */         baseWrapper.setFlag(true);
/*  244 */         baseWrapper.setData(addressWithBLOBs);
/*      */       }
/*      */     } catch (Exception e) {
/*  247 */       e.printStackTrace();
/*      */     }
/*      */ 
/*  250 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper getNotUserById(HttpServletRequest request, String groupId, String PUBLIC_FLAG, String SHARE_TYPE, String TYPE) {
/*  254 */     BaseWrapper baseWrapper = new BaseWrapper();
/*      */ 
/*  256 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*      */ 
/*  258 */     Map param = new HashedMap();
/*  259 */     param.put("userId", users.getUserId());
/*  260 */     param.put("groupId", groupId);
/*  261 */     List data = this.addressMapper.getNotUserById(param);
/*  262 */     List addressList = new ArrayList();
/*  263 */     Map map = new HashMap();
/*  264 */     map.put("userId", "");
/*  265 */     List addressGroupWithBLOBsList = this.addressGroupMapper.selectPublicGroup(map);
/*  266 */     boolean a = false;
/*  267 */     for (int x = 0; x < data.size(); x++) {
/*  268 */       for (int y = 0; y < addressGroupWithBLOBsList.size(); y++) {
/*  269 */         if (((Address)data.get(x)).getGroupId() == ((AddressGroupWithBLOBs)addressGroupWithBLOBsList.get(y)).getGroupId())
/*  270 */           a = true;
/*      */         else {
/*  272 */           a = false;
/*      */         }
/*  274 */         if (a) {
/*  275 */           data.remove(x);
/*  276 */           x--;
/*  277 */           break;
/*      */         }
/*      */       }
/*      */     }
/*  281 */     baseWrapper.setData(data);
/*  282 */     baseWrapper.setStatus(true);
/*  283 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper updateUser(HttpServletRequest request, AddressWithBLOBs addressWithBLOBs, String birthday) {
/*  287 */     BaseWrapper baseWrapper = new BaseWrapper();
/*  288 */     Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*      */     try
/*      */     {
/*  291 */       if (!StringUtils.checkNull(birthday).booleanValue()) {
/*  292 */         Date d = new SimpleDateFormat("yyyy-MM-dd").parse(birthday);
/*  293 */         addressWithBLOBs.setBirthday(d);
/*      */       }
/*  295 */       addressWithBLOBs.setUserId(users.getUserId());
/*  296 */       if (this.addressMapper.updateByPrimaryKey(addressWithBLOBs) > 0) {
/*  297 */         baseWrapper.setStatus(true);
/*  298 */         baseWrapper.setFlag(true);
/*  299 */         baseWrapper.setData(addressWithBLOBs);
/*      */       }
/*      */     } catch (Exception e) {
/*  302 */       e.printStackTrace();
/*      */     }
/*      */ 
/*  305 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper deleteUser(HttpServletRequest request, Integer addId) {
/*  309 */     BaseWrapper baseWrapper = new BaseWrapper();
/*  310 */     if (this.addressMapper.deleteByPrimaryKey(addId) > 0) {
/*  311 */       baseWrapper.setStatus(true);
/*  312 */       baseWrapper.setFlag(true);
/*  313 */       baseWrapper.setData("删除成功");
/*      */     }
/*  315 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper queryAddress(Integer groupId, String name)
/*      */   {
/*  320 */     BaseWrapper baseWrapper = new BaseWrapper();
/*      */     try {
/*  322 */       List addresses = this.addressMapper.queryAddress(groupId, name);
/*  323 */       baseWrapper.setStatus(true);
/*  324 */       baseWrapper.setFlag(true);
/*  325 */       baseWrapper.setData(addresses);
/*      */     } catch (Exception e) {
/*  327 */       e.printStackTrace();
/*  328 */       baseWrapper.setStatus(false);
/*  329 */       baseWrapper.setFlag(false);
/*      */     }
/*  331 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper getColleagues(HttpServletRequest request)
/*      */   {
/*  336 */     BaseWrapper baseWrapper = new BaseWrapper();
/*  337 */     Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  338 */     boolean flag = false;
/*  339 */     HierarchicalGlobal hierarchicalGlobal = new HierarchicalGlobal();
/*  340 */     hierarchicalGlobal.setModelId("0132");
/*  341 */     HierarchicalGlobal global = this.hierarchicalGlobalMapper.selByModel(hierarchicalGlobal);
/*      */ 
/*  343 */     String globalDepts = global.getGlobalDept();
/*  344 */     String globalPersons = global.getGlobalPerson();
/*  345 */     String globalPriv = global.getGlobalPriv();
/*      */ 
/*  348 */     if (!StringUtils.checkNull(globalDepts).booleanValue()) {
/*  349 */       String[] split = globalDepts.split(",");
/*  350 */       if (split.length > 0) {
/*  351 */         for (String deptId : split) {
/*  352 */           if (deptId.equals(user.getDeptId()))
/*  353 */             flag = true;
/*      */         }
/*      */       }
/*      */     }
/*  357 */     else if (!StringUtils.checkNull(globalPriv).booleanValue()) {
/*  358 */       String[] split = globalPriv.split(",");
/*  359 */       if (split.length > 0) {
/*  360 */         for (String userPriv : split) {
/*  361 */           if (userPriv.equals(user.getUserPriv()))
/*  362 */             flag = true;
/*      */         }
/*      */       }
/*      */     }
/*  366 */     else if (!StringUtils.checkNull(globalPersons).booleanValue()) {
/*  367 */       String[] split = globalPersons.split(",");
/*  368 */       if (split.length > 0) {
/*  369 */         for (String userId : split) {
/*  370 */           if (userId.equals(user.getUserId())) {
/*  371 */             flag = true;
/*      */           }
/*      */         }
/*      */ 
/*      */       }
/*      */ 
/*      */     }
/*      */ 
/*  379 */     if (flag) {
/*  380 */       List alluser = this.addressMapper.getAllUsers(null);
/*  381 */       baseWrapper.setData(alluser);
/*  382 */       baseWrapper.setFlag(true);
/*  383 */       baseWrapper.setStatus(true);
/*      */     } else {
/*  385 */       Map map = new HashMap();
/*  386 */       map.put("deptId", user.getDeptId());
/*  387 */       List usersByDeptId = this.addressMapper.getAllUsers(map);
/*  388 */       baseWrapper.setData(usersByDeptId);
/*  389 */       baseWrapper.setFlag(true);
/*  390 */       baseWrapper.setStatus(true);
/*      */     }
/*      */ 
/*  393 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public ToJson<Address> importAddress(HttpServletRequest request, HttpServletResponse response, MultipartFile file)
/*      */   {
/*  398 */     ToJson json = new ToJson();
/*      */     try
/*      */     {
/*  402 */       ResourceBundle rb = ResourceBundle.getBundle("upload");
/*  403 */       String osName = System.getProperty("os.name");
/*  404 */       StringBuffer path = new StringBuffer();
/*  405 */       if (osName.toLowerCase().startsWith("win"))
/*  406 */         path = path.append(rb.getString("upload.win"));
/*      */       else {
/*  408 */         path = path.append(rb.getString("upload.linux"));
/*      */       }
/*      */ 
/*  411 */       if (file.isEmpty()) {
/*  412 */         json.setMsg("请上传文件！");
/*  413 */         json.setFlag(1);
/*  414 */         return json;
/*      */       }
/*  416 */       String fileName = file.getOriginalFilename();
/*  417 */       if ((fileName.endsWith(".xls")) || (fileName.endsWith(".xlsx"))) {
/*  418 */         String uuid = UUID.randomUUID().toString().replaceAll("-", "");
/*  419 */         int pos = fileName.indexOf(".");
/*  420 */         String extName = fileName.substring(pos);
/*  421 */         String newFileName = uuid + extName;
/*  422 */         File dest = new File(path.toString(), newFileName);
/*  423 */         file.transferTo(dest);
/*      */ 
/*  426 */         String readPath = path.append(System.getProperty("file.separator")).append(newFileName).toString();
/*  427 */         InputStream in = new FileInputStream(readPath);
/*  428 */         HSSFWorkbook excelObj = new HSSFWorkbook(in);
/*  429 */         HSSFSheet sheetObj = excelObj.getSheetAt(0);
/*  430 */         Row row = sheetObj.getRow(0);
/*  431 */         int colNum = row.getPhysicalNumberOfCells();
/*  432 */         int lastRowNum = sheetObj.getLastRowNum();
/*  433 */         Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  434 */         Address address = null;
/*      */ 
/*  436 */         for (int i = 1; i <= lastRowNum; i++) {
/*  437 */           address = new Address();
/*  438 */           address.setUserId(users.getUserId());
/*  439 */           row = sheetObj.getRow(i);
/*  440 */           if (row != null) {
/*  441 */             for (int j = 0; j < colNum; j++) {
/*  442 */               Cell cell = row.getCell(j);
/*  443 */               if (cell != null) {
/*  444 */                 switch (j)
/*      */                 {
/*      */                 case 0:
/*  447 */                   String group = cell.getStringCellValue();
/*  448 */                   if ((group.equals("默认")) || (group.equals(""))) {
/*  449 */                     address.setGroupId(Integer.valueOf(0));
/*      */                   } else {
/*  451 */                     AddressGroup addressGroup1 = new AddressGroup();
/*  452 */                     addressGroup1.setGroupName(group);
/*  453 */                     AddressGroup addressGroup = this.addressGroupMapper.selectGroup(addressGroup1);
/*  454 */                     address.setGroupId(addressGroup.getGroupId());
/*      */                   }
/*  456 */                   break;
/*      */                 case 1:
/*  459 */                   address.setPsnName(cell.getStringCellValue());
/*  460 */                   break;
/*      */                 case 2:
/*  463 */                   String sex = cell.getStringCellValue();
/*  464 */                   if (sex.equals("男"))
/*  465 */                     address.setSex("0");
/*  466 */                   else if (sex.equals("女"))
/*  467 */                     address.setSex("1");
/*      */                   else {
/*  469 */                     address.setSex("");
/*      */                   }
/*  471 */                   break;
/*      */                 case 3:
/*  474 */                   address.setNickName(cell.getStringCellValue());
/*  475 */                   break;
/*      */                 case 4:
/*  478 */                   String result = null;
/*  479 */                   if (cell.getCellType() != 0) continue;
/*  480 */                   short format = cell.getCellStyle().getDataFormat();
/*  481 */                   SimpleDateFormat sdf = null;
/*  482 */                   if ((format == 14) || (format == 31) || (format == 57) || (format == 58))
/*      */                   {
/*  484 */                     sdf = new SimpleDateFormat("yyyy-MM-dd");
/*  485 */                   } else if ((format == 20) || (format == 32))
/*      */                   {
/*  487 */                     sdf = new SimpleDateFormat("HH:mm");
/*      */                   }
/*  489 */                   double v = cell.getNumericCellValue();
/*  490 */                   Date dates = DateUtil.getJavaDate(v);
/*  491 */                   result = sdf.format(dates);
/*  492 */                   address.setBirthday(dates);
/*  493 */                   break;
/*      */                 case 5:
/*  497 */                   address.setMinistration(cell.getStringCellValue());
/*  498 */                   break;
/*      */                 case 6:
/*  501 */                   address.setMate(cell.getStringCellValue());
/*  502 */                   break;
/*      */                 case 7:
/*  505 */                   address.setChild(cell.getStringCellValue());
/*  506 */                   break;
/*      */                 case 8:
/*  509 */                   address.setDeptName(cell.getStringCellValue());
/*  510 */                   break;
/*      */                 case 9:
/*  513 */                   address.setAddDept(cell.getStringCellValue());
/*  514 */                   break;
/*      */                 case 10:
/*  517 */                   address.setPostNoDept(cell.getStringCellValue());
/*  518 */                   break;
/*      */                 case 11:
/*  521 */                   address.setTelNoDept(cell.getStringCellValue());
/*  522 */                   break;
/*      */                 case 12:
/*  525 */                   address.setFaxNoDept(cell.getStringCellValue());
/*  526 */                   break;
/*      */                 case 13:
/*  529 */                   address.setAddHome(cell.getStringCellValue());
/*  530 */                   break;
/*      */                 case 14:
/*  533 */                   address.setPostNoHome(cell.getStringCellValue());
/*  534 */                   break;
/*      */                 case 15:
/*  537 */                   address.setTelNoHome(cell.getStringCellValue());
/*  538 */                   break;
/*      */                 case 16:
/*  541 */                   address.setMobilNo(cell.getStringCellValue());
/*  542 */                   break;
/*      */                 case 17:
/*  545 */                   address.setBpNo(cell.getStringCellValue());
/*  546 */                   break;
/*      */                 case 18:
/*  549 */                   address.setEmail(cell.getStringCellValue());
/*  550 */                   break;
/*      */                 case 19:
/*  553 */                   address.setOicqNo(cell.getStringCellValue());
/*  554 */                   break;
/*      */                 case 20:
/*  557 */                   address.setIcqNo(cell.getStringCellValue());
/*  558 */                   break;
/*      */                 case 21:
/*  561 */                   address.setNotes(cell.getStringCellValue());
/*  562 */                   break;
/*      */                 default:
/*  564 */                   json.setFlag(0);
/*  565 */                   json.setMsg("err");
/*      */                 }
/*      */               }
/*      */             }
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  573 */         dest.delete();
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/*  579 */       e.printStackTrace();
/*  580 */       json.setMsg("err");
/*  581 */       json.setFlag(1);
/*      */     }
/*  583 */     return json;
/*      */   }
/*      */ 
/*      */   public BaseWrapper exportAddress(HttpServletRequest request, HttpServletResponse response, Integer groupId)
/*      */   {
/*  588 */     BaseWrapper baseWrapper = new BaseWrapper();
/*      */     try {
/*  590 */       Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*      */ 
/*  592 */       Map param = new HashedMap();
/*  593 */       param.put("userId", users.getUserId());
/*  594 */       param.put("groupId", groupId);
/*  595 */       List<Address> data = this.addressMapper.getUsersById(param);
/*  596 */       List<AddressGroup> groups = this.addressGroupMapper.getAllGroupsMap();
/*  597 */       Map groupsMap = new HashMap();
/*      */ 
/*  599 */       for (AddressGroup addressGroup : groups) {
/*  600 */         groupsMap.put(addressGroup.getGroupId(), addressGroup.getGroupName());
/*      */       }
/*      */ 
/*  603 */       for (Address a : data) {
/*  604 */         if (a.getGroupId() != null)
/*  605 */           a.setGroupName((String)groupsMap.get(a.getGroupId()));
/*      */         else {
/*  607 */           a.setGroupName("全部");
/*      */         }
/*      */       }
/*  610 */       HSSFWorkbook workbook1 = ExcelUtil.makeExcelHead("联系人信息", 9);
/*  611 */       String[] secondTitles = { "分组", "姓名", "职位", "昵称", "电子邮件", "手机", "QQ", "性别", "生日", "配偶", "子女", "家庭邮编", "家庭地址", "家庭电话", "单位名称", "单位邮编", "单位地址", "工作电话", "工作传真", "备注" };
/*  612 */       HSSFWorkbook workbook2 = ExcelUtil.makeSecondHead(workbook1, secondTitles);
/*  613 */       String[] beanProperty = { "groupName", "psnName", "ministration", "nickName", "email", "mobilNo", "oicqNo", "sex", "birthday", "mobilNo", "mate", "child", "postNoHome", "addHome", "telNoHome", "deptName", "postNoDept", "addDept", "telNoDept", "faxNoDept", "notes" };
/*      */ 
/*  615 */       HSSFWorkbook workbook = ExcelUtil.exportExcelData(workbook2, data, beanProperty);
/*  616 */       ServletOutputStream out = response.getOutputStream();
/*      */ 
/*  618 */       String filename = "联系人信息表.xls";
/*  619 */       filename = FileUtils.encodeDownloadFilename(filename, request.getHeader("user-agent"));
/*  620 */       response.setContentType("application/vnd.ms-excel");
/*  621 */       response.setHeader("content-disposition", "attachment;filename=" + filename);
/*  622 */       workbook.write(out);
/*      */     } catch (Exception e) {
/*  624 */       e.printStackTrace();
/*      */     }
/*  626 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public ToJson<Address> selectAddress(HttpServletRequest request, Integer page, Integer pageSize, boolean useFlag, Address address, String export, HttpServletResponse response)
/*      */   {
/*  638 */     ToJson json = new ToJson();
/*      */     try {
/*  640 */       PageParams pageParams = new PageParams();
/*  641 */       pageParams.setPage(page);
/*  642 */       pageParams.setPageSize(pageSize);
/*  643 */       pageParams.setUseFlag(Boolean.valueOf(useFlag));
/*  644 */       Map map = new HashMap();
/*  645 */       map.put("page", pageParams);
/*  646 */       map.put("address", address);
/*  647 */       List<Address> addressList = this.addressMapper.selectAddress(map);
/*  648 */       if ((addressList != null) && (addressList.size() > 0)) {
/*  649 */         for (Address address1 : addressList) {
/*  650 */           if (address1.getGroupId().intValue() == 0) {
/*  651 */             address1.setGroupName("默认");
/*      */           } else {
/*  653 */             AddressGroup addressGroup1 = new AddressGroup();
/*  654 */             addressGroup1.setGroupId(address1.getGroupId());
/*  655 */             AddressGroup addressGroup = this.addressGroupMapper.selectGroup(addressGroup1);
/*  656 */             address1.setGroupName(addressGroup.getGroupName());
/*      */           }
/*      */         }
/*      */       }
/*  660 */       if (export == null) {
/*  661 */         export = "0";
/*      */       }
/*  663 */       if (export.equals("1")) {
/*  664 */         HSSFWorkbook workbook1 = ExcelUtil.makeExcelHead("联系人信息", 20);
/*  665 */         String[] secondTitles = { "分组", "姓名", "职位", "昵称", "电子邮件", "手机", "QQ", "性别", "生日", "配偶", "子女", "家庭邮编", "家庭地址", "家庭电话", "单位名称", "单位邮编", "单位地址", "工作电话", "工作传真", "备注" };
/*      */ 
/*  668 */         HSSFWorkbook workbook2 = ExcelUtil.makeSecondHead(workbook1, secondTitles);
/*  669 */         String[] beanProperty = { "groupName", "psnName", "ministration", "nickName", "email", "mobilNo", "oicqNo", "sex", "birthday", "mobilNo", "mate", "child", "postNoHome", "addHome", "telNoHome", "deptName", "postNoDept", "addDept", "telNoDept", "faxNoDept", "notes" };
/*  670 */         HSSFWorkbook workbook = ExcelUtil.exportExcelData(workbook2, addressList, beanProperty);
/*  671 */         ServletOutputStream out = response.getOutputStream();
/*  672 */         String filename = "联系人信息表.xls";
/*  673 */         filename = FileUtils.encodeDownloadFilename(filename, request.getHeader("user-agent"));
/*  674 */         response.setContentType("application/vnd.ms-excel;charset=UTF-8");
/*  675 */         response.setHeader("content-disposition", "attachment;filename=" + filename);
/*  676 */         workbook.write(out);
/*  677 */         out.close();
/*      */       }
/*      */ 
/*  680 */       json.setObj(addressList);
/*  681 */       json.setTotleNum(pageParams.getTotal());
/*  682 */       json.setFlag(0);
/*  683 */       json.setMsg("ok");
/*      */     } catch (Exception e) {
/*  685 */       e.printStackTrace();
/*  686 */       json.setMsg(e.getMessage());
/*  687 */       json.setFlag(1);
/*      */     }
/*      */ 
/*  690 */     return json;
/*      */   }
/*      */ 
/*      */   public ToJson<Users> selectUser(HttpServletRequest request, Integer page, Integer pageSize, boolean useFlag, Users user)
/*      */   {
/*  699 */     ToJson json = new ToJson();
/*      */     try {
/*  701 */       PageParams pageParams = new PageParams();
/*  702 */       pageParams.setPage(page);
/*  703 */       pageParams.setPageSize(pageSize);
/*  704 */       pageParams.setUseFlag(Boolean.valueOf(useFlag));
/*  705 */       Map map = new HashMap();
/*  706 */       map.put("page", pageParams);
/*  707 */       map.put("user", user);
/*  708 */       List usersList = this.addressMapper.selectUser(map);
/*  709 */       json.setObj(usersList);
/*  710 */       json.setTotleNum(pageParams.getTotal());
/*  711 */       json.setFlag(0);
/*  712 */       json.setMsg("ok");
/*      */     } catch (Exception e) {
/*  714 */       e.printStackTrace();
/*  715 */       json.setMsg(e.getMessage());
/*  716 */       json.setFlag(1);
/*      */     }
/*  718 */     return json;
/*      */   }
/*      */   public ToJson<Users> getUserInfoById(Integer uid, HttpServletRequest request) {
/*  721 */     ToJson json = new ToJson();
/*      */     try {
/*  723 */       Users loginUser = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  724 */       HrStaffInfo hrStaffInfo = this.hrStaffInfoMapper.getStaffByUserId(loginUser.getUserId());
/*  725 */       Users user = new Users();
/*  726 */       if ((hrStaffInfo == null) || (hrStaffInfo.getUserdef5().equals("1"))) {
/*  727 */         user = this.addressMapper.getUserById(uid);
/*  728 */         HrStaffInfo hrStaffInfo1 = this.hrStaffInfoMapper.getStaffByUserId(user.getUserId());
/*  729 */         if ((hrStaffInfo1 != null) && 
/*  730 */           (hrStaffInfo1.getUserdef5() != null) && (hrStaffInfo1.getUserdef5() != "") && (
/*  731 */           (hrStaffInfo1.getUserdef5().equals("4")) || (hrStaffInfo1.getUserdef5().equals("5")))) {
/*  732 */           user.setTelNoDept("没有权限");
/*  733 */           user.setMobilNo("没有权限");
/*      */         }
/*      */ 
/*      */       }
/*      */ 
/*  738 */       json.setObject(user);
/*  739 */       json.setFlag(0);
/*  740 */       json.setMsg("ok");
/*      */     } catch (Exception e) {
/*  742 */       e.printStackTrace();
/*  743 */       json.setMsg(e.getMessage());
/*  744 */       json.setFlag(1);
/*      */     }
/*  746 */     return json;
/*      */   }
/*      */ 
/*      */   public ToJson<AddressWithBLOBs> importPublicAddressWithBLOBs(Integer groupId, MultipartFile file, HttpServletRequest request, HttpServletResponse response)
/*      */   {
/*  751 */     ToJson json = new ToJson();
/*      */ 
/*  753 */     Integer successCount = Integer.valueOf(0);
/*      */     try
/*      */     {
/*  757 */       ResourceBundle rb = ResourceBundle.getBundle("upload");
/*  758 */       String osName = System.getProperty("os.name");
/*  759 */       StringBuffer path = new StringBuffer();
/*  760 */       if (osName.toLowerCase().startsWith("win"))
/*  761 */         path = path.append(rb.getString("upload.win"));
/*      */       else {
/*  763 */         path = path.append(rb.getString("upload.linux"));
/*      */       }
/*  765 */       String path1 = path.toString();
/*      */ 
/*  767 */       if (file.isEmpty()) {
/*  768 */         json.setMsg("请上传文件！");
/*  769 */         json.setFlag(1);
/*  770 */         return json;
/*      */       }
/*  772 */       String fileName = file.getOriginalFilename();
/*  773 */       if ((fileName.endsWith(".xls")) || (fileName.endsWith(".xlsx"))) {
/*  774 */         String uuid = UUID.randomUUID().toString().replaceAll("-", "");
/*  775 */         int pos = fileName.indexOf(".");
/*  776 */         String extName = fileName.substring(pos);
/*  777 */         String newFileName = uuid + extName;
/*  778 */         if (!file.isEmpty()) {
/*      */           try {
/*  780 */             if (!new File(path1, newFileName).exists()) {
/*  781 */               new File(path1, newFileName).mkdirs();
/*      */             }
/*      */ 
/*  784 */             file.transferTo(new File(path1, newFileName));
/*      */           } catch (Exception e) {
/*  786 */             e.printStackTrace();
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  793 */         String readPath = path.append(System.getProperty("file.separator")).append(newFileName).toString();
/*  794 */         InputStream in = new FileInputStream(readPath);
/*  795 */         HSSFWorkbook excelObj = new HSSFWorkbook(in);
/*  796 */         HSSFSheet sheetObj = excelObj.getSheetAt(0);
/*  797 */         Row row = sheetObj.getRow(0);
/*  798 */         int colNum = row.getPhysicalNumberOfCells();
/*  799 */         int lastRowNum = sheetObj.getLastRowNum();
/*  800 */         Users users = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  801 */         AddressWithBLOBs address = null;
/*  802 */         for (int i = 1; i <= lastRowNum; i++) {
/*  803 */           address = new AddressWithBLOBs();
/*  804 */           address.setGroupId(groupId);
/*  805 */           address.setUserId(users.getUserId());
/*  806 */           row = sheetObj.getRow(i);
/*  807 */           if (row != null) {
/*  808 */             for (int j = 0; j < colNum; j++) {
/*  809 */               Cell cell = row.getCell(j);
/*  810 */               String value = "";
/*  811 */               if (cell != null) {
/*  812 */                 switch (j)
/*      */                 {
/*      */                 case 0:
/*  815 */                   address.setPsnName(cell.getStringCellValue());
/*  816 */                   break;
/*      */                 case 1:
/*  819 */                   String sex = cell.getStringCellValue();
/*  820 */                   if (sex.equals("男"))
/*  821 */                     address.setSex("0");
/*  822 */                   else if (sex.equals("女"))
/*  823 */                     address.setSex("1");
/*      */                   else {
/*  825 */                     address.setSex("");
/*      */                   }
/*  827 */                   break;
/*      */                 case 2:
/*  830 */                   address.setNickName(cell.getStringCellValue());
/*  831 */                   break;
/*      */                 case 3:
/*  834 */                   String result = null;
/*  835 */                   if (cell.getCellType() != 0) continue;
/*  836 */                   short format = cell.getCellStyle().getDataFormat();
/*  837 */                   SimpleDateFormat sdf = null;
/*  838 */                   if ((format == 14) || (format == 31) || (format == 57) || (format == 58))
/*      */                   {
/*  840 */                     sdf = new SimpleDateFormat("yyyy-MM-dd");
/*  841 */                   } else if ((format == 20) || (format == 32))
/*      */                   {
/*  843 */                     sdf = new SimpleDateFormat("HH:mm");
/*      */                   }
/*  845 */                   double v = cell.getNumericCellValue();
/*  846 */                   Date dates = DateUtil.getJavaDate(v);
/*  847 */                   result = sdf.format(dates);
/*  848 */                   address.setBirthday(dates);
/*  849 */                   break;
/*      */                 case 4:
/*  853 */                   address.setMinistration(cell.getStringCellValue());
/*  854 */                   break;
/*      */                 case 5:
/*  857 */                   address.setMate(cell.getStringCellValue());
/*  858 */                   break;
/*      */                 case 6:
/*  861 */                   address.setChild(cell.getStringCellValue());
/*  862 */                   break;
/*      */                 case 7:
/*  865 */                   address.setDeptName(cell.getStringCellValue());
/*  866 */                   break;
/*      */                 case 8:
/*  869 */                   address.setAddDept(cell.getStringCellValue());
/*  870 */                   break;
/*      */                 case 9:
/*  873 */                   BigDecimal big9 = new BigDecimal(cell.getNumericCellValue());
/*  874 */                   value = big9.toString();
/*      */ 
/*  876 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  877 */                     String[] item = value.split("[.]");
/*  878 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  879 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  882 */                   address.setPostNoDept(value);
/*  883 */                   break;
/*      */                 case 10:
/*  886 */                   BigDecimal big = new BigDecimal(cell.getNumericCellValue());
/*  887 */                   value = big.toString();
/*      */ 
/*  889 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  890 */                     String[] item = value.split("[.]");
/*  891 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  892 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  895 */                   address.setTelNoDept(value);
/*  896 */                   break;
/*      */                 case 11:
/*  899 */                   BigDecimal big11 = new BigDecimal(cell.getNumericCellValue());
/*  900 */                   value = big11.toString();
/*      */ 
/*  902 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  903 */                     String[] item = value.split("[.]");
/*  904 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  905 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  908 */                   address.setFaxNoDept(value);
/*  909 */                   break;
/*      */                 case 12:
/*  912 */                   address.setAddHome(cell.getStringCellValue());
/*  913 */                   break;
/*      */                 case 13:
/*  916 */                   BigDecimal big13 = new BigDecimal(cell.getNumericCellValue());
/*  917 */                   value = big13.toString();
/*      */ 
/*  919 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  920 */                     String[] item = value.split("[.]");
/*  921 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  922 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  925 */                   address.setPostNoHome(value);
/*  926 */                   break;
/*      */                 case 14:
/*  929 */                   BigDecimal big14 = new BigDecimal(cell.getNumericCellValue());
/*  930 */                   value = big14.toString();
/*      */ 
/*  932 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  933 */                     String[] item = value.split("[.]");
/*  934 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  935 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  938 */                   address.setTelNoHome(value);
/*  939 */                   break;
/*      */                 case 15:
/*  942 */                   BigDecimal big15 = new BigDecimal(cell.getNumericCellValue());
/*  943 */                   value = big15.toString();
/*      */ 
/*  945 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  946 */                     String[] item = value.split("[.]");
/*  947 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  948 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  951 */                   address.setMobilNo(value);
/*  952 */                   break;
/*      */                 case 16:
/*  955 */                   BigDecimal big16 = new BigDecimal(cell.getNumericCellValue());
/*  956 */                   value = big16.toString();
/*      */ 
/*  958 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  959 */                     String[] item = value.split("[.]");
/*  960 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  961 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  964 */                   address.setBpNo(value);
/*  965 */                   break;
/*      */                 case 17:
/*  968 */                   address.setEmail(cell.getStringCellValue());
/*  969 */                   break;
/*      */                 case 18:
/*  972 */                   BigDecimal big18 = new BigDecimal(cell.getNumericCellValue());
/*  973 */                   value = big18.toString();
/*      */ 
/*  975 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  976 */                     String[] item = value.split("[.]");
/*  977 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  978 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  981 */                   address.setOicqNo(value);
/*  982 */                   break;
/*      */                 case 19:
/*  985 */                   BigDecimal big19 = new BigDecimal(cell.getNumericCellValue());
/*  986 */                   value = big19.toString();
/*      */ 
/*  988 */                   if ((null != value) && (!"".equals(value.trim()))) {
/*  989 */                     String[] item = value.split("[.]");
/*  990 */                     if ((1 < item.length) && ("0".equals(item[1]))) {
/*  991 */                       value = item[0];
/*      */                     }
/*      */                   }
/*  994 */                   address.setIcqNo(value);
/*  995 */                   break;
/*      */                 case 20:
/*  998 */                   address.setNotes(cell.getStringCellValue());
/*  999 */                   break;
/*      */                 default:
/* 1001 */                   json.setFlag(0);
/* 1002 */                   json.setMsg("err");
/*      */                 }
/*      */               }
/*      */             }
/*      */ 
/* 1007 */             int count = this.addressMapper.insertSelective(address);
/* 1008 */             if (count > 0) {
/* 1009 */               successCount = Integer.valueOf(successCount.intValue() + count);
/*      */             }
/*      */           }
/*      */         }
/*      */ 
/*      */       }
/*      */ 
/* 1016 */       if (successCount.intValue() > 0) {
/* 1017 */         json.setTotleNum(successCount);
/* 1018 */         json.setMsg("ok");
/* 1019 */         json.setFlag(0);
/* 1020 */         return json;
/*      */       }
/*      */     } catch (Exception e) {
/* 1023 */       e.printStackTrace();
/* 1024 */       json.setMsg("err");
/* 1025 */       json.setFlag(1);
/*      */     }
/* 1027 */     return json;
/*      */   }
/*      */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.service.address.impl.AddressServiceImpl
 * JD-Core Version:    0.6.0
 */