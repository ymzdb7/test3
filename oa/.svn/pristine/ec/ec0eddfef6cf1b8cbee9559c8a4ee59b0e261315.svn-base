/*      */ package com.xoa.service.hr.impl;
/*      */ 
/*      */ import com.xoa.dao.department.DepartmentMapper;
/*      */ import com.xoa.dao.edu.eduDepartment.EduDepartmentMapper;
/*      */ import com.xoa.dao.hr.HrStaffInfoMapper;
/*      */ import com.xoa.dao.hr.HrStaffLeaveMapper;
/*      */ import com.xoa.dao.users.UserPrivMapper;
/*      */ import com.xoa.dao.users.UsersMapper;
/*      */ import com.xoa.model.hr.HrStaffInfo;
/*      */ import com.xoa.model.hr.HrStaffInfoWithBLOBs;
/*      */ import com.xoa.model.hr.HrStaffLeave;
/*      */ import com.xoa.model.modulePriv.ModulePriv;
/*      */ import com.xoa.model.users.UserExt;
/*      */ import com.xoa.model.users.UserPriv;
/*      */ import com.xoa.model.users.Users;
/*      */ import com.xoa.service.hr.HrSStaffInfoService;
/*      */ import com.xoa.service.users.UsersService;
import com.xoa.util.Constant;
/*      */ import com.xoa.util.DateCompute;
/*      */ import com.xoa.util.DateFormat;
/*      */ import com.xoa.util.ExcelUtil;
/*      */ import com.xoa.util.FileUploadUtil;
/*      */ import com.xoa.util.GetAttachmentListUtil;
/*      */ import com.xoa.util.ToJson;
/*      */ import com.xoa.util.common.L;
/*      */ import com.xoa.util.common.StringUtils;
/*      */ import com.xoa.util.common.log.FileUtils;
/*      */ import com.xoa.util.common.session.SessionUtils;
/*      */ import com.xoa.util.common.wrapper.BaseWrapper;
/*      */ import com.xoa.util.common.wrapper.BaseWrappers;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.text.ParseException;
/*      */ import java.text.SimpleDateFormat;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Calendar;
/*      */ import java.util.Date;
/*      */ import java.util.HashMap;
/*      */ import java.util.LinkedHashMap;
/*      */ import java.util.List;
/*      */ import java.util.Map;
/*      */ import java.util.ResourceBundle;
/*      */ import java.util.UUID;
/*      */ import javax.annotation.Resource;
/*      */ import javax.servlet.ServletContext;
/*      */ import javax.servlet.http.HttpServletRequest;
/*      */ import javax.servlet.http.HttpServletResponse;
/*      */ import javax.servlet.http.HttpSession;
/*      */ import org.apache.poi.hssf.usermodel.HSSFSheet;
/*      */ import org.apache.poi.hssf.usermodel.HSSFWorkbook;
/*      */ import org.apache.poi.ss.usermodel.Cell;
/*      */ import org.apache.poi.ss.usermodel.Row;
/*      */ import org.springframework.stereotype.Service;
/*      */ import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
/*      */ 
/*      */ @Service
/*      */ public class HrStaffInfoServiceImpl
/*      */   implements HrSStaffInfoService
/*      */ {
/*      */ 
/*      */   @Resource
/*      */   private HrStaffInfoMapper hrStaffInfoMapper;
/*      */ 
/*      */   @Resource
/*      */   private UsersMapper usersMapper;
/*      */ 
/*      */   @Resource
/*      */   private DepartmentMapper departmentMapper;
/*      */ 
/*      */   @Resource
/*      */   private UsersService usersService;
/*      */ 
/*      */   @Resource
/*      */   private HrStaffLeaveMapper hrStaffLeaveMapper;
/*      */ 
/*      */   @Resource
/*      */   private EduDepartmentMapper eduDepartmentMapper;
/*      */ 
/*      */   @Resource
/*      */   private UserPrivMapper userPrivMapper;
/*      */ 
/*      */   public BaseWrappers selectRetireeInfo(String startTime, String endTime)
/*      */   {
/*   76 */     BaseWrappers wrapper = new BaseWrappers();
/*      */ 
/*   82 */     SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
/*      */     try
/*      */     {
/*   87 */       Date startDate = format.parse(startTime);
/*   88 */       Date endDate = format.parse(endTime);
/*   89 */       HashMap map = new HashMap();
/*   90 */       map.put("endDate", endDate);
/*   91 */       map.put("startDate", startDate);
/*   92 */       List hrStaffInfosList = this.hrStaffInfoMapper.selectRetireeInfo(map);
/*   93 */       wrapper.setDatas(hrStaffInfosList);
/*      */     } catch (ParseException e) {
/*   95 */       e.printStackTrace();
/*      */     }
/*   97 */     wrapper.setStatus(true);
/*   98 */     wrapper.setFlag(true);
/*   99 */     wrapper.setMsg("退休人员");
/*  100 */     return wrapper;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> selectPersonFileByDeptId(HttpServletRequest request, Integer deptId)
/*      */   {
/*  107 */     ToJson toJson = new ToJson(1, "error");
/*      */     try {
/*  109 */       List list = this.hrStaffInfoMapper.selectPersonFileByDeptId(deptId);
/*      */ 
/*  116 */       if (list.size() > 0) {
/*  117 */         toJson.setObj(list);
/*  118 */         toJson.setMsg("ok");
/*      */       }
/*      */       else {
/*  121 */         toJson.setMsg("人员档案信息为空");
/*      */       }
/*  123 */       toJson.setFlag(0);
/*      */     } catch (Exception e) {
/*  125 */       toJson.setMsg(e.getMessage());
/*  126 */       L.e(new Object[] { "HrRetireeServiceImpl selectPersonFileByDeptId:" + e });
/*      */     }
/*  128 */     return toJson;
/*      */   }
/*      */ 
/*      */   public HrStaffInfo selectPersonFileByUserId(HttpServletRequest request, Integer uid)
/*      */   {
/*  135 */     ToJson toJson = new ToJson(1, "error");
/*  136 */     Users users = this.usersMapper.selectUserByUId(uid);
/*  137 */     String userId = users.getUserId();
/*  138 */     HrStaffInfo hrStaffInfo = this.hrStaffInfoMapper.getStaffByUserId(userId);
/*  139 */     if ((hrStaffInfo != null) && ("02".equals(hrStaffInfo.getWorkStatus()))) {
/*  140 */       HrStaffLeave hrStaffLeave = this.hrStaffLeaveMapper.queryStaffLeaveByLeavePerson(userId);
/*  141 */       if (hrStaffLeave != null)
/*  142 */         hrStaffInfo.setOuitTimeFact(hrStaffLeave.getQuitTimeFact());
/*      */     }
/*      */     try
/*      */     {
/*  146 */       if (hrStaffInfo == null) {
/*  147 */         hrStaffInfo = new HrStaffInfo();
/*  148 */         hrStaffInfo.setUid(users.getUid());
/*  149 */         hrStaffInfo.setUserId(users.getUserId());
/*  150 */         hrStaffInfo.setStaffName(users.getUserName());
/*  151 */         hrStaffInfo.setDeptId(users.getDeptId());
/*  152 */         if ((users.getDeptId() != null) && 
/*  153 */           (!StringUtils.checkNull(this.departmentMapper.getDeptNameByDeptId(users.getDeptId())).booleanValue())) {
/*  154 */           hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameByDeptId(users.getDeptId()));
/*      */         }
/*      */ 
/*  157 */         hrStaffInfo.setUserPriv(users.getUserPriv().toString());
/*  158 */         hrStaffInfo.setUserPrivName(users.getUserPrivName());
/*  159 */         hrStaffInfo.setStaffSex(users.getSex());
/*  160 */         hrStaffInfo.setStaffBirth(users.getBirthdayStr());
/*  161 */         hrStaffInfo.setIsLunar(users.getIsLunar());
/*  162 */         hrStaffInfo.setHomeAddress(users.getAddHome());
/*  163 */         hrStaffInfo.setStaffPhone(users.getTelNoHome());
/*  164 */         hrStaffInfo.setStaffMobile(users.getMobilNo());
/*  165 */         hrStaffInfo.setStaffEmail(users.getEmail());
/*  166 */         hrStaffInfo.setStaffQq(users.getOicqNo());
/*  167 */         hrStaffInfo.setStaffMsn(users.getMsn());
/*  168 */         hrStaffInfo.setPhoto(users.getPhoto());
/*  169 */         hrStaffInfo.setByName(users.getByname());
/*  170 */         hrStaffInfo.setWorkJob(String.valueOf(users.getJobId()));
/*  171 */         hrStaffInfo.setJobPosition(String.valueOf(users.getPostId()));
/*      */       } else {
/*  173 */         if (hrStaffInfo.getDeptId() != null) {
/*  174 */           hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameById(hrStaffInfo.getDeptId().intValue()));
/*      */         }
/*  176 */         Users usersTemp = this.usersMapper.getUsersByuserId(hrStaffInfo.getUserId());
/*  177 */         hrStaffInfo.setUserPriv(usersTemp.getUserPriv().toString());
/*  178 */         if (usersTemp.getUserPriv() != null) {
/*  179 */           hrStaffInfo.setUserPrivName(this.userPrivMapper.getPrivNameById(Integer.valueOf(usersTemp.getUserPriv().intValue())));
/*      */         }
/*  181 */         hrStaffInfo.setByName(usersTemp.getByname());
/*  182 */         hrStaffInfo.setUid(uid);
/*      */ 
/*  184 */         StringBuffer superiorName = new StringBuffer();
/*  185 */         if (!StringUtils.checkNull(hrStaffInfo.getDirectlySuperior()).booleanValue()) {
/*  186 */           String[] superiorArray = hrStaffInfo.getDirectlySuperior().split(",");
/*  187 */           for (String superior : superiorArray) {
/*  188 */             if ((StringUtils.checkNull(superior).booleanValue()) || 
/*  189 */               (this.usersMapper.getUserByUid(Integer.valueOf(superior).intValue()) == null)) continue;
/*  190 */             superiorName.append(this.usersMapper.getUserByUid(Integer.valueOf(superior).intValue()).getUserName() + ",");
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  195 */         hrStaffInfo.setDirectlySuperiorName(superiorName.toString());
/*  196 */         StringBuffer underName = new StringBuffer();
/*  197 */         if (!StringUtils.checkNull(hrStaffInfo.getDirectlyUnder()).booleanValue()) {
/*  198 */           String[] underArray = hrStaffInfo.getDirectlyUnder().split(",");
/*  199 */           for (String under : underArray) {
/*  200 */             if ((StringUtils.checkNull(under).booleanValue()) || 
/*  201 */               (this.usersMapper.getUserByUid(Integer.valueOf(under).intValue()) == null)) continue;
/*  202 */             underName.append(this.usersMapper.getUserByUid(Integer.valueOf(under).intValue()).getUserName() + ",");
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  207 */         hrStaffInfo.setDirectlyUnderName(underName.toString());
/*      */       }
/*      */ 
/*  211 */       List attachmentList = new ArrayList();
/*  212 */       if ((hrStaffInfo.getAttachmentName() != null) && (!"".equals(hrStaffInfo.getAttachmentName()))) {
/*  213 */         attachmentList = GetAttachmentListUtil.returnAttachment(hrStaffInfo.getAttachmentName(), hrStaffInfo.getAttachmentId(), Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"), "hr_staffinfo");
/*      */       }
/*  215 */       hrStaffInfo.setAttachmentList(attachmentList);
/*      */ 
/*  217 */       toJson.setObject(hrStaffInfo);
/*  218 */       toJson.setMsg("ok");
/*  219 */       toJson.setFlag(0);
/*      */     } catch (Exception e) {
/*  221 */       e.printStackTrace();
/*  222 */       toJson.setMsg(e.getMessage());
/*      */     }
/*  224 */     return hrStaffInfo;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> selectPersonByUserId(HttpServletRequest request, Integer uid)
/*      */   {
/*  235 */     ToJson toJson = new ToJson(1, "error");
/*  236 */     Users users = this.usersMapper.selectUserByUId(uid);
/*  237 */     String userId = users.getUserId();
/*  238 */     HrStaffInfo hrStaffInfo = this.hrStaffInfoMapper.getStaffByUserId(userId);
/*      */     try {
/*  240 */       if (hrStaffInfo == null) {
/*  241 */         hrStaffInfo = new HrStaffInfo();
/*  242 */         hrStaffInfo.setUid(users.getUid());
/*  243 */         hrStaffInfo.setUserId(users.getUserId());
/*  244 */         hrStaffInfo.setStaffName(users.getUserName());
/*  245 */         hrStaffInfo.setDeptId(users.getDeptId());
/*  246 */         if ((users.getDeptId() != null) && 
/*  247 */           (!StringUtils.checkNull(this.departmentMapper.getDeptNameByDeptId(users.getDeptId())).booleanValue())) {
/*  248 */           hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameByDeptId(users.getDeptId()));
/*      */         }
/*      */ 
/*  251 */         hrStaffInfo.setUserPriv(users.getUserPriv().toString());
/*  252 */         hrStaffInfo.setUserPrivName(users.getUserPrivName());
/*  253 */         hrStaffInfo.setStaffSex(users.getSex());
/*  254 */         hrStaffInfo.setStaffBirth(users.getBirthdayStr());
/*  255 */         hrStaffInfo.setIsLunar(users.getIsLunar());
/*  256 */         hrStaffInfo.setHomeAddress(users.getAddHome());
/*  257 */         hrStaffInfo.setStaffPhone(users.getTelNoHome());
/*  258 */         hrStaffInfo.setStaffMobile(users.getMobilNo());
/*  259 */         hrStaffInfo.setStaffEmail(users.getEmail());
/*  260 */         hrStaffInfo.setStaffQq(users.getOicqNo());
/*  261 */         hrStaffInfo.setStaffMsn(users.getMsn());
/*  262 */         hrStaffInfo.setPhoto(users.getPhoto());
/*      */       }
/*      */       else {
/*  265 */         if (hrStaffInfo.getDeptId() != null) {
/*  266 */           hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameById(hrStaffInfo.getDeptId().intValue()));
/*      */         }
/*  268 */         Users usersTemp = this.usersMapper.getUsersByuserId(hrStaffInfo.getUserId());
/*  269 */         hrStaffInfo.setUserPriv(usersTemp.getUserPriv().toString());
/*  270 */         if (usersTemp.getUserPriv() != null) {
/*  271 */           hrStaffInfo.setUserPrivName(this.userPrivMapper.getPrivNameById(Integer.valueOf(usersTemp.getUserPriv().intValue())));
/*      */         }
/*  273 */         hrStaffInfo.setUid(uid);
/*      */ 
/*  275 */         StringBuffer superiorName = new StringBuffer();
/*  276 */         if (!StringUtils.checkNull(hrStaffInfo.getDirectlySuperior()).booleanValue()) {
/*  277 */           String[] superiorArray = hrStaffInfo.getDirectlySuperior().split(",");
/*  278 */           for (String superior : superiorArray) {
/*  279 */             if ((StringUtils.checkNull(superior).booleanValue()) || 
/*  280 */               (this.usersMapper.getUserByUid(Integer.valueOf(superior).intValue()) == null)) continue;
/*  281 */             superiorName.append(this.usersMapper.getUserByUid(Integer.valueOf(superior).intValue()).getUserName() + ",");
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  286 */         hrStaffInfo.setDirectlySuperiorName(superiorName.toString());
/*  287 */         StringBuffer underName = new StringBuffer();
/*  288 */         if (!StringUtils.checkNull(hrStaffInfo.getDirectlyUnder()).booleanValue()) {
/*  289 */           String[] underArray = hrStaffInfo.getDirectlyUnder().split(",");
/*  290 */           for (String under : underArray) {
/*  291 */             if ((StringUtils.checkNull(under).booleanValue()) || 
/*  292 */               (this.usersMapper.getUserByUid(Integer.valueOf(under).intValue()) == null)) continue;
/*  293 */             underName.append(this.usersMapper.getUserByUid(Integer.valueOf(under).intValue()).getUserName() + ",");
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  298 */         hrStaffInfo.setDirectlyUnderName(underName.toString());
/*      */       }
/*      */ 
/*  302 */       List attachmentList = new ArrayList();
/*  303 */       if ((hrStaffInfo.getAttachmentName() != null) && (!"".equals(hrStaffInfo.getAttachmentName()))) {
/*  304 */         attachmentList = GetAttachmentListUtil.returnAttachment(hrStaffInfo.getAttachmentName(), hrStaffInfo.getAttachmentId(), Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"), "hr_staffinfo");
/*      */       }
/*  306 */       hrStaffInfo.setAttachmentList(attachmentList);
/*      */ 
/*  308 */       toJson.setObject(hrStaffInfo);
/*  309 */       toJson.setMsg("ok");
/*  310 */       toJson.setFlag(0);
/*      */     } catch (Exception e) {
/*  312 */       e.printStackTrace();
/*  313 */       toJson.setMsg(e.getMessage());
/*      */     }
/*  315 */     return toJson;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> selectOwnStaffInfo(HttpServletRequest request, Users user)
/*      */   {
/*  327 */     ToJson toJson = new ToJson(1, "error");
/*  328 */     Users users = this.usersMapper.selectUserByUId(user.getUid());
/*  329 */     String userId = users.getUserId();
/*  330 */     HrStaffInfo hrStaffInfo = this.hrStaffInfoMapper.getStaffByUserId(userId);
/*      */     try {
/*  332 */       if (hrStaffInfo == null) {
/*  333 */         hrStaffInfo = new HrStaffInfo();
/*  334 */         hrStaffInfo.setUid(users.getUid());
/*  335 */         hrStaffInfo.setUserId(users.getUserId());
/*  336 */         hrStaffInfo.setStaffName(users.getUserName());
/*  337 */         hrStaffInfo.setDeptId(users.getDeptId());
/*  338 */         if ((users.getDeptId() != null) && 
/*  339 */           (!StringUtils.checkNull(this.departmentMapper.getDeptNameByDeptId(users.getDeptId())).booleanValue())) {
/*  340 */           hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameByDeptId(users.getDeptId()));
/*      */         }
/*      */ 
/*  343 */         hrStaffInfo.setUserPriv(users.getUserPriv().toString());
/*  344 */         hrStaffInfo.setUserPrivName(users.getUserPrivName());
/*  345 */         hrStaffInfo.setStaffSex(users.getSex());
/*  346 */         hrStaffInfo.setStaffBirth(users.getBirthdayStr());
/*  347 */         hrStaffInfo.setIsLunar(users.getIsLunar());
/*  348 */         hrStaffInfo.setHomeAddress(users.getAddHome());
/*  349 */         hrStaffInfo.setStaffPhone(users.getTelNoHome());
/*  350 */         hrStaffInfo.setStaffMobile(users.getMobilNo());
/*  351 */         hrStaffInfo.setStaffEmail(users.getEmail());
/*  352 */         hrStaffInfo.setStaffQq(users.getOicqNo());
/*  353 */         hrStaffInfo.setStaffMsn(users.getMsn());
/*  354 */         hrStaffInfo.setPhoto(users.getPhoto());
/*      */       }
/*      */       else {
/*  357 */         if (hrStaffInfo.getDeptId() != null) {
/*  358 */           hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameById(hrStaffInfo.getDeptId().intValue()));
/*      */         }
/*  360 */         Users usersTemp = this.usersMapper.getUsersByuserId(hrStaffInfo.getUserId());
/*  361 */         hrStaffInfo.setUserPriv(usersTemp.getUserPriv().toString());
/*  362 */         if (usersTemp.getUserPriv() != null) {
/*  363 */           hrStaffInfo.setUserPrivName(this.userPrivMapper.getPrivNameById(Integer.valueOf(usersTemp.getUserPriv().intValue())));
/*      */         }
/*  365 */         hrStaffInfo.setUid(user.getUid());
/*      */ 
/*  367 */         StringBuffer superiorName = new StringBuffer();
/*  368 */         if (!StringUtils.checkNull(hrStaffInfo.getDirectlySuperior()).booleanValue()) {
/*  369 */           String[] superiorArray = hrStaffInfo.getDirectlySuperior().split(",");
/*  370 */           for (String superior : superiorArray) {
/*  371 */             if ((StringUtils.checkNull(superior).booleanValue()) || 
/*  372 */               (this.usersMapper.getUserByUid(Integer.valueOf(superior).intValue()) == null)) continue;
/*  373 */             superiorName.append(this.usersMapper.getUserByUid(Integer.valueOf(superior).intValue()).getUserName() + ",");
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  378 */         hrStaffInfo.setDirectlySuperiorName(superiorName.toString());
/*  379 */         StringBuffer underName = new StringBuffer();
/*  380 */         if (!StringUtils.checkNull(hrStaffInfo.getDirectlyUnder()).booleanValue()) {
/*  381 */           String[] underArray = hrStaffInfo.getDirectlyUnder().split(",");
/*  382 */           for (String under : underArray) {
/*  383 */             if ((StringUtils.checkNull(under).booleanValue()) || 
/*  384 */               (this.usersMapper.getUserByUid(Integer.valueOf(under).intValue()) == null)) continue;
/*  385 */             underName.append(this.usersMapper.getUserByUid(Integer.valueOf(under).intValue()).getUserName() + ",");
/*      */           }
/*      */ 
/*      */         }
/*      */ 
/*  390 */         hrStaffInfo.setDirectlyUnderName(underName.toString());
/*      */       }
/*      */ 
/*  394 */       List attachmentList = new ArrayList();
/*  395 */       if ((hrStaffInfo.getAttachmentName() != null) && (!"".equals(hrStaffInfo.getAttachmentName()))) {
/*  396 */         attachmentList = GetAttachmentListUtil.returnAttachment(hrStaffInfo.getAttachmentName(), hrStaffInfo.getAttachmentId(), Constant.MYOA + (String)request.getSession().getAttribute("loginDateSouse"), "hr_staffinfo");
/*      */       }
/*  398 */       hrStaffInfo.setAttachmentList(attachmentList);
/*      */ 
/*  400 */       toJson.setObject(hrStaffInfo);
/*  401 */       toJson.setMsg("ok");
/*  402 */       toJson.setFlag(0);
/*      */     } catch (Exception e) {
/*  404 */       e.printStackTrace();
/*  405 */       toJson.setMsg(e.getMessage());
/*      */     }
/*  407 */     return toJson;
/*      */   }
/*      */ 
/*      */   public BaseWrappers getHrStaffInfoNews()
/*      */   {
/*  412 */     BaseWrappers baseWrapper = new BaseWrappers();
/*  413 */     Calendar cal = Calendar.getInstance();
/*  414 */     int year = cal.get(1);
/*  415 */     int month = cal.get(2) + 1;
/*  416 */     List hrStaffInfos = this.hrStaffInfoMapper.getHrStaffInfoNews(String.valueOf(month), String.valueOf(year));
/*  417 */     baseWrapper.setDatas(hrStaffInfos);
/*  418 */     baseWrapper.setFlag(true);
/*  419 */     baseWrapper.setStatus(true);
/*  420 */     baseWrapper.setMsg("更新成功");
/*  421 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper getHrStaffInfoCount(String type) throws ParseException {
/*  425 */     BaseWrapper baseWrapper = new BaseWrapper();
/*  426 */     List<HrStaffInfo> hrStaffInfos = this.hrStaffInfoMapper.getHrStaffInfoCount();
/*  427 */     SimpleDateFormat myFormatter = new SimpleDateFormat("yyyy-MM-dd");
/*  428 */     if ("1".equals(type)) {
/*  429 */       Map map = new LinkedHashMap();
/*  430 */       map.put("20-25岁", Integer.valueOf(0));
/*  431 */       map.put("25-30岁", Integer.valueOf(0));
/*  432 */       map.put("30-35岁", Integer.valueOf(0));
/*  433 */       map.put("35-40岁", Integer.valueOf(0));
/*  434 */       map.put("40-45岁", Integer.valueOf(0));
/*  435 */       map.put("45-50岁", Integer.valueOf(0));
/*  436 */       map.put("45-50岁", Integer.valueOf(0));
/*  437 */       map.put("50-55岁", Integer.valueOf(0));
/*  438 */       map.put("55以上", Integer.valueOf(0));
/*  439 */       for (HrStaffInfo hrStaffInfo : hrStaffInfos) {
/*      */         try {
/*  441 */           Date date = myFormatter.parse(hrStaffInfo.getStaffBirth());
/*  442 */           Integer ageNum = Integer.valueOf(DateCompute.getAge(date));
/*  443 */           if ((ageNum.intValue() >= 20) && (ageNum.intValue() < 25))
/*  444 */             map.put("20-25岁", Integer.valueOf(((Integer)map.get("20-25岁")).intValue() + 1));
/*  445 */           else if ((ageNum.intValue() >= 25) && (ageNum.intValue() < 30))
/*  446 */             map.put("25-30岁", Integer.valueOf(((Integer)map.get("25-30岁")).intValue() + 1));
/*  447 */           else if ((ageNum.intValue() >= 30) && (ageNum.intValue() < 35))
/*  448 */             map.put("30-35岁", Integer.valueOf(((Integer)map.get("30-35岁")).intValue() + 1));
/*  449 */           else if ((ageNum.intValue() >= 35) && (ageNum.intValue() < 40))
/*  450 */             map.put("35-40岁", Integer.valueOf(((Integer)map.get("35-40岁")).intValue() + 1));
/*  451 */           else if ((ageNum.intValue() >= 40) && (ageNum.intValue() < 45))
/*  452 */             map.put("40-45岁", Integer.valueOf(((Integer)map.get("40-45岁")).intValue() + 1));
/*  453 */           else if ((ageNum.intValue() >= 45) && (ageNum.intValue() < 50))
/*  454 */             map.put("45-50岁", Integer.valueOf(((Integer)map.get("45-50岁")).intValue() + 1));
/*  455 */           else if ((ageNum.intValue() >= 50) && (ageNum.intValue() < 55))
/*  456 */             map.put("50-55岁", Integer.valueOf(((Integer)map.get("50-55岁")).intValue() + 1));
/*  457 */           else if (ageNum.intValue() > 55)
/*  458 */             map.put("55以上", Integer.valueOf(((Integer)map.get("55以上")).intValue() + 1));
/*      */         }
/*      */         catch (ParseException e) {
/*  461 */           e.printStackTrace();
/*      */         }
/*      */       }
/*  464 */       baseWrapper.setData(map);
/*  465 */     } else if ("2".equals(type)) {
/*  466 */       Map map = new LinkedHashMap();
/*  467 */       map.put("男", Integer.valueOf(0));
/*  468 */       map.put("女", Integer.valueOf(0));
/*  469 */       for (HrStaffInfo hrStaffInfo : hrStaffInfos) {
/*  470 */         if ("1".equals(hrStaffInfo.getSex()))
/*  471 */           map.put("女", Integer.valueOf(((Integer)map.get("女")).intValue() + 1));
/*      */         else {
/*  473 */           map.put("男", Integer.valueOf(((Integer)map.get("男")).intValue() + 1));
/*      */         }
/*      */       }
/*  476 */       baseWrapper.setData(map);
/*      */     }
/*  478 */     else if ("3".equals(type)) {
/*  479 */       Map map = new LinkedHashMap();
/*  480 */       map.put("小学", Integer.valueOf(0));
/*  481 */       map.put("初中", Integer.valueOf(0));
/*  482 */       map.put("高中", Integer.valueOf(0));
/*  483 */       map.put("中专", Integer.valueOf(0));
/*  484 */       map.put("大专", Integer.valueOf(0));
/*  485 */       map.put("本科", Integer.valueOf(0));
/*  486 */       map.put("研究生", Integer.valueOf(0));
/*  487 */       map.put("博士", Integer.valueOf(0));
/*  488 */       map.put("博士后", Integer.valueOf(0));
/*  489 */       map.put("技校", Integer.valueOf(0));
/*  490 */       for (HrStaffInfo hrStaffInfo : hrStaffInfos) {
/*  491 */         if ("1".equals(hrStaffInfo.getStaffHighestSchool()))
/*  492 */           map.put("小学", Integer.valueOf(((Integer)map.get("小学")).intValue() + 1));
/*  493 */         else if ("2".equals(hrStaffInfo.getStaffHighestSchool()))
/*  494 */           map.put("初中", Integer.valueOf(((Integer)map.get("初中")).intValue() + 1));
/*  495 */         else if ("3".equals(hrStaffInfo.getStaffHighestSchool()))
/*  496 */           map.put("高中", Integer.valueOf(((Integer)map.get("高中")).intValue() + 1));
/*  497 */         else if ("4".equals(hrStaffInfo.getStaffHighestSchool()))
/*  498 */           map.put("中专", Integer.valueOf(((Integer)map.get("中专")).intValue() + 1));
/*  499 */         else if ("5".equals(hrStaffInfo.getStaffHighestSchool()))
/*  500 */           map.put("大专", Integer.valueOf(((Integer)map.get("大专")).intValue() + 1));
/*  501 */         else if ("6".equals(hrStaffInfo.getStaffHighestSchool()))
/*  502 */           map.put("本科", Integer.valueOf(((Integer)map.get("本科")).intValue() + 1));
/*  503 */         else if ("7".equals(hrStaffInfo.getStaffHighestSchool()))
/*  504 */           map.put("研究生", Integer.valueOf(((Integer)map.get("研究生")).intValue() + 1));
/*  505 */         else if ("8".equals(hrStaffInfo.getStaffHighestSchool()))
/*  506 */           map.put("博士", Integer.valueOf(((Integer)map.get("博士")).intValue() + 1));
/*  507 */         else if ("9".equals(hrStaffInfo.getStaffHighestSchool()))
/*  508 */           map.put("博士后", Integer.valueOf(((Integer)map.get("博士后")).intValue() + 1));
/*  509 */         else if ("11".equals(hrStaffInfo.getStaffHighestSchool())) {
/*  510 */           map.put("技校", Integer.valueOf(((Integer)map.get("技校")).intValue() + 1));
/*      */         }
/*      */       }
/*  513 */       baseWrapper.setData(map);
/*      */     }
/*  515 */     else if ("4".equals(type)) {
/*  516 */       Map map = new LinkedHashMap();
/*  517 */       map.put("1年以内", Integer.valueOf(0));
/*  518 */       map.put("1-3年", Integer.valueOf(0));
/*  519 */       map.put("3-5年", Integer.valueOf(0));
/*  520 */       map.put("5-10年", Integer.valueOf(0));
/*  521 */       map.put("10年以上", Integer.valueOf(0));
/*  522 */       for (HrStaffInfo hrStaffInfo : hrStaffInfos) {
/*  523 */         Date date = myFormatter.parse(hrStaffInfo.getStaffBirth());
/*  524 */         Integer ageNum = Integer.valueOf(DateCompute.getAge(date));
/*  525 */         if (ageNum.intValue() < 1)
/*  526 */           map.put("1年以内", Integer.valueOf(((Integer)map.get("1年以内")).intValue() + 1));
/*  527 */         else if ((ageNum.intValue() >= 1) && (ageNum.intValue() < 3))
/*  528 */           map.put("1-3年", Integer.valueOf(((Integer)map.get("1-3年")).intValue() + 1));
/*  529 */         else if ((ageNum.intValue() >= 3) && (ageNum.intValue() < 5))
/*  530 */           map.put("3-5年", Integer.valueOf(((Integer)map.get("3-5年")).intValue() + 1));
/*  531 */         else if ((ageNum.intValue() >= 5) && (ageNum.intValue() < 10))
/*  532 */           map.put("5-10年", Integer.valueOf(((Integer)map.get("5-10年")).intValue() + 1));
/*  533 */         else if (ageNum.intValue() >= 10) {
/*  534 */           map.put("10年以上", Integer.valueOf(((Integer)map.get("10年以上")).intValue() + 1));
/*      */         }
/*      */       }
/*  537 */       baseWrapper.setData(map);
/*      */     }
/*      */ 
/*  542 */     baseWrapper.setFlag(true);
/*  543 */     baseWrapper.setStatus(true);
/*  544 */     baseWrapper.setMsg("更新成功");
/*  545 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> selectOnLinePerson(HrStaffInfo hrStaffInfo, HttpServletResponse response, HttpServletRequest request, String export)
/*      */   {
/*  558 */     ToJson toJson = new ToJson(1, "error");
/*  559 */     if (export == null)
/*  560 */       export = "0";
/*      */     try
/*      */     {
/*  563 */       String leaveShow = request.getParameter("leaveShow");
/*  564 */       List<HrStaffInfo> list = new ArrayList();
/*  565 */       if (StringUtils.checkNull(leaveShow).booleanValue()) {
/*  566 */         list = this.hrStaffInfoMapper.selectOnLinePerson(hrStaffInfo);
/*      */       }
/*  568 */       else if (!leaveShow.equals("1")) {
/*  569 */         list = this.hrStaffInfoMapper.selectOnLinePerson(hrStaffInfo);
/*      */       } else {
/*  571 */         list = this.hrStaffInfoMapper.selStaffByCondi(hrStaffInfo);
/*  572 */         for (HrStaffInfo hrStaffInfoTemp : list) {
/*  573 */           if (!StringUtils.checkNull(hrStaffInfoTemp.getStaffSex()).booleanValue()) {
/*  574 */             if (hrStaffInfoTemp.getStaffSex().equals("1")) {
/*  575 */               hrStaffInfoTemp.setStaffSexName("女");
/*      */             }
/*      */             else {
/*  578 */               hrStaffInfoTemp.setStaffSexName("男");
/*      */             }
/*      */           }
/*  581 */           hrStaffInfoTemp.setStaffPoliticalStatusName("无党派人士");
/*  582 */           if (!StringUtils.checkNull(hrStaffInfoTemp.getStaffPoliticalStatus()).booleanValue()) {
/*  583 */             if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("1")) {
/*  584 */               hrStaffInfoTemp.setStaffPoliticalStatusName("群众");
/*      */             }
/*  586 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("2")) {
/*  587 */               hrStaffInfoTemp.setStaffPoliticalStatusName("共青团员");
/*      */             }
/*  589 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("3")) {
/*  590 */               hrStaffInfoTemp.setStaffPoliticalStatusName("中共党员");
/*      */             }
/*  592 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("4")) {
/*  593 */               hrStaffInfoTemp.setStaffPoliticalStatusName("中共预备党员");
/*      */             }
/*  595 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("5")) {
/*  596 */               hrStaffInfoTemp.setStaffPoliticalStatusName("民主党派");
/*      */             }
/*      */             else {
/*  599 */               hrStaffInfoTemp.setStaffPoliticalStatusName("无党派人士");
/*      */             }
/*      */           }
/*      */ 
/*  603 */           if ((!StringUtils.checkNull(hrStaffInfoTemp.getWorkStatus()).booleanValue()) && 
/*  604 */             (hrStaffInfoTemp.getWorkStatus().equals("02"))) {
/*  605 */             hrStaffInfoTemp.setStaffName(hrStaffInfoTemp.getStaffName() + "(该用户已离职)");
/*      */           }
/*      */         }
/*      */ 
/*      */       }
/*      */ 
/*  611 */       toJson.setObj(list);
/*  612 */       toJson.setMsg("ok");
/*  613 */       toJson.setFlag(0);
/*      */ 
/*  615 */       if (export.equals("1")) {
/*  616 */         HSSFWorkbook workbook1 = ExcelUtil.makeExcelHead("人事导出信息表", 9);
/*  617 */         String[] secondTitles = { "Id", "用户名", "用户头像", "档案头像", "OA角色", "性别", "出生年月", "民族", "籍贯", "政治面貌", "入职时间" };
/*  618 */         HSSFWorkbook workbook2 = ExcelUtil.makeSecondHead(workbook1, secondTitles);
/*  619 */         String[] beanProperty = { "staffId", "staffName", "photo", "photoName", "userPrivName", "staffSexName", "staffBirth", "staffNationality", "staffNativePlace2", "staffPoliticalStatusName", "datesEmployed" };
/*  620 */         HSSFWorkbook workbook = ExcelUtil.exportExcelData(workbook2, list, beanProperty);
/*  621 */         OutputStream out = response.getOutputStream();
/*  622 */         String filename = "人事导出信息表.xls";
/*  623 */         filename = FileUtils.encodeDownloadFilename(filename, request.getHeader("user-agent"));
/*  624 */         response.setContentType("application/vnd.ms-excel;charset=UTF-8");
/*  625 */         response.setHeader("content-disposition", "attachment;filename=" + filename);
/*  626 */         workbook.write(out);
/*  627 */         out.close();
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/*  633 */       e.printStackTrace();
/*  634 */       toJson.setMsg(e.getMessage());
/*  635 */       toJson.setFlag(1);
/*      */     }
/*  637 */     return toJson;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> selectLeavePerson(HrStaffInfo hrStaffInfo, HttpServletResponse response, HttpServletRequest request, String export)
/*      */   {
/*  650 */     ToJson toJson = new ToJson(1, "error");
/*  651 */     if (export == null)
/*  652 */       export = "0";
/*      */     try
/*      */     {
/*  655 */       String leaveShow = request.getParameter("leaveShow");
/*  656 */       List<HrStaffInfo> list = new ArrayList();
/*  657 */       if (StringUtils.checkNull(leaveShow).booleanValue()) {
/*  658 */         list = this.hrStaffInfoMapper.selectLeavePerson(hrStaffInfo);
/*      */       }
/*  660 */       else if (!leaveShow.equals("1")) {
/*  661 */         list = this.hrStaffInfoMapper.selectLeavePerson(hrStaffInfo);
/*      */       } else {
/*  663 */         list = this.hrStaffInfoMapper.selStaffByCondi(hrStaffInfo);
/*  664 */         for (HrStaffInfo hrStaffInfoTemp : list) {
/*  665 */           if (!StringUtils.checkNull(hrStaffInfoTemp.getStaffSex()).booleanValue()) {
/*  666 */             if (hrStaffInfoTemp.getStaffSex().equals("1")) {
/*  667 */               hrStaffInfoTemp.setStaffSexName("女");
/*      */             }
/*      */             else {
/*  670 */               hrStaffInfoTemp.setStaffSexName("男");
/*      */             }
/*      */           }
/*  673 */           hrStaffInfoTemp.setStaffPoliticalStatusName("无党派人士");
/*  674 */           if (!StringUtils.checkNull(hrStaffInfoTemp.getStaffPoliticalStatus()).booleanValue()) {
/*  675 */             if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("1")) {
/*  676 */               hrStaffInfoTemp.setStaffPoliticalStatusName("群众");
/*      */             }
/*  678 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("2")) {
/*  679 */               hrStaffInfoTemp.setStaffPoliticalStatusName("共青团员");
/*      */             }
/*  681 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("3")) {
/*  682 */               hrStaffInfoTemp.setStaffPoliticalStatusName("中共党员");
/*      */             }
/*  684 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("4")) {
/*  685 */               hrStaffInfoTemp.setStaffPoliticalStatusName("中共预备党员");
/*      */             }
/*  687 */             else if (hrStaffInfoTemp.getStaffPoliticalStatus().equals("5")) {
/*  688 */               hrStaffInfoTemp.setStaffPoliticalStatusName("民主党派");
/*      */             }
/*      */             else {
/*  691 */               hrStaffInfoTemp.setStaffPoliticalStatusName("无党派人士");
/*      */             }
/*      */           }
/*      */ 
/*  695 */           if ((!StringUtils.checkNull(hrStaffInfoTemp.getWorkStatus()).booleanValue()) && 
/*  696 */             (hrStaffInfoTemp.getWorkStatus().equals("02"))) {
/*  697 */             hrStaffInfoTemp.setStaffName(hrStaffInfoTemp.getStaffName() + "(该用户已离职)");
/*      */           }
/*      */         }
/*      */ 
/*      */       }
/*      */ 
/*  703 */       toJson.setObj(list);
/*  704 */       toJson.setMsg("ok");
/*  705 */       toJson.setFlag(0);
/*      */ 
/*  707 */       if (export.equals("1")) {
/*  708 */         HSSFWorkbook workbook1 = ExcelUtil.makeExcelHead("人事导出信息表", 9);
/*  709 */         String[] secondTitles = { "Id", "用户名", "用户头像", "档案头像", "OA角色", "性别", "出生年月", "民族", "籍贯", "政治面貌", "入职时间" };
/*  710 */         HSSFWorkbook workbook2 = ExcelUtil.makeSecondHead(workbook1, secondTitles);
/*  711 */         String[] beanProperty = { "staffId", "staffName", "photo", "photoName", "userPrivName", "staffSexName", "staffBirth", "staffNationality", "staffNativePlace2", "staffPoliticalStatusName", "datesEmployed" };
/*  712 */         HSSFWorkbook workbook = ExcelUtil.exportExcelData(workbook2, list, beanProperty);
/*  713 */         OutputStream out = response.getOutputStream();
/*  714 */         String filename = "人事导出信息表.xls";
/*  715 */         filename = FileUtils.encodeDownloadFilename(filename, request.getHeader("user-agent"));
/*  716 */         response.setContentType("application/vnd.ms-excel;charset=UTF-8");
/*  717 */         response.setHeader("content-disposition", "attachment;filename=" + filename);
/*  718 */         workbook.write(out);
/*  719 */         out.close();
/*      */       }
/*      */ 
/*      */     }
/*      */     catch (Exception e)
/*      */     {
/*  725 */       e.printStackTrace();
/*  726 */       toJson.setMsg(e.getMessage());
/*  727 */       toJson.setFlag(1);
/*      */     }
/*  729 */     return toJson;
/*      */   }
/*      */ 
/*      */   @Transactional(rollbackFor={Exception.class})
/*      */   public ToJson<HrStaffInfo> updatePersonFile(HrStaffInfo hrStaffInfo, HttpServletRequest request) {
/*  735 */     ToJson toJson = new ToJson(1, "error");
/*      */     try {
/*  737 */       if (hrStaffInfo.getStaffBirth() != null) {
/*  738 */         hrStaffInfo.setStaffBirth(hrStaffInfo.getStaffBirth().trim().equals("") ? "0000-00-00" : hrStaffInfo.getStaffBirth().trim().trim());
/*      */       }
/*  740 */       if (hrStaffInfo.getJoinPartyTime() != null) {
/*  741 */         hrStaffInfo.setJoinPartyTime(hrStaffInfo.getJoinPartyTime().trim().equals("") ? "0000-00-00" : hrStaffInfo.getJoinPartyTime().trim().trim());
/*      */       }
/*  743 */       if (hrStaffInfo.getJobBeginning() != null) {
/*  744 */         hrStaffInfo.setJobBeginning(hrStaffInfo.getJobBeginning().trim().equals("") ? "0000-00-00" : hrStaffInfo.getJobBeginning().trim().trim());
/*      */       }
/*  746 */       if (hrStaffInfo.getGraduationDate() != null) {
/*  747 */         hrStaffInfo.setGraduationDate(hrStaffInfo.getGraduationDate().trim().equals("") ? "0000-00-00" : hrStaffInfo.getGraduationDate().trim().trim());
/*      */       }
/*  749 */       if (hrStaffInfo.getBeginSalsryTime() != null) {
/*  750 */         hrStaffInfo.setBeginSalsryTime(hrStaffInfo.getBeginSalsryTime().trim().equals("") ? "0000-00-00" : hrStaffInfo.getBeginSalsryTime().trim().trim());
/*      */       }
/*  752 */       if (hrStaffInfo.getStaffCs() != null) {
/*  753 */         hrStaffInfo.setStaffCs(hrStaffInfo.getStaffCs().trim().equals("") ? "0000-00-00" : hrStaffInfo.getStaffCs().trim().trim());
/*      */       }
/*  755 */       if (hrStaffInfo.getStaffCtr() != null) {
/*  756 */         hrStaffInfo.setStaffCtr(hrStaffInfo.getStaffCtr().trim().equals("") ? "0000-00-00" : hrStaffInfo.getStaffCtr().trim().trim());
/*      */       }
/*  758 */       if (hrStaffInfo.getDatesEmployed() != null) {
/*  759 */         hrStaffInfo.setDatesEmployed(hrStaffInfo.getDatesEmployed().trim().equals("") ? "0000-00-00" : hrStaffInfo.getDatesEmployed().trim().trim());
/*      */       }
/*  761 */       if (hrStaffInfo.getLastUpdateTime() != null) {
/*  762 */         hrStaffInfo.setLastUpdateTime(hrStaffInfo.getLastUpdateTime().trim().equals("") ? "0000-00-00 00:00:00" : hrStaffInfo.getLastUpdateTime().trim().trim());
/*      */       }
/*  764 */       if (hrStaffInfo.getAddTime() != null) {
/*  765 */         hrStaffInfo.setAddTime(hrStaffInfo.getAddTime().trim().equals("") ? "0000-00-00 00:00:00" : hrStaffInfo.getAddTime().trim().trim());
/*      */       }
/*  767 */       if (hrStaffInfo.getRecordDate() != null) {
/*  768 */         hrStaffInfo.setRecordDate(hrStaffInfo.getRecordDate().trim().equals("") ? "0000-00-00" : hrStaffInfo.getRecordDate().trim().trim());
/*      */       }
/*  770 */       int count = 0;
/*  771 */       hrStaffInfo.setLastUpdateTime(DateFormat.getDatestr(new Date()));
/*      */ 
/*  773 */       if (this.hrStaffInfoMapper.getStaffByUserId(hrStaffInfo.getUserId()) != null) {
/*  774 */         HrStaffInfo hrStaffInfoTemp = this.hrStaffInfoMapper.getStaffByUserId(hrStaffInfo.getUserId());
/*  775 */         hrStaffInfo.setStaffId(hrStaffInfoTemp.getStaffId());
/*  776 */         count += this.hrStaffInfoMapper.updatePersonFile(hrStaffInfo);
/*      */       } else {
/*  778 */         Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  779 */         hrStaffInfo.setCreateUserId(user.getUserId());
/*  780 */         hrStaffInfo.setCreateDeptId(user.getDeptId());
/*  781 */         hrStaffInfo.setWorkStatus("01");
/*  782 */         if (this.usersMapper.findUsersByuserId(hrStaffInfo.getUserId()) != null) {
/*  783 */           hrStaffInfo.setUserId(this.usersMapper.findUsersByuserId(hrStaffInfo.getUserId()).getUserId());
/*      */         } else {
/*  785 */           Users usersByuserId = this.usersMapper.findUsersByuserId(hrStaffInfo.getUserId());
/*  786 */           if (usersByuserId != null) {
/*  787 */             hrStaffInfo.setUserId(usersByuserId.getUserId());
/*  788 */             hrStaffInfo.setWorkStatus("02");
/*      */           }
/*      */         }
/*      */ 
/*  792 */         hrStaffInfo.setAddTime(DateFormat.getDatestr(new Date()));
/*  793 */         count += this.hrStaffInfoMapper.insert(hrStaffInfo);
/*      */       }
/*  795 */       Users users = new Users();
/*  796 */       users.setUid(hrStaffInfo.getUid());
/*  797 */       users.setUserId(hrStaffInfo.getUserId());
/*  798 */       users.setUserName(hrStaffInfo.getUserName());
/*  799 */       if (hrStaffInfo.getWorkStatus().equals("01")) {
/*  800 */         users.setDeptId(hrStaffInfo.getDeptId());
/*      */       }
/*  802 */       users.setUserPriv(Integer.valueOf(hrStaffInfo.getUserPriv()));
/*  803 */       users.setSex(hrStaffInfo.getStaffSex());
/*  804 */       if ((!StringUtils.checkNull(hrStaffInfo.getStaffBirth()).booleanValue()) && (!hrStaffInfo.getStaffBirth().equals("0000-00-00 00:00:00")) && (!hrStaffInfo.getStaffBirth().equals("0000-00-00"))) {
/*  805 */         users.setBirthday(DateFormat.getDate(hrStaffInfo.getStaffBirth()));
/*      */       }
/*  807 */       users.setIsLunar(hrStaffInfo.getIsLunar());
/*  808 */       users.setAddHome(hrStaffInfo.getHomeAddress());
/*  809 */       users.setTelNoHome(hrStaffInfo.getStaffPhone());
/*  810 */       users.setMobilNo(hrStaffInfo.getStaffMobile());
/*  811 */       users.setEmail(hrStaffInfo.getStaffEmail());
/*  812 */       users.setOicqNo(hrStaffInfo.getStaffQq());
/*  813 */       users.setMsn(hrStaffInfo.getStaffMsn());
/*  814 */       users.setPhoto(hrStaffInfo.getPhoto());
/*  815 */       users.setPostId(Integer.valueOf(hrStaffInfo.getJobPosition()));
/*  816 */       users.setJobId(Integer.valueOf(hrStaffInfo.getWorkJob()));
/*  817 */       count += this.usersMapper.editUser(users);
/*  818 */       if (count > 1) {
/*  819 */         toJson.setMsg("ok");
/*  820 */         toJson.setFlag(0);
/*      */       }
/*      */     } catch (Exception e) {
/*  823 */       e.printStackTrace();
/*  824 */       toJson.setMsg(e.getMessage());
/*      */     }
/*  826 */     return toJson;
/*      */   }
/*      */ 
/*      */   @Transactional(rollbackFor={Exception.class})
/*      */   public ToJson<Users> savePersonFile(HrStaffInfo hrStaffInfo, HttpServletRequest request) {
/*  832 */     ToJson toJson = new ToJson(1, "error");
/*      */     try
/*      */     {
/*  835 */       if (hrStaffInfo.getStaffBirth() != null) {
/*  836 */         hrStaffInfo.setStaffBirth(hrStaffInfo.getStaffBirth().trim().equals("") ? "0000-00-00" : hrStaffInfo.getStaffBirth().trim().trim());
/*      */       }
/*  838 */       if (hrStaffInfo.getJoinPartyTime() != null) {
/*  839 */         hrStaffInfo.setJoinPartyTime(hrStaffInfo.getJoinPartyTime().trim().equals("") ? "0000-00-00" : hrStaffInfo.getJoinPartyTime().trim().trim());
/*      */       }
/*  841 */       if (hrStaffInfo.getJobBeginning() != null) {
/*  842 */         hrStaffInfo.setJobBeginning(hrStaffInfo.getJobBeginning().trim().equals("") ? "0000-00-00" : hrStaffInfo.getJobBeginning().trim().trim());
/*      */       }
/*  844 */       if (hrStaffInfo.getGraduationDate() != null) {
/*  845 */         hrStaffInfo.setGraduationDate(hrStaffInfo.getGraduationDate().trim().equals("") ? "0000-00-00" : hrStaffInfo.getGraduationDate().trim().trim());
/*      */       }
/*  847 */       if (hrStaffInfo.getBeginSalsryTime() != null) {
/*  848 */         hrStaffInfo.setBeginSalsryTime(hrStaffInfo.getBeginSalsryTime().trim().equals("") ? "0000-00-00" : hrStaffInfo.getBeginSalsryTime().trim().trim());
/*      */       }
/*  850 */       if (hrStaffInfo.getStaffCs() != null) {
/*  851 */         hrStaffInfo.setStaffCs(hrStaffInfo.getStaffCs().trim().equals("") ? "0000-00-00" : hrStaffInfo.getStaffCs().trim().trim());
/*      */       }
/*  853 */       if (hrStaffInfo.getStaffCtr() != null) {
/*  854 */         hrStaffInfo.setStaffCtr(hrStaffInfo.getStaffCtr().trim().equals("") ? "0000-00-00" : hrStaffInfo.getStaffCtr().trim().trim());
/*      */       }
/*  856 */       if (hrStaffInfo.getDatesEmployed() != null) {
/*  857 */         hrStaffInfo.setDatesEmployed(hrStaffInfo.getDatesEmployed().trim().equals("") ? "0000-00-00" : hrStaffInfo.getDatesEmployed().trim().trim());
/*      */       }
/*  859 */       if (hrStaffInfo.getLastUpdateTime() != null) {
/*  860 */         hrStaffInfo.setLastUpdateTime(hrStaffInfo.getLastUpdateTime().trim().equals("") ? "0000-00-00 00:00:00" : hrStaffInfo.getLastUpdateTime().trim().trim());
/*      */       }
/*  862 */       if (hrStaffInfo.getAddTime() != null) {
/*  863 */         hrStaffInfo.setAddTime(hrStaffInfo.getAddTime().trim().equals("") ? "0000-00-00 00:00:00" : hrStaffInfo.getAddTime().trim().trim());
/*      */       }
/*  865 */       if (hrStaffInfo.getRecordDate() != null) {
/*  866 */         hrStaffInfo.setRecordDate(hrStaffInfo.getRecordDate().trim().equals("") ? "0000-00-00" : hrStaffInfo.getRecordDate().trim().trim());
/*      */       }
/*      */ 
/*  869 */       Users users = new Users();
/*  870 */       users.setDeptId(hrStaffInfo.getDeptId());
/*  871 */       users.setUserPriv(Integer.valueOf(hrStaffInfo.getUserPriv()));
/*  872 */       users.setByname(hrStaffInfo.getUserId());
/*  873 */       users.setUserName(hrStaffInfo.getStaffName());
/*  874 */       users.setPhoto(hrStaffInfo.getPhoto());
/*  875 */       users.setPostId(Integer.valueOf(hrStaffInfo.getJobPosition()));
/*  876 */       users.setJobId(Integer.valueOf(hrStaffInfo.getWorkJob()));
/*  877 */       UserExt userExt = new UserExt();
/*  878 */       ModulePriv modulePriv = new ModulePriv();
/*  879 */       toJson = this.usersService.addUser(users, userExt, modulePriv, request);
/*      */ 
/*  881 */       if (toJson.isFlag()) {
/*  882 */         Users user = (Users)SessionUtils.getSessionInfo(request.getSession(), Users.class, new Users());
/*  883 */         hrStaffInfo.setCreateUserId(user.getUserId());
/*  884 */         hrStaffInfo.setCreateDeptId(user.getDeptId());
/*  885 */         hrStaffInfo.setWorkStatus("01");
/*  886 */         hrStaffInfo.setUserId(this.usersMapper.findUserByName(hrStaffInfo.getUserId()).getUserId());
/*  887 */         hrStaffInfo.setAddTime(DateFormat.getDatestr(new Date()));
/*  888 */         int count = this.hrStaffInfoMapper.insert(hrStaffInfo);
/*  889 */         if (count > 0) {
/*  890 */           toJson.setMsg("ok");
/*  891 */           toJson.setFlag(0);
/*      */         }
/*      */       }
/*      */     } catch (Exception e) {
/*  895 */       e.printStackTrace();
/*  896 */       toJson.setMsg(e.getMessage());
/*      */     }
/*  898 */     return toJson;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> deletePersonById(String staffIds)
/*      */   {
/*  904 */     ToJson toJson = new ToJson(1, "error");
/*      */     try {
/*  906 */       int count = 0;
/*  907 */       String[] staffIdArray = staffIds.split(",");
/*  908 */       for (String staffId : staffIdArray) {
/*  909 */         if (!StringUtils.checkNull(staffId).booleanValue()) {
/*  910 */           HrStaffInfo staffInfo = this.hrStaffInfoMapper.getStaffByStaffId(staffId);
/*  911 */           if ((!StringUtils.checkNull(staffInfo.getWorkStatus()).booleanValue()) && (staffInfo.getWorkStatus().equals("02")))
/*      */           {
/*  913 */             count += this.hrStaffLeaveMapper.deleteByLeavePerson(staffInfo.getUserId());
/*      */           }
/*  915 */           count += this.hrStaffInfoMapper.deletePersonById(staffId);
/*      */         }
/*      */       }
/*  918 */       if (count > 0) {
/*  919 */         toJson.setFlag(0);
/*  920 */         toJson.setMsg("ok");
/*      */       }
/*      */     } catch (Exception e) {
/*  923 */       toJson.setMsg(e.getMessage());
/*  924 */       L.e(new Object[] { "HrRetireeServiceImpl deletePersonById:" + e });
/*      */     }
/*  926 */     return toJson;
/*      */   }
/*      */ 
/*      */   public ToJson<Object> selectStaffInfoById(String staffId)
/*      */   {
/*  932 */     ToJson json = new ToJson();
/*      */     try {
/*  934 */       if (staffId != null) {
/*  935 */         HrStaffInfo hrStaffInfo = this.hrStaffInfoMapper.selectStaffInfoById(Integer.valueOf(staffId));
/*  936 */         hrStaffInfo.setDeptName(this.departmentMapper.getDeptNameByDeptId(hrStaffInfo.getDeptId()));
/*      */ 
/*  941 */         json.setFlag(0);
/*  942 */         json.setMsg("ok");
/*  943 */         json.setObject(hrStaffInfo);
/*      */       }
/*      */     } catch (NumberFormatException e) {
/*  946 */       e.printStackTrace();
/*  947 */       json.setFlag(1);
/*  948 */       json.setMsg("err");
/*  949 */       json.setObject(null);
/*      */     }
/*  951 */     return json;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> queryCountNoDocument(String deptId)
/*      */   {
/*  965 */     ToJson json = new ToJson(1, "error");
/*      */     try {
/*  967 */       int count = this.hrStaffInfoMapper.queryCountNoDocument(deptId);
/*  968 */       json.setTotleNum(Integer.valueOf(count));
/*  969 */       json.setFlag(0);
/*  970 */       json.setMsg("ok");
/*      */     } catch (Exception e) {
/*  972 */       json.setMsg(e.getMessage());
/*  973 */       L.e(new Object[] { "HrRetireeServiceImpl queryNoDocument:" + e });
/*      */     }
/*  975 */     return json;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> getUserByDeptId(Integer deptId)
/*      */   {
/*  980 */     ToJson toJson = new ToJson(1, "error");
/*      */     try {
/*  982 */       List list = this.hrStaffInfoMapper.getUserByDeptId(deptId);
/*  983 */       if (list.size() > 0) {
/*  984 */         toJson.setObj(list);
/*  985 */         toJson.setMsg("ok");
/*      */       } else {
/*  987 */         toJson.setMsg("没有用户");
/*      */       }
/*  989 */       toJson.setFlag(0);
/*      */     } catch (Exception e) {
/*  991 */       e.printStackTrace();
/*  992 */       toJson.setMsg(e.getMessage());
/*      */     }
/*  994 */     return toJson;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> uploadImage(HttpServletRequest request, MultipartFile imageFile, HrStaffInfo hrStaffInfo)
/*      */     throws IllegalStateException, IOException
/*      */   {
/* 1007 */     ToJson toJson = new ToJson(1, "error");
/*      */     try {
/* 1009 */       String realPath = request.getSession().getServletContext().getRealPath("/");
/* 1010 */       String resourcePath = "ui/img/hr";
/*      */ 
/* 1013 */       Users users = this.usersMapper.findUsersByuserId(hrStaffInfo.getUserId());
/* 1014 */       HrStaffInfo hrStaffInfoTemp = new HrStaffInfo();
/* 1015 */       if (users != null)
/* 1016 */         hrStaffInfoTemp = this.hrStaffInfoMapper.getStaffByUserId(users.getUserId());
/*      */       else {
/* 1018 */         hrStaffInfoTemp = this.hrStaffInfoMapper.getStaffByUserId(hrStaffInfo.getUserId());
/*      */       }
/* 1020 */       if (hrStaffInfoTemp == null) {
/* 1021 */         Users users1 = this.usersMapper.findUserByName(hrStaffInfo.getUserId());
/* 1022 */         if (users1 != null)
/* 1023 */           hrStaffInfoTemp = this.hrStaffInfoMapper.getStaffByUserId(users1.getUserId());
/*      */         else {
/* 1025 */           hrStaffInfoTemp = this.hrStaffInfoMapper.getStaffByUserId(hrStaffInfo.getUserId());
/*      */         }
/*      */       }
/* 1028 */       if (!StringUtils.checkNull(hrStaffInfoTemp.getPhotoName()).booleanValue()) {
/* 1029 */         File temp = new File(realPath + resourcePath + hrStaffInfoTemp.getPhotoName());
/* 1030 */         if (temp.exists()) {
/* 1031 */           temp.delete();
/*      */         }
/*      */       }
/*      */ 
/* 1035 */       if (imageFile != null) {
/* 1036 */         if (FileUploadUtil.allowUpload(imageFile.getContentType())) {
/* 1037 */           String fileName = FileUploadUtil.rename(imageFile.getOriginalFilename());
/* 1038 */           File dir = new File(realPath + resourcePath);
/* 1039 */           if (!dir.exists()) {
/* 1040 */             dir.mkdirs();
/*      */           }
/* 1042 */           File file = new File(dir, fileName);
/* 1043 */           imageFile.transferTo(file);
/* 1044 */           hrStaffInfo.setPhotoName(fileName);
/*      */         }
/* 1046 */         hrStaffInfo.setUserId("");
/* 1047 */         hrStaffInfo.setStaffId(hrStaffInfoTemp.getStaffId());
/* 1048 */         int count = this.hrStaffInfoMapper.updatePersonFile(hrStaffInfo);
/* 1049 */         if (count > 0) {
/* 1050 */           toJson.setFlag(0);
/* 1051 */           toJson.setMsg("ok");
/*      */         }
/*      */       }
/*      */     } catch (Exception e) {
/* 1055 */       e.printStackTrace();
/* 1056 */       toJson.setMsg(e.getMessage());
/*      */     }
/* 1058 */     return toJson;
/*      */   }
/*      */ 
/*      */   public BaseWrapper getAllWorkYearsInfo(int space)
/*      */   {
/* 1067 */     BaseWrapper baseWrapper = new BaseWrapper();
/* 1068 */     List<HrStaffInfo> hrStaffInfos = this.hrStaffInfoMapper.getAllWorkYearsInfo();
/* 1069 */     HashMap temp = new HashMap();
/* 1070 */     for (HrStaffInfo hs : hrStaffInfos)
/*      */     {
/* 1072 */       Date date = new Date();
/* 1073 */       SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
/* 1074 */       int age = -1;
/* 1075 */       if (hs != null)
/*      */       {
/* 1077 */         if ((hs.getWorkAge() != null) && (!"".equals(hs.getWorkAge()))) {
/* 1078 */           age = Integer.parseInt(hs.getWorkAge());
/* 1079 */           age /= space;
/*      */         }
/*      */         else {
/* 1082 */           Date d = null;
/*      */           try {
/* 1084 */             d = simpleDateFormat.parse(hs.getDatesEmployed());
/*      */           } catch (ParseException e) {
/* 1086 */             L.e(new Object[] { "工作时间转换出错" });
/* 1087 */             L.e(new Object[] { e });
/*      */           }
/* 1089 */           if (d != null) {
/* 1090 */             long years = (date.getTime() - d.getTime()) / 86400000L / 365L;
/* 1091 */             age = (int)years / space;
/*      */           } else {
/* 1093 */             age = -1;
/*      */           }
/*      */         }
/*      */       }
/* 1097 */       else age = -1;
/*      */ 
/* 1100 */       if ((age >= 0) && (age <= 65 / space)) {
/* 1101 */         if (temp.containsKey("years" + age))
/* 1102 */           temp.put("years" + age, Integer.valueOf(((Integer)temp.get("years" + age)).intValue() + 1));
/*      */         else {
/* 1104 */           temp.put("years" + age, Integer.valueOf(1));
/*      */         }
/*      */       }
/* 1107 */       else if (temp.containsKey("Unknown"))
/* 1108 */         temp.put("Unknown", Integer.valueOf(((Integer)temp.get("Unknown")).intValue() + 1));
/*      */       else {
/* 1110 */         temp.put("Unknown", Integer.valueOf(1));
/*      */       }
/*      */     }
/*      */ 
/* 1114 */     baseWrapper.setData(temp);
/* 1115 */     baseWrapper.setStatus(true);
/* 1116 */     baseWrapper.setFlag(true);
/* 1117 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public BaseWrapper getAllRecordInfo()
/*      */   {
/* 1126 */     BaseWrapper baseWrapper = new BaseWrapper();
/* 1127 */     List<HrStaffInfo> hrStaffInfos = this.hrStaffInfoMapper.getAllWorkYearsInfo();
/* 1128 */     HashMap temp = new HashMap();
/* 1129 */     for (HrStaffInfo hs : hrStaffInfos) {
/* 1130 */       String staffHighestSchool = "Unknown";
/* 1131 */       if (hs != null) {
/* 1132 */         staffHighestSchool = hs.getStaffHighestSchool();
/* 1133 */         if ((staffHighestSchool == null) || ("".equals(staffHighestSchool)))
/*      */         {
/* 1136 */           staffHighestSchool = "Unknown";
/*      */         }
/*      */       }
/* 1139 */       if (temp.containsKey(staffHighestSchool))
/* 1140 */         temp.put(staffHighestSchool, Integer.valueOf(((Integer)temp.get(staffHighestSchool)).intValue() + 1));
/*      */       else {
/* 1142 */         temp.put(staffHighestSchool, Integer.valueOf(1));
/*      */       }
/*      */     }
/* 1145 */     baseWrapper.setData(temp);
/* 1146 */     baseWrapper.setStatus(true);
/* 1147 */     baseWrapper.setFlag(true);
/* 1148 */     return baseWrapper;
/*      */   }
/*      */ 
/*      */   public ToJson<HrStaffInfo> importStaffInfo(MultipartFile file, HttpServletRequest request, HttpServletResponse response, HttpSession session)
/*      */   {
/* 1153 */     ToJson json = new ToJson();
/*      */ 
/* 1155 */     Integer successCount = Integer.valueOf(0);
/*      */     try
/*      */     {
/* 1159 */       ResourceBundle rb = ResourceBundle.getBundle("upload");
/* 1160 */       String osName = System.getProperty("os.name");
/* 1161 */       StringBuffer path = new StringBuffer();
/* 1162 */       if (osName.toLowerCase().startsWith("win"))
/* 1163 */         path = path.append(rb.getString("upload.win"));
/*      */       else {
/* 1165 */         path = path.append(rb.getString("upload.linux"));
/*      */       }
/*      */ 
/* 1169 */       if (file.isEmpty()) {
/* 1170 */         json.setMsg("请上传文件！");
/* 1171 */         json.setFlag(1);
/* 1172 */         return json;
/*      */       }
/* 1174 */       String fileName = file.getOriginalFilename();
/* 1175 */       if ((fileName.endsWith(".xls")) || (fileName.endsWith(".xlsx"))) {
/* 1176 */         String uuid = UUID.randomUUID().toString().replaceAll("-", "");
/* 1177 */         int pos = fileName.indexOf(".");
/* 1178 */         String extName = fileName.substring(pos);
/* 1179 */         String newFileName = uuid + extName;
/* 1180 */         File dest = new File(path.toString(), newFileName);
/* 1181 */         file.transferTo(dest);
/*      */ 
/* 1184 */         String readPath = path.append("\\" + newFileName).toString();
/* 1185 */         InputStream in = new FileInputStream(readPath);
/* 1186 */         HSSFWorkbook excelObj = new HSSFWorkbook(in);
/* 1187 */         HSSFSheet sheetObj = excelObj.getSheetAt(0);
/* 1188 */         Row row = sheetObj.getRow(0);
/* 1189 */         int colNum = row.getPhysicalNumberOfCells();
/* 1190 */         int lastRowNum = sheetObj.getLastRowNum();
/* 1191 */         List saveList = new ArrayList();
/* 1192 */         HrStaffInfoWithBLOBs hrStaffInfo = null;
/*      */         List parentList;
/* 1194 */         for (int i = 1; i <= lastRowNum; i++) {
/* 1195 */           hrStaffInfo = new HrStaffInfoWithBLOBs();
/* 1196 */           row = sheetObj.getRow(i);
/* 1197 */           if (row != null)
/*      */           {
/*      */             String deptIdByDeptName;
/* 1198 */             for (int j = 0; j < colNum; j++) {
/* 1199 */               Cell cell = row.getCell(j);
/* 1200 */               if (cell != null) {
/* 1201 */                 switch (j)
/*      */                 {
/*      */                 case 0:
/* 1204 */                   hrStaffInfo.setUserId(cell.getStringCellValue());
/* 1205 */                   break;
/*      */                 case 1:
/* 1208 */                   parentList = this.departmentMapper.getDeptIdByDeptName(cell.getStringCellValue());
/* 1209 */                   deptIdByDeptName = "";
/* 1210 */                   if (parentList.size() > 0) {
/* 1211 */                     deptIdByDeptName = (String)parentList.get(0);
/*      */                   }
/* 1213 */                   if (StringUtils.checkNull(deptIdByDeptName).booleanValue()) continue;
/* 1214 */                   hrStaffInfo.setDeptId(Integer.valueOf(deptIdByDeptName)); break;
/*      */                 case 2:
/* 1219 */                   hrStaffInfo.setStaffNo(String.valueOf(cell.getNumericCellValue()));
/* 1220 */                   break;
/*      */                 case 3:
/* 1223 */                   hrStaffInfo.setWorkNo(String.valueOf(cell.getNumericCellValue()));
/* 1224 */                   break;
/*      */                 case 4:
/* 1227 */                   hrStaffInfo.setStaffName(cell.getStringCellValue());
/* 1228 */                   break;
/*      */                 case 5:
/* 1231 */                   hrStaffInfo.setStaffCardNo(String.valueOf(cell.getStringCellValue()));
/* 1232 */                   break;
/*      */                 case 6:
/* 1235 */                   hrStaffInfo.setStaffSex(String.valueOf(cell.getNumericCellValue()));
/* 1236 */                   break;
/*      */                 case 7:
/* 1239 */                   hrStaffInfo.setStaffNationality(cell.getStringCellValue());
/* 1240 */                   break;
/*      */                 case 8:
/* 1243 */                   hrStaffInfo.setStaffAge(String.valueOf(cell.getNumericCellValue()));
/* 1244 */                   break;
/*      */                 case 9:
/* 1247 */                   hrStaffInfo.setStaffNativePlace(cell.getStringCellValue());
/* 1248 */                   hrStaffInfo.setStaffNativePlace2(cell.getStringCellValue());
/* 1249 */                   break;
/*      */                 case 10:
/* 1251 */                   String stringCellValue = cell.getStringCellValue();
/* 1252 */                   if (stringCellValue.equals("群众")) {
/* 1253 */                     hrStaffInfo.setStaffPoliticalStatus("1");
/*      */                   }
/* 1255 */                   else if (stringCellValue.equals("共青团员")) {
/* 1256 */                     hrStaffInfo.setStaffPoliticalStatus("2");
/*      */                   }
/* 1258 */                   else if (stringCellValue.equals("中共党员")) {
/* 1259 */                     hrStaffInfo.setStaffPoliticalStatus("3");
/*      */                   }
/* 1261 */                   else if (stringCellValue.equals("中共预备党员")) {
/* 1262 */                     hrStaffInfo.setStaffPoliticalStatus("4");
/*      */                   }
/* 1264 */                   else if (stringCellValue.equals("民主党派")) {
/* 1265 */                     hrStaffInfo.setStaffPoliticalStatus("5");
/*      */                   }
/*      */                   else {
/* 1268 */                     hrStaffInfo.setStaffPoliticalStatus("6");
/*      */                   }
/* 1270 */                   break;
/*      */                 case 11:
/* 1273 */                   hrStaffInfo.setStaffMobile(String.valueOf(cell.getNumericCellValue()));
/* 1274 */                   break;
/*      */                 case 12:
/* 1277 */                   hrStaffInfo.setStaffEmail(cell.getStringCellValue());
/* 1278 */                   break;
/*      */                 case 13:
/* 1281 */                   hrStaffInfo.setStaffQq(String.valueOf(cell.getNumericCellValue()));
/* 1282 */                   break;
/*      */                 case 14:
/* 1285 */                   hrStaffInfo.setHomeAddress(cell.getStringCellValue());
/* 1286 */                   break;
/*      */                 case 15:
/* 1289 */                   hrStaffInfo.setStaffHealth(cell.getStringCellValue());
/* 1290 */                   break;
/*      */                 case 16:
/* 1293 */                   UserPriv userPrivByName = this.userPrivMapper.getUserPrivByName(cell.getStringCellValue());
/* 1294 */                   if (userPrivByName == null) continue;
/* 1295 */                   hrStaffInfo.setUserPriv(userPrivByName.getUserPriv().toString());
/*      */                 }
/*      */               }
/*      */ 
/*      */             }
/*      */ 
/* 1301 */             HrStaffInfo singleHrStaffInfo = this.hrStaffInfoMapper.getSingleHrStaffInfo(hrStaffInfo);
/*      */ 
/* 1304 */             if (singleHrStaffInfo != null) {
/* 1305 */               singleHrStaffInfo.setStaffId(singleHrStaffInfo.getStaffId());
/* 1306 */               int i1 = this.hrStaffInfoMapper.updateByPrimaryKeySelective(singleHrStaffInfo);
/* 1307 */               if (i1 > 0) {
///* 1308 */                 parentList = successCount;
//                           deptIdByDeptName = successCount = Integer.valueOf(successCount.intValue() + 1);
                           successCount = Integer.valueOf(successCount.intValue() + 1);
/*      */               }
/*      */             } else {
/* 1311 */               ToJson usersToJson = savePersonFile(hrStaffInfo, request);
/* 1312 */               if (usersToJson.isFlag()) {
///* 1313 */                 parentList = successCount; deptIdByDeptName = 
		                     successCount = Integer.valueOf(successCount.intValue() + 1);
/*      */               }
/*      */             }
/*      */           }
/*      */         }
/*      */ 
/*      */       }
/*      */       else
/*      */       {
/* 1322 */         json.setMsg("file type error!");
/* 1323 */         json.setFlag(1);
/* 1324 */         return json;
/*      */       }
/*      */ 
/* 1327 */       json.setTotleNum(successCount);
/* 1328 */       json.setMsg("ok");
/* 1329 */       json.setFlag(0);
/*      */     } catch (Exception e) {
/* 1331 */       e.printStackTrace();
/* 1332 */       json.setMsg("err");
/* 1333 */       json.setFlag(1);
/*      */     }
/* 1335 */     return json;
/*      */   }
/*      */ }

/* Location:           D:\xoa\webapps\ROOT\WEB-INF\classes\
 * Qualified Name:     com.xoa.service.hr.impl.HrStaffInfoServiceImpl
 * JD-Core Version:    0.6.0
 */